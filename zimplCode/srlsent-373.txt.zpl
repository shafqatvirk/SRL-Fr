# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Commemorative","Attack","Employing","Commitment","Telling","Event","Self_motion","Statement","Run_risk","Communication","Expertise","Part_orientational","Medical_conditions","Political_locales"};
set Roles[Frames] :=  <"Commemorative"> {"Dedicated_entity","Honored_entity","Dedicated_type"}, <"Attack"> {"Particular_iteration","Iteration","Event_description","Means","Depictive","Circumstances","Manner","Result","Explanation","Time","Source","Containing_event","Place","Re_encoding","Weapon","Purpose","Victim","Path","Assailant"}, <"Employing"> {"Purpose","Time","Descriptor","Place","Field","Task","Employer","Compensation","Position","Manner","Contract_basis","Employee"}, <"Commitment"> {"Addressee","Medium","Topic","Manner","Speaker","Time","Message","Purpose"}, <"Telling"> {"Iteration","Topic","Time","Descriptor","Place","Addressee","Epistemic_stance","Manner","Means","Message","Speaker","Medium"}, <"Event"> {"Time","Duration","Place","Manner","Reason","Event","Frequency"}, <"Self_motion"> {"Speed","Duration","Area","Purpose","Cotheme","Means","Depictive","Coordinated_event","Manner","Path","Result","Distance","Self_mover","Time","Source","External_cause","Place","Goal","Reason","Direction","Concessive","Internal_cause","Path_shape"}, <"Statement"> {"Message","Medium","Place","Iteration","Means","Depictive","Manner","Epistemic_stance","Speaker","Event_description","Addressee","Time","Containing_event","Degree","Occasion","Group","Frequency","Particular_iteration","Internal_cause","Topic"}, <"Run_risk"> {"Purpose","Iteration","Bad_outcome","Time","Severity","Circumstances","Place","Protagonist","Asset","Beneficiary","Frequency","Action","Explanation"}, <"Communication"> {"Amount_of_information","Duration","Addressee","Medium","Topic","Manner","Communicator","Time","Message","Means","Frequency"}, <"Expertise"> {"Skill","Knowledge","Degree","Manner","Behavior_product","Time","Protagonist","Role","Focal_participant"}, <"Part_orientational"> {"Part_Prop","Part","Whole"}, <"Medical_conditions"> {"Place","Symptom","Body_Part","Degree","Patient","Name","Ailment","Cause"}, <"Political_locales"> {"Relative_location","Constituent_parts","Container_possessor","Descriptor","Name","Population","Locale"};
set Spans := {"-1_-1","0_0","0_1","0_10","0_23","0_38","0_6","0_8","0_9","10_10","10_23","11_11","11_23","12_12","13_13","13_23","14_14","14_21","15_15","15_21","16_16","17_17","17_19","18_18","19_19","1_1","20_20","21_21","22_22","22_23","23_23","24_24","25_25","26_26","26_27","26_31","26_37","27_27","28_28","29_29","2_2","30_30","31_31","32_32","32_37","33_33","33_37","34_34","35_35","36_36","37_37","38_38","3_3","3_4","4_4","5_5","6_6","7_7","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Commemorative"]] binary;
var z1[Assignment["Attack"]] binary;
var z2[Assignment["Employing"]] binary;
var z3[Assignment["Commitment"]] binary;
var z4[Assignment["Telling"]] binary;
var z5[Assignment["Event"]] binary;
var z6[Assignment["Self_motion"]] binary;
var z7[Assignment["Statement"]] binary;
var z8[Assignment["Run_risk"]] binary;
var z9[Assignment["Communication"]] binary;
var z10[Assignment["Expertise"]] binary;
var z11[Assignment["Part_orientational"]] binary;
var z12[Assignment["Medical_conditions"]] binary;
var z13[Assignment["Political_locales"]] binary;
param probabilities0[Assignment["Commemorative"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Attack"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Employing"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Commitment"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Telling"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Event"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Self_motion"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Statement"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Run_risk"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Communication"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Expertise"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;
param probabilities11[Assignment["Part_orientational"]] := read "../frameData/frame11.txt" as "<1s,2s> 3n" skip 2;
param probabilities12[Assignment["Medical_conditions"]] := read "../frameData/frame12.txt" as "<1s,2s> 3n" skip 2;
param probabilities13[Assignment["Political_locales"]] := read "../frameData/frame13.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Commemorative"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Attack"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Employing"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Commitment"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Telling"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Event"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Self_motion"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Statement"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Run_risk"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Communication"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Expertise"] : probabilities10[r,s] * z10[r,s])+(sum <r,s> in Assignment["Part_orientational"] : probabilities11[r,s] * z11[r,s])+(sum <r,s> in Assignment["Medical_conditions"] : probabilities12[r,s] * z12[r,s])+(sum <r,s> in Assignment["Political_locales"] : probabilities13[r,s] * z13[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 38};
set G[I] := <0> {"0_0","0_1","0_10","0_23","0_38","0_6","0_8","0_9"}, <1> {"0_1","0_10","0_23","0_38","0_6","0_8","0_9","1_1"}, <2> {"0_10","0_23","0_38","0_6","0_8","0_9","2_2"}, <3> {"0_10","0_23","0_38","0_6","0_8","0_9","3_3","3_4"}, <4> {"0_10","0_23","0_38","0_6","0_8","0_9","3_4","4_4"}, <5> {"0_10","0_23","0_38","0_6","0_8","0_9","5_5"}, <6> {"0_10","0_23","0_38","0_6","0_8","0_9","6_6"}, <7> {"0_10","0_23","0_38","0_8","0_9","7_7"}, <8> {"0_10","0_23","0_38","0_8","0_9","8_8"}, <9> {"0_10","0_23","0_38","0_9","9_9"}, <10> {"0_10","0_23","0_38","10_10","10_23"}, <11> {"0_23","0_38","10_23","11_11","11_23"}, <12> {"0_23","0_38","10_23","11_23","12_12"}, <13> {"0_23","0_38","10_23","11_23","13_13","13_23"}, <14> {"0_23","0_38","10_23","11_23","13_23","14_14","14_21"}, <15> {"0_23","0_38","10_23","11_23","13_23","14_21","15_15","15_21"}, <16> {"0_23","0_38","10_23","11_23","13_23","14_21","15_21","16_16"}, <17> {"0_23","0_38","10_23","11_23","13_23","14_21","15_21","17_17","17_19"}, <18> {"0_23","0_38","10_23","11_23","13_23","14_21","15_21","17_19","18_18"}, <19> {"0_23","0_38","10_23","11_23","13_23","14_21","15_21","17_19","19_19"}, <20> {"0_23","0_38","10_23","11_23","13_23","14_21","15_21","20_20"}, <21> {"0_23","0_38","10_23","11_23","13_23","14_21","15_21","21_21"}, <22> {"0_23","0_38","10_23","11_23","13_23","22_22","22_23"}, <23> {"0_23","0_38","10_23","11_23","13_23","22_23","23_23"}, <24> {"0_38","24_24"}, <25> {"0_38","25_25"}, <26> {"0_38","26_26","26_27","26_31","26_37"}, <27> {"0_38","26_27","26_31","26_37","27_27"}, <28> {"0_38","26_31","26_37","28_28"}, <29> {"0_38","26_31","26_37","29_29"}, <30> {"0_38","26_31","26_37","30_30"}, <31> {"0_38","26_31","26_37","31_31"}, <32> {"0_38","26_37","32_32","32_37"}, <33> {"0_38","26_37","32_37","33_33","33_37"}, <34> {"0_38","26_37","32_37","33_37","34_34"}, <35> {"0_38","26_37","32_37","33_37","35_35"}, <36> {"0_38","26_37","32_37","33_37","36_36"}, <37> {"0_38","26_37","32_37","33_37","37_37"}, <38> {"0_38","38_38"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Commemorative"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Attack"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Employing"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Commitment"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Telling"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Event"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Self_motion"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Statement"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Run_risk"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Communication"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Expertise"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
subto overlap11: forall <i> in I do 
 sum <r> in Roles["Part_orientational"] do 
 sum <s> in G[i] do z11[r,s] <= 1;
subto overlap12: forall <i> in I do 
 sum <r> in Roles["Medical_conditions"] do 
 sum <s> in G[i] do z12[r,s] <= 1;
subto overlap13: forall <i> in I do 
 sum <r> in Roles["Political_locales"] do 
 sum <s> in G[i] do z13[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Commemorative"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Attack"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Employing"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Commitment"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Telling"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Event"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Self_motion"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Statement"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Run_risk"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Communication"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Expertise"] do sum <s> in Spans : z10[r,s] == 1;
subto unique11: forall <r> in Roles["Part_orientational"] do sum <s> in Spans : z11[r,s] == 1;
subto unique12: forall <r> in Roles["Medical_conditions"] do sum <s> in Spans : z12[r,s] == 1;
subto unique13: forall <r> in Roles["Political_locales"] do sum <s> in Spans : z13[r,s] == 1;
#pairwise exclusion constraint
set Exc6 := {<"Area","Direction">,<"Area","Goal">,<"Area","Path">,<"Area","Source">};
subto exclusion6: forall <ri,rj> in Exc6 do z6[ri,"-1_-1"] + z6[rj,"-1_-1"] >= 1;
set Exc8 := {<"Asset","Bad_outcome">};
subto exclusion8: forall <ri,rj> in Exc8 do z8[ri,"-1_-1"] + z8[rj,"-1_-1"] >= 1;
set Exc10 := {<"Behavior_product","Knowledge">,<"Behavior_product","Role">,<"Behavior_product","Focal_participant">,<"Behavior_product","Skill">};
subto exclusion10: forall <ri,rj> in Exc10 do z10[ri,"-1_-1"] + z10[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
