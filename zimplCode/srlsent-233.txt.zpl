# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Becoming_a_member","Weapon","Artifact","Control","Leadership","Commitment","Compliance","Importance","Terms_of_agreement"};
set Roles[Frames] :=  <"Becoming_a_member"> {"Purpose","Circumstances","Time","Place","New_member","Role","Group","Depictive","Reciprocation","Re_encoding","Manner","Explanation"}, <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Artifact"> {"Creator","Type","Use","Material","Time_of_creation","Name","Artifact"}, <"Control"> {"Manner","Time","Controlling_entity","Dependent_situation","Dependent_entity"}, <"Leadership"> {"Domain","Leader","Type","Depictive","Descriptor","Degree","Means","Role","Activity","Duration","Governed","Manner","Time"}, <"Commitment"> {"Addressee","Medium","Topic","Manner","Speaker","Time","Message","Purpose"}, <"Compliance"> {"State_of_Affairs","Degree","Manner","Time","Protagonist","Norm","Means","Act"}, <"Importance"> {"Place","Undertaking","Explanation","Field","Time","Factor","Reason","Frequency","Degree","Interested_party"}, <"Terms_of_agreement"> {"Descriptor","Requirements","Desired_state_of_affairs","Agreement"};
set Spans := {"-1_-1","0_0","0_22","10_10","10_11","11_11","12_12","13_13","14_14","14_21","15_15","15_21","16_16","16_17","16_21","17_17","17_21","18_18","18_21","19_19","19_21","1_1","1_22","20_20","21_21","22_22","2_2","3_11","3_3","4_11","4_4","4_8","5_5","6_6","7_7","8_8","9_10","9_11","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Becoming_a_member"]] binary;
var z1[Assignment["Weapon"]] binary;
var z2[Assignment["Artifact"]] binary;
var z3[Assignment["Control"]] binary;
var z4[Assignment["Leadership"]] binary;
var z5[Assignment["Commitment"]] binary;
var z6[Assignment["Compliance"]] binary;
var z7[Assignment["Importance"]] binary;
var z8[Assignment["Terms_of_agreement"]] binary;
param probabilities0[Assignment["Becoming_a_member"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Weapon"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Artifact"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Control"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Leadership"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Commitment"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Compliance"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Importance"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Terms_of_agreement"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Becoming_a_member"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Weapon"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Artifact"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Control"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Leadership"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Commitment"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Compliance"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Importance"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Terms_of_agreement"] : probabilities8[r,s] * z8[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 22};
set G[I] := <0> {"0_0","0_22"}, <1> {"0_22","1_1","1_22"}, <2> {"0_22","1_22","2_2"}, <3> {"0_22","1_22","3_11","3_3"}, <4> {"0_22","1_22","3_11","4_11","4_4","4_8"}, <5> {"0_22","1_22","3_11","4_11","4_8","5_5"}, <6> {"0_22","1_22","3_11","4_11","4_8","6_6"}, <7> {"0_22","1_22","3_11","4_11","4_8","7_7"}, <8> {"0_22","1_22","3_11","4_11","4_8","8_8"}, <9> {"0_22","1_22","3_11","4_11","9_10","9_11","9_9"}, <10> {"0_22","10_10","10_11","1_22","3_11","4_11","9_10","9_11"}, <11> {"0_22","10_11","11_11","1_22","3_11","4_11","9_11"}, <12> {"0_22","12_12","1_22"}, <13> {"0_22","13_13","1_22"}, <14> {"0_22","14_14","14_21","1_22"}, <15> {"0_22","14_21","15_15","15_21","1_22"}, <16> {"0_22","14_21","15_21","16_16","16_17","16_21","1_22"}, <17> {"0_22","14_21","15_21","16_17","16_21","17_17","17_21","1_22"}, <18> {"0_22","14_21","15_21","16_21","17_21","18_18","18_21","1_22"}, <19> {"0_22","14_21","15_21","16_21","17_21","18_21","19_19","19_21","1_22"}, <20> {"0_22","14_21","15_21","16_21","17_21","18_21","19_21","1_22","20_20"}, <21> {"0_22","14_21","15_21","16_21","17_21","18_21","19_21","1_22","21_21"}, <22> {"0_22","1_22","22_22"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Becoming_a_member"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Artifact"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Control"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Leadership"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Commitment"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Compliance"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Importance"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Terms_of_agreement"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Becoming_a_member"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Weapon"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Artifact"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Control"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Leadership"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Commitment"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Compliance"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Importance"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Terms_of_agreement"] do sum <s> in Spans : z8[r,s] == 1;
#pairwise exclusion constraint
set Exc7 := {<"Field","Interested_party">};
subto exclusion7: forall <ri,rj> in Exc7 do z7[ri,"-1_-1"] + z7[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
