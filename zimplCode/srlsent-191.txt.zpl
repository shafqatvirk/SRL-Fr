# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Statement","Contrition","Buildings","Event_instance","Front_for","Aggregate","Judgment_communication","Becoming_a_member","Military","Contrition","Quantity","Intentionally_act","Quantity","Attempt_suasion","Risky_situation","Kinship"};
set Roles[Frames] :=  <"Statement"> {"Message","Medium","Place","Iteration","Means","Depictive","Manner","Epistemic_stance","Speaker","Event_description","Addressee","Time","Containing_event","Degree","Occasion","Group","Frequency","Particular_iteration","Internal_cause","Topic"}, <"Contrition"> {"Emotional_state","Degree","Action","Experiencer","Time","Expressor","Authenticity","Depictive"}, <"Buildings"> {"Type","Place","Function","Time_of_creation","Relative_location","Name","Building","Descriptor","Material","Builder"}, <"Event_instance"> {"Instance","Event","Instance_Prop"}, <"Front_for"> {"Illicit_organization","Illicit_activity","Front"}, <"Aggregate"> {"Individuals","AggregateProperty","Aggregate","Name","Domain","Container_possessor"}, <"Judgment_communication"> {"Topic","Extent_of_acclaim","Place","Addressee","Degree","Grounds","Communicator","Means","Role","Evaluee","Expressor","Reason","Depictive","Frequency","Manner","Time","Medium"}, <"Becoming_a_member"> {"Purpose","Circumstances","Time","Place","New_member","Role","Group","Depictive","Reciprocation","Re_encoding","Manner","Explanation"}, <"Military"> {"Members","Descriptor","Possessor","Goal","Domain","Force"}, <"Contrition"> {"Emotional_state","Degree","Action","Experiencer","Time","Expressor","Authenticity","Depictive"}, <"Quantity"> {"Mass","Q_Prop","Degree","Quantity","Individuals"}, <"Intentionally_act"> {"Purpose","Result","Time","Place","Frequency","Means","Event_dscription","Period_of_iterations","Domain","Act","Particular_iteration","Manner","Explanation","Agent"}, <"Quantity"> {"Mass","Q_Prop","Degree","Quantity","Individuals"}, <"Attempt_suasion"> {"Circumstances","Frequency","Depictive","Addressee","Degree","Group","Means","Speaker","Period_of_iterations","Topic","Re_encoding","Content","Manner","Explanation","Time","Medium"}, <"Risky_situation"> {"Dangerous_entity","Asset","Degree","Domain","Situation","Time","Circumstances","Frequency"}, <"Kinship"> {"Relatives","Descriptor","Ego","Degree","Alter"};
set Spans := {"-1_-1","0_0","0_22","0_40","10_10","10_14","11_11","11_14","12_12","12_14","13_13","13_14","14_14","15_15","16_16","16_22","17_17","17_22","18_18","18_22","19_19","19_22","1_1","1_22","20_20","21_21","22_22","23_23","24_24","25_25","25_27","26_26","26_27","27_27","28_28","29_29","2_2","30_30","31_31","32_32","32_39","33_33","33_36","33_39","34_34","35_35","36_36","37_37","37_39","38_38","38_39","39_39","3_3","40_40","4_4","4_5","5_5","6_6","6_8","7_7","7_8","8_8","9_10","9_14","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Statement"]] binary;
var z1[Assignment["Contrition"]] binary;
var z2[Assignment["Buildings"]] binary;
var z3[Assignment["Event_instance"]] binary;
var z4[Assignment["Front_for"]] binary;
var z5[Assignment["Aggregate"]] binary;
var z6[Assignment["Judgment_communication"]] binary;
var z7[Assignment["Becoming_a_member"]] binary;
var z8[Assignment["Military"]] binary;
var z9[Assignment["Contrition"]] binary;
var z10[Assignment["Quantity"]] binary;
var z11[Assignment["Intentionally_act"]] binary;
var z12[Assignment["Quantity"]] binary;
var z13[Assignment["Attempt_suasion"]] binary;
var z14[Assignment["Risky_situation"]] binary;
var z15[Assignment["Kinship"]] binary;
param probabilities0[Assignment["Statement"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Contrition"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Buildings"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Event_instance"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Front_for"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Aggregate"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Judgment_communication"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Becoming_a_member"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Military"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Contrition"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Quantity"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;
param probabilities11[Assignment["Intentionally_act"]] := read "../frameData/frame11.txt" as "<1s,2s> 3n" skip 2;
param probabilities12[Assignment["Quantity"]] := read "../frameData/frame12.txt" as "<1s,2s> 3n" skip 2;
param probabilities13[Assignment["Attempt_suasion"]] := read "../frameData/frame13.txt" as "<1s,2s> 3n" skip 2;
param probabilities14[Assignment["Risky_situation"]] := read "../frameData/frame14.txt" as "<1s,2s> 3n" skip 2;
param probabilities15[Assignment["Kinship"]] := read "../frameData/frame15.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Statement"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Contrition"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Buildings"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Event_instance"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Front_for"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Aggregate"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Judgment_communication"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Becoming_a_member"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Military"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Contrition"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Quantity"] : probabilities10[r,s] * z10[r,s])+(sum <r,s> in Assignment["Intentionally_act"] : probabilities11[r,s] * z11[r,s])+(sum <r,s> in Assignment["Quantity"] : probabilities12[r,s] * z12[r,s])+(sum <r,s> in Assignment["Attempt_suasion"] : probabilities13[r,s] * z13[r,s])+(sum <r,s> in Assignment["Risky_situation"] : probabilities14[r,s] * z14[r,s])+(sum <r,s> in Assignment["Kinship"] : probabilities15[r,s] * z15[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 40};
set G[I] := <0> {"0_0","0_22","0_40"}, <1> {"0_22","0_40","1_1","1_22"}, <2> {"0_22","0_40","1_22","2_2"}, <3> {"0_22","0_40","1_22","3_3"}, <4> {"0_22","0_40","1_22","4_4","4_5"}, <5> {"0_22","0_40","1_22","4_5","5_5"}, <6> {"0_22","0_40","1_22","6_6","6_8"}, <7> {"0_22","0_40","1_22","6_8","7_7","7_8"}, <8> {"0_22","0_40","1_22","6_8","7_8","8_8"}, <9> {"0_22","0_40","1_22","9_10","9_14","9_9"}, <10> {"0_22","0_40","10_10","10_14","1_22","9_10","9_14"}, <11> {"0_22","0_40","10_14","11_11","11_14","1_22","9_14"}, <12> {"0_22","0_40","10_14","11_14","12_12","12_14","1_22","9_14"}, <13> {"0_22","0_40","10_14","11_14","12_14","13_13","13_14","1_22","9_14"}, <14> {"0_22","0_40","10_14","11_14","12_14","13_14","14_14","1_22","9_14"}, <15> {"0_22","0_40","15_15","1_22"}, <16> {"0_22","0_40","16_16","16_22","1_22"}, <17> {"0_22","0_40","16_22","17_17","17_22","1_22"}, <18> {"0_22","0_40","16_22","17_22","18_18","18_22","1_22"}, <19> {"0_22","0_40","16_22","17_22","18_22","19_19","19_22","1_22"}, <20> {"0_22","0_40","16_22","17_22","18_22","19_22","1_22","20_20"}, <21> {"0_22","0_40","16_22","17_22","18_22","19_22","1_22","21_21"}, <22> {"0_22","0_40","16_22","17_22","18_22","19_22","1_22","22_22"}, <23> {"0_40","23_23"}, <24> {"0_40","24_24"}, <25> {"0_40","25_25","25_27"}, <26> {"0_40","25_27","26_26","26_27"}, <27> {"0_40","25_27","26_27","27_27"}, <28> {"0_40","28_28"}, <29> {"0_40","29_29"}, <30> {"0_40","30_30"}, <31> {"0_40","31_31"}, <32> {"0_40","32_32","32_39"}, <33> {"0_40","32_39","33_33","33_36","33_39"}, <34> {"0_40","32_39","33_36","33_39","34_34"}, <35> {"0_40","32_39","33_36","33_39","35_35"}, <36> {"0_40","32_39","33_36","33_39","36_36"}, <37> {"0_40","32_39","33_39","37_37","37_39"}, <38> {"0_40","32_39","33_39","37_39","38_38","38_39"}, <39> {"0_40","32_39","33_39","37_39","38_39","39_39"}, <40> {"0_40","40_40"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Statement"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Contrition"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Buildings"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Event_instance"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Front_for"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Aggregate"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Judgment_communication"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Becoming_a_member"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Military"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Contrition"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Quantity"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
subto overlap11: forall <i> in I do 
 sum <r> in Roles["Intentionally_act"] do 
 sum <s> in G[i] do z11[r,s] <= 1;
subto overlap12: forall <i> in I do 
 sum <r> in Roles["Quantity"] do 
 sum <s> in G[i] do z12[r,s] <= 1;
subto overlap13: forall <i> in I do 
 sum <r> in Roles["Attempt_suasion"] do 
 sum <s> in G[i] do z13[r,s] <= 1;
subto overlap14: forall <i> in I do 
 sum <r> in Roles["Risky_situation"] do 
 sum <s> in G[i] do z14[r,s] <= 1;
subto overlap15: forall <i> in I do 
 sum <r> in Roles["Kinship"] do 
 sum <s> in G[i] do z15[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Statement"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Contrition"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Buildings"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Event_instance"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Front_for"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Aggregate"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Judgment_communication"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Becoming_a_member"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Military"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Contrition"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Quantity"] do sum <s> in Spans : z10[r,s] == 1;
subto unique11: forall <r> in Roles["Intentionally_act"] do sum <s> in Spans : z11[r,s] == 1;
subto unique12: forall <r> in Roles["Quantity"] do sum <s> in Spans : z12[r,s] == 1;
subto unique13: forall <r> in Roles["Attempt_suasion"] do sum <s> in Spans : z13[r,s] == 1;
subto unique14: forall <r> in Roles["Risky_situation"] do sum <s> in Spans : z14[r,s] == 1;
subto unique15: forall <r> in Roles["Kinship"] do sum <s> in Spans : z15[r,s] == 1;
#pairwise exclusion constraint
set Exc4 := {<"Illicit_activity","Illicit_organization">};
subto exclusion4: forall <ri,rj> in Exc4 do z4[ri,"-1_-1"] + z4[rj,"-1_-1"] >= 1;
set Exc6 := {<"Communicator","Expressor">};
subto exclusion6: forall <ri,rj> in Exc6 do z6[ri,"-1_-1"] + z6[rj,"-1_-1"] >= 1;
set Exc10 := {<"Individuals","Mass">};
subto exclusion10: forall <ri,rj> in Exc10 do z10[ri,"-1_-1"] + z10[rj,"-1_-1"] >= 1;
set Exc12 := {<"Individuals","Mass">};
subto exclusion12: forall <ri,rj> in Exc12 do z12[ri,"-1_-1"] + z12[rj,"-1_-1"] >= 1;
set Exc14 := {<"Dangerous_entity","Situation">};
subto exclusion14: forall <ri,rj> in Exc14 do z14[ri,"-1_-1"] + z14[rj,"-1_-1"] >= 1;
set Exc15 := {<"Ego","Relatives">,<"Alter","Relatives">};
subto exclusion15: forall <ri,rj> in Exc15 do z15[ri,"-1_-1"] + z15[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
set Reqr15 := {<"Alter","Ego">};
subto require15: forall <ri,rj> in Reqr15 do z15[ri,"-1_-1"] - z15[rj,"-1_-1"] == 0;
