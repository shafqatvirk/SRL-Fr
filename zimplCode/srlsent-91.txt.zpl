# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Locative_relation","Locale_by_use","Cause_motion","Education_teaching","Political_locales","Arriving","Assistance","Cause_change","Lively_place","Lively_place","Political_locales","Political_locales"};
set Roles[Frames] :=  <"Locative_relation"> {"Time","Distance","Figure","Ground","Direction","Figures"}, <"Locale_by_use"> {"Formational_cause","Use","Locale","Relative_location","Name","Container_possessor","Constituent_parts","Descriptor"}, <"Cause_motion"> {"Initial_State","Area","Theme","Means","Depictive","Agent","Manner","Result","Distance","Explanation","Instrument","Cause","Time","Source","Degree","Place","Goal","Handle","Path"}, <"Education_teaching"> {"Duration","Depictive","Purpose","Means","Role","Institution","Level","Manner","Result","Subject","Teacher","Course","Time","Material","Degree","Place","Skill","Qualification","Student","Fact","Precept"}, <"Political_locales"> {"Relative_location","Constituent_parts","Container_possessor","Descriptor","Name","Population","Locale"}, <"Arriving"> {"Theme","Cotheme","Means","Depictive","Circumstances","Manner","Time","Source","Period_of_iterations","Degree","Event_description","Re_encoding","Goal","Purpose","Goal_conditions","Path","Frequency","Mode_of_transportation"}, <"Assistance"> {"Purpose","Time","Goal","Place","Frequency","Degree","Helper","Means","Benefited_party","Domain","Duration","Focal_entity","Manner","Explanation"}, <"Cause_change"> {"Duration","Purpose","Attribute","Initial_value","Role","Circumstances","Agent","Manner","Means","Event_description","Final_category","Cause","Time","Period_of_iterations","Containing_event","Degree","Place","Re_encoding","Reason","Initial_category","Final_value","Entity"}, <"Lively_place"> {"Duration","Place","Degree","Manner","Explanation","Individuals","Time","Circumstances","Location","Activity"}, <"Lively_place"> {"Duration","Place","Degree","Manner","Explanation","Individuals","Time","Circumstances","Location","Activity"}, <"Political_locales"> {"Relative_location","Constituent_parts","Container_possessor","Descriptor","Name","Population","Locale"}, <"Political_locales"> {"Relative_location","Constituent_parts","Container_possessor","Descriptor","Name","Population","Locale"};
set Spans := {"-1_-1","0_0","0_1","0_2","0_23","0_8","10_10","11_11","11_12","12_12","13_13","14_14","14_22","15_15","15_22","16_16","16_18","17_17","18_18","19_19","1_1","20_20","20_22","21_21","21_22","22_22","23_23","2_2","2_8","3_3","3_8","4_4","4_8","5_5","5_8","6_6","6_8","7_7","7_8","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Locative_relation"]] binary;
var z1[Assignment["Locale_by_use"]] binary;
var z2[Assignment["Cause_motion"]] binary;
var z3[Assignment["Education_teaching"]] binary;
var z4[Assignment["Political_locales"]] binary;
var z5[Assignment["Arriving"]] binary;
var z6[Assignment["Assistance"]] binary;
var z7[Assignment["Cause_change"]] binary;
var z8[Assignment["Lively_place"]] binary;
var z9[Assignment["Lively_place"]] binary;
var z10[Assignment["Political_locales"]] binary;
var z11[Assignment["Political_locales"]] binary;
param probabilities0[Assignment["Locative_relation"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Locale_by_use"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Cause_motion"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Education_teaching"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Political_locales"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Arriving"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Assistance"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Cause_change"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Lively_place"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Lively_place"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Political_locales"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;
param probabilities11[Assignment["Political_locales"]] := read "../frameData/frame11.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Locative_relation"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Locale_by_use"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Cause_motion"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Education_teaching"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Political_locales"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Arriving"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Assistance"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Cause_change"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Lively_place"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Lively_place"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Political_locales"] : probabilities10[r,s] * z10[r,s])+(sum <r,s> in Assignment["Political_locales"] : probabilities11[r,s] * z11[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 23};
set G[I] := <0> {"0_0","0_1","0_2","0_23","0_8"}, <1> {"0_1","0_2","0_23","0_8","1_1"}, <2> {"0_2","0_23","0_8","2_2","2_8"}, <3> {"0_23","0_8","2_8","3_3","3_8"}, <4> {"0_23","0_8","2_8","3_8","4_4","4_8"}, <5> {"0_23","0_8","2_8","3_8","4_8","5_5","5_8"}, <6> {"0_23","0_8","2_8","3_8","4_8","5_8","6_6","6_8"}, <7> {"0_23","0_8","2_8","3_8","4_8","5_8","6_8","7_7","7_8"}, <8> {"0_23","0_8","2_8","3_8","4_8","5_8","6_8","7_8","8_8"}, <9> {"0_23","9_9"}, <10> {"0_23","10_10"}, <11> {"0_23","11_11","11_12"}, <12> {"0_23","11_12","12_12"}, <13> {"0_23","13_13"}, <14> {"0_23","14_14","14_22"}, <15> {"0_23","14_22","15_15","15_22"}, <16> {"0_23","14_22","15_22","16_16","16_18"}, <17> {"0_23","14_22","15_22","16_18","17_17"}, <18> {"0_23","14_22","15_22","16_18","18_18"}, <19> {"0_23","14_22","15_22","19_19"}, <20> {"0_23","14_22","15_22","20_20","20_22"}, <21> {"0_23","14_22","15_22","20_22","21_21","21_22"}, <22> {"0_23","14_22","15_22","20_22","21_22","22_22"}, <23> {"0_23","23_23"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Locative_relation"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Locale_by_use"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Cause_motion"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Education_teaching"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Political_locales"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Arriving"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Assistance"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Cause_change"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Lively_place"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Lively_place"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Political_locales"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
subto overlap11: forall <i> in I do 
 sum <r> in Roles["Political_locales"] do 
 sum <s> in G[i] do z11[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Locative_relation"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Locale_by_use"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Cause_motion"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Education_teaching"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Political_locales"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Arriving"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Assistance"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Cause_change"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Lively_place"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Lively_place"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Political_locales"] do sum <s> in Spans : z10[r,s] == 1;
subto unique11: forall <r> in Roles["Political_locales"] do sum <s> in Spans : z11[r,s] == 1;
#pairwise exclusion constraint
set Exc0 := {<"Figure","Figures">,<"Figures","Ground">};
subto exclusion0: forall <ri,rj> in Exc0 do z0[ri,"-1_-1"] + z0[rj,"-1_-1"] >= 1;
set Exc2 := {<"Area","Source">,<"Area","Result">,<"Agent","Cause">,<"Area","Initial_State">,<"Area","Path">,<"Area","Goal">};
subto exclusion2: forall <ri,rj> in Exc2 do z2[ri,"-1_-1"] + z2[rj,"-1_-1"] >= 1;
set Exc3 := {<"Precept","Subject">,<"Precept","Skill">,<"Skill","Subject">,<"Fact","Precept">,<"Fact","Qualification">};
subto exclusion3: forall <ri,rj> in Exc3 do z3[ri,"-1_-1"] + z3[rj,"-1_-1"] >= 1;
set Exc7 := {<"Final_category","Initial_value">,<"Attribute","Final_category">,<"Agent","Cause">,<"Final_category","Final_value">,<"Initial_category","Initial_value">};
subto exclusion7: forall <ri,rj> in Exc7 do z7[ri,"-1_-1"] + z7[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
set Reqr7 := {<"Attribute","Final_value">,<"Attribute","Initial_value">};
subto require7: forall <ri,rj> in Reqr7 do z7[ri,"-1_-1"] - z7[rj,"-1_-1"] == 0;
