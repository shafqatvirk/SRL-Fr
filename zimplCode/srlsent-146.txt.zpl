# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Process_continue","Willingness","People","People","Supply","Quantity","Weapon","Cognitive_connection","Artifact","Degree","Surpassing","Purpose","Weapon","Artifact","Control","Leadership"};
set Roles[Frames] :=  <"Process_continue"> {"Duration","Place","Manner","Time","Circumstances","Depictive","Event","Concessive"}, <"Willingness"> {"Explanation","Time","Activity","Degree","Frequency","Cognizer"}, <"People"> {"Person","Ethnicity","Persistent_characteristic","Context_of_acquaintance","Descriptor","Age","Origin"}, <"People"> {"Person","Ethnicity","Persistent_characteristic","Context_of_acquaintance","Descriptor","Age","Origin"}, <"Supply"> {"Recipient","Circumstances","Time","Supplier","Place","Co_theme","Purpose","Period_of_iterations","Means","Source","Theme","Purpose_of_recipient","Manner"}, <"Quantity"> {"Mass","Q_Prop","Degree","Quantity","Individuals"}, <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Cognitive_connection"> {"Point_of_view","Circumstances","Specification","Concept_2","Concept_1","Degree","Concepts"}, <"Artifact"> {"Creator","Type","Use","Material","Time_of_creation","Name","Artifact"}, <"Degree"> {"Gradable_attribute"}, <"Surpassing"> {"Attribute","Standard_item","Iteration","Profiled_attribute","Profiled_item","Time","Circumstances","Extent","Standard_attribute"}, <"Purpose"> {"Attribute","Agent","Goal","Time","Restrictor","Value","Domain","Means"}, <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Artifact"> {"Creator","Type","Use","Material","Time_of_creation","Name","Artifact"}, <"Control"> {"Manner","Time","Controlling_entity","Dependent_situation","Dependent_entity"}, <"Leadership"> {"Domain","Leader","Type","Depictive","Descriptor","Degree","Means","Role","Activity","Duration","Governed","Manner","Time"};
set Spans := {"-1_-1","0_0","0_13","0_2","0_53","10_10","11_11","11_12","11_13","12_12","12_13","13_13","14_14","15_15","15_17","15_18","15_20","16_16","17_17","18_18","18_20","19_19","19_20","1_1","20_20","21_21","21_22","21_23","22_22","22_23","23_23","24_24","25_25","26_26","26_30","27_27","28_28","29_29","2_2","30_30","31_31","32_32","33_33","34_34","35_35","36_36","36_52","37_37","37_41","37_52","38_38","38_40","39_39","3_13","3_3","40_40","41_41","42_42","42_43","42_52","43_43","44_44","44_52","45_45","45_49","45_52","46_46","47_47","48_48","49_49","4_13","4_4","4_7","50_50","50_51","50_52","51_51","51_52","52_52","53_53","5_5","6_6","7_7","8_13","8_8","9_10","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Process_continue"]] binary;
var z1[Assignment["Willingness"]] binary;
var z2[Assignment["People"]] binary;
var z3[Assignment["People"]] binary;
var z4[Assignment["Supply"]] binary;
var z5[Assignment["Quantity"]] binary;
var z6[Assignment["Weapon"]] binary;
var z7[Assignment["Cognitive_connection"]] binary;
var z8[Assignment["Artifact"]] binary;
var z9[Assignment["Degree"]] binary;
var z10[Assignment["Surpassing"]] binary;
var z11[Assignment["Purpose"]] binary;
var z12[Assignment["Weapon"]] binary;
var z13[Assignment["Artifact"]] binary;
var z14[Assignment["Control"]] binary;
var z15[Assignment["Leadership"]] binary;
param probabilities0[Assignment["Process_continue"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Willingness"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["People"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["People"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Supply"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Quantity"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Weapon"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Cognitive_connection"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Artifact"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Degree"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Surpassing"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;
param probabilities11[Assignment["Purpose"]] := read "../frameData/frame11.txt" as "<1s,2s> 3n" skip 2;
param probabilities12[Assignment["Weapon"]] := read "../frameData/frame12.txt" as "<1s,2s> 3n" skip 2;
param probabilities13[Assignment["Artifact"]] := read "../frameData/frame13.txt" as "<1s,2s> 3n" skip 2;
param probabilities14[Assignment["Control"]] := read "../frameData/frame14.txt" as "<1s,2s> 3n" skip 2;
param probabilities15[Assignment["Leadership"]] := read "../frameData/frame15.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Process_continue"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Willingness"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["People"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["People"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Supply"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Quantity"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Weapon"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Cognitive_connection"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Artifact"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Degree"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Surpassing"] : probabilities10[r,s] * z10[r,s])+(sum <r,s> in Assignment["Purpose"] : probabilities11[r,s] * z11[r,s])+(sum <r,s> in Assignment["Weapon"] : probabilities12[r,s] * z12[r,s])+(sum <r,s> in Assignment["Artifact"] : probabilities13[r,s] * z13[r,s])+(sum <r,s> in Assignment["Control"] : probabilities14[r,s] * z14[r,s])+(sum <r,s> in Assignment["Leadership"] : probabilities15[r,s] * z15[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 53};
set G[I] := <0> {"0_0","0_13","0_2","0_53"}, <1> {"0_13","0_2","0_53","1_1"}, <2> {"0_13","0_2","0_53","2_2"}, <3> {"0_13","0_53","3_13","3_3"}, <4> {"0_13","0_53","3_13","4_13","4_4","4_7"}, <5> {"0_13","0_53","3_13","4_13","4_7","5_5"}, <6> {"0_13","0_53","3_13","4_13","4_7","6_6"}, <7> {"0_13","0_53","3_13","4_13","4_7","7_7"}, <8> {"0_13","0_53","3_13","4_13","8_13","8_8"}, <9> {"0_13","0_53","3_13","4_13","8_13","9_10","9_9"}, <10> {"0_13","0_53","10_10","3_13","4_13","8_13","9_10"}, <11> {"0_13","0_53","11_11","11_12","11_13","3_13","4_13","8_13"}, <12> {"0_13","0_53","11_12","11_13","12_12","12_13","3_13","4_13","8_13"}, <13> {"0_13","0_53","11_13","12_13","13_13","3_13","4_13","8_13"}, <14> {"0_53","14_14"}, <15> {"0_53","15_15","15_17","15_18","15_20"}, <16> {"0_53","15_17","15_18","15_20","16_16"}, <17> {"0_53","15_17","15_18","15_20","17_17"}, <18> {"0_53","15_18","15_20","18_18","18_20"}, <19> {"0_53","15_20","18_20","19_19","19_20"}, <20> {"0_53","15_20","18_20","19_20","20_20"}, <21> {"0_53","21_21","21_22","21_23"}, <22> {"0_53","21_22","21_23","22_22","22_23"}, <23> {"0_53","21_23","22_23","23_23"}, <24> {"0_53","24_24"}, <25> {"0_53","25_25"}, <26> {"0_53","26_26","26_30"}, <27> {"0_53","26_30","27_27"}, <28> {"0_53","26_30","28_28"}, <29> {"0_53","26_30","29_29"}, <30> {"0_53","26_30","30_30"}, <31> {"0_53","31_31"}, <32> {"0_53","32_32"}, <33> {"0_53","33_33"}, <34> {"0_53","34_34"}, <35> {"0_53","35_35"}, <36> {"0_53","36_36","36_52"}, <37> {"0_53","36_52","37_37","37_41","37_52"}, <38> {"0_53","36_52","37_41","37_52","38_38","38_40"}, <39> {"0_53","36_52","37_41","37_52","38_40","39_39"}, <40> {"0_53","36_52","37_41","37_52","38_40","40_40"}, <41> {"0_53","36_52","37_41","37_52","41_41"}, <42> {"0_53","36_52","37_52","42_42","42_43","42_52"}, <43> {"0_53","36_52","37_52","42_43","42_52","43_43"}, <44> {"0_53","36_52","37_52","42_52","44_44","44_52"}, <45> {"0_53","36_52","37_52","42_52","44_52","45_45","45_49","45_52"}, <46> {"0_53","36_52","37_52","42_52","44_52","45_49","45_52","46_46"}, <47> {"0_53","36_52","37_52","42_52","44_52","45_49","45_52","47_47"}, <48> {"0_53","36_52","37_52","42_52","44_52","45_49","45_52","48_48"}, <49> {"0_53","36_52","37_52","42_52","44_52","45_49","45_52","49_49"}, <50> {"0_53","36_52","37_52","42_52","44_52","45_52","50_50","50_51","50_52"}, <51> {"0_53","36_52","37_52","42_52","44_52","45_52","50_51","50_52","51_51","51_52"}, <52> {"0_53","36_52","37_52","42_52","44_52","45_52","50_52","51_52","52_52"}, <53> {"0_53","53_53"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Process_continue"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Willingness"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["People"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["People"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Supply"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Quantity"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Cognitive_connection"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Artifact"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Degree"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Surpassing"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
subto overlap11: forall <i> in I do 
 sum <r> in Roles["Purpose"] do 
 sum <s> in G[i] do z11[r,s] <= 1;
subto overlap12: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z12[r,s] <= 1;
subto overlap13: forall <i> in I do 
 sum <r> in Roles["Artifact"] do 
 sum <s> in G[i] do z13[r,s] <= 1;
subto overlap14: forall <i> in I do 
 sum <r> in Roles["Control"] do 
 sum <s> in G[i] do z14[r,s] <= 1;
subto overlap15: forall <i> in I do 
 sum <r> in Roles["Leadership"] do 
 sum <s> in G[i] do z15[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Process_continue"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Willingness"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["People"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["People"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Supply"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Quantity"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Weapon"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Cognitive_connection"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Artifact"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Degree"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Surpassing"] do sum <s> in Spans : z10[r,s] == 1;
subto unique11: forall <r> in Roles["Purpose"] do sum <s> in Spans : z11[r,s] == 1;
subto unique12: forall <r> in Roles["Weapon"] do sum <s> in Spans : z12[r,s] == 1;
subto unique13: forall <r> in Roles["Artifact"] do sum <s> in Spans : z13[r,s] == 1;
subto unique14: forall <r> in Roles["Control"] do sum <s> in Spans : z14[r,s] == 1;
subto unique15: forall <r> in Roles["Leadership"] do sum <s> in Spans : z15[r,s] == 1;
#pairwise exclusion constraint
set Exc5 := {<"Individuals","Mass">};
subto exclusion5: forall <ri,rj> in Exc5 do z5[ri,"-1_-1"] + z5[rj,"-1_-1"] >= 1;
set Exc7 := {<"Concept_2","Concepts">,<"Concept_1","Concepts">};
subto exclusion7: forall <ri,rj> in Exc7 do z7[ri,"-1_-1"] + z7[rj,"-1_-1"] >= 1;
set Exc10 := {<"Attribute","Profiled_attribute">,<"Attribute","Standard_attribute">};
subto exclusion10: forall <ri,rj> in Exc10 do z10[ri,"-1_-1"] + z10[rj,"-1_-1"] >= 1;
set Exc11 := {<"Attribute","Goal">,<"Goal","Value">};
subto exclusion11: forall <ri,rj> in Exc11 do z11[ri,"-1_-1"] + z11[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
set Reqr11 := {<"Attribute","Value">};
subto require11: forall <ri,rj> in Reqr11 do z11[ri,"-1_-1"] - z11[rj,"-1_-1"] == 0;
