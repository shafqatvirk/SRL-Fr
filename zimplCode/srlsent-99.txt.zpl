# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Existence","Quantity","Cotheme","Vehicle","Travel","Touring","Political_locales","Relational_quantity","Having_or_lacking_access","Political_locales","Vehicle"};
set Roles[Frames] :=  <"Existence"> {"Place","Duration","Inherent_purpose","Entity","Point_of_view","Time","Circumstances","State","Cause"}, <"Quantity"> {"Mass","Q_Prop","Degree","Quantity","Individuals"}, <"Cotheme"> {"Direction","Duration","Area","Theme","Cotheme","Means","Depictive","Mode_of_transportation","Manner","Result","Distance","Road","Time","Source","Place","Goal","Purpose","Speed","Handle","Path","Following_distance","Event"}, <"Vehicle"> {"Itinerary","Possessor","Descriptor","Vehicle","Use"}, <"Travel"> {"Mode_of_transportation","Area","Time","Path","Reason","Depictive","Traveler","Means","Frequency","Place","Manner","Co_participant","Source","Distance","Descriptor","Speed","Purpose","Travel_means","Duration","Goal","Baggage","Period_of_Iterations","Direction","Iterations"}, <"Touring"> {"Particular_iteration","Place","Attraction","Manner","Co_participant","Tourist","Time","Means","Purpose"}, <"Political_locales"> {"Relative_location","Constituent_parts","Container_possessor","Descriptor","Name","Population","Locale"}, <"Relational_quantity"> {"Mass","Denoted_quantity","Reference_quantity","Individuals"}, <"Having_or_lacking_access"> {"Useful_location","Circumstances","Theme","Degree"}, <"Political_locales"> {"Relative_location","Constituent_parts","Container_possessor","Descriptor","Name","Population","Locale"}, <"Vehicle"> {"Itinerary","Possessor","Descriptor","Vehicle","Use"};
set Spans := {"-1_-1","0_0","0_10","0_19","10_10","11_11","12_12","13_13","14_14","15_15","15_18","16_16","16_18","17_17","17_18","18_18","19_19","1_1","1_10","2_2","2_5","2_7","3_3","4_4","5_5","6_6","6_7","7_7","8_10","8_8","9_10","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Existence"]] binary;
var z1[Assignment["Quantity"]] binary;
var z2[Assignment["Cotheme"]] binary;
var z3[Assignment["Vehicle"]] binary;
var z4[Assignment["Travel"]] binary;
var z5[Assignment["Touring"]] binary;
var z6[Assignment["Political_locales"]] binary;
var z7[Assignment["Relational_quantity"]] binary;
var z8[Assignment["Having_or_lacking_access"]] binary;
var z9[Assignment["Political_locales"]] binary;
var z10[Assignment["Vehicle"]] binary;
param probabilities0[Assignment["Existence"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Quantity"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Cotheme"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Vehicle"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Travel"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Touring"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Political_locales"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Relational_quantity"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Having_or_lacking_access"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Political_locales"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Vehicle"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Existence"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Quantity"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Cotheme"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Vehicle"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Travel"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Touring"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Political_locales"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Relational_quantity"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Having_or_lacking_access"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Political_locales"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Vehicle"] : probabilities10[r,s] * z10[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 19};
set G[I] := <0> {"0_0","0_10","0_19"}, <1> {"0_10","0_19","1_1","1_10"}, <2> {"0_10","0_19","1_10","2_2","2_5","2_7"}, <3> {"0_10","0_19","1_10","2_5","2_7","3_3"}, <4> {"0_10","0_19","1_10","2_5","2_7","4_4"}, <5> {"0_10","0_19","1_10","2_5","2_7","5_5"}, <6> {"0_10","0_19","1_10","2_7","6_6","6_7"}, <7> {"0_10","0_19","1_10","2_7","6_7","7_7"}, <8> {"0_10","0_19","1_10","8_10","8_8"}, <9> {"0_10","0_19","1_10","8_10","9_10","9_9"}, <10> {"0_10","0_19","10_10","1_10","8_10","9_10"}, <11> {"0_19","11_11"}, <12> {"0_19","12_12"}, <13> {"0_19","13_13"}, <14> {"0_19","14_14"}, <15> {"0_19","15_15","15_18"}, <16> {"0_19","15_18","16_16","16_18"}, <17> {"0_19","15_18","16_18","17_17","17_18"}, <18> {"0_19","15_18","16_18","17_18","18_18"}, <19> {"0_19","19_19"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Existence"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Quantity"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Cotheme"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Vehicle"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Travel"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Touring"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Political_locales"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Relational_quantity"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Having_or_lacking_access"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Political_locales"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Vehicle"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Existence"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Quantity"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Cotheme"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Vehicle"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Travel"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Touring"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Political_locales"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Relational_quantity"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Having_or_lacking_access"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Political_locales"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Vehicle"] do sum <s> in Spans : z10[r,s] == 1;
#pairwise exclusion constraint
set Exc1 := {<"Individuals","Mass">};
subto exclusion1: forall <ri,rj> in Exc1 do z1[ri,"-1_-1"] + z1[rj,"-1_-1"] >= 1;
set Exc2 := {<"Area","Direction">,<"Cotheme","Road">,<"Area","Goal">,<"Area","Path">,<"Area","Source">};
subto exclusion2: forall <ri,rj> in Exc2 do z2[ri,"-1_-1"] + z2[rj,"-1_-1"] >= 1;
set Exc4 := {<"Area","Direction">,<"Area","Goal">,<"Area","Path">,<"Area","Source">};
subto exclusion4: forall <ri,rj> in Exc4 do z4[ri,"-1_-1"] + z4[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
