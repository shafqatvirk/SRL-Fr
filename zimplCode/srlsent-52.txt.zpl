# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Quantity","Natural_features","Being_located","Locale","Time_vector","Becoming","Locale_by_use","Temporal_collocation","Political_locales"};
set Roles[Frames] :=  <"Quantity"> {"Mass","Q_Prop","Degree","Quantity","Individuals"}, <"Natural_features"> {"Type","Locale","Relative_location","Name","Formational_cause","Container_possessor","Constituent_parts","Descriptor"}, <"Being_located"> {"Cotheme","Location","Theme","Time","Place"}, <"Locale"> {"Formational_cause","Locale","Relative_location","Name","Container_possessor","Related_event","Constituent_parts","Descriptor"}, <"Time_vector"> {"Distance","Event","Landmark_event","Direction"}, <"Becoming"> {"Initial_category","Initial_state","Circumstances","Time","Final_state","Place","Duration_of_final_state","Cause","Group","Final_category","Entity","Transitional_period","Reason","Manner","Explanation"}, <"Locale_by_use"> {"Formational_cause","Use","Locale","Relative_location","Name","Container_possessor","Constituent_parts","Descriptor"}, <"Temporal_collocation"> {"Event_description","Landmark_period","Trajector_entity","Landmark_entity","Landmark_event","Trajector_period","Trajector_event"}, <"Political_locales"> {"Relative_location","Constituent_parts","Container_possessor","Descriptor","Name","Population","Locale"};
set Spans := {"-1_-1","0_0","0_1","0_17","10_10","11_11","11_16","12_12","12_16","13_13","14_14","15_15","16_16","17_17","1_1","2_17","2_2","3_16","3_3","4_16","4_4","5_16","5_5","6_16","6_6","7_7","8_16","8_8","9_10","9_16","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Quantity"]] binary;
var z1[Assignment["Natural_features"]] binary;
var z2[Assignment["Being_located"]] binary;
var z3[Assignment["Locale"]] binary;
var z4[Assignment["Time_vector"]] binary;
var z5[Assignment["Becoming"]] binary;
var z6[Assignment["Locale_by_use"]] binary;
var z7[Assignment["Temporal_collocation"]] binary;
var z8[Assignment["Political_locales"]] binary;
param probabilities0[Assignment["Quantity"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Natural_features"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Being_located"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Locale"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Time_vector"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Becoming"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Locale_by_use"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Temporal_collocation"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Political_locales"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Quantity"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Natural_features"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Being_located"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Locale"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Time_vector"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Becoming"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Locale_by_use"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Temporal_collocation"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Political_locales"] : probabilities8[r,s] * z8[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 17};
set G[I] := <0> {"0_0","0_1","0_17"}, <1> {"0_1","0_17","1_1"}, <2> {"0_17","2_17","2_2"}, <3> {"0_17","2_17","3_16","3_3"}, <4> {"0_17","2_17","3_16","4_16","4_4"}, <5> {"0_17","2_17","3_16","4_16","5_16","5_5"}, <6> {"0_17","2_17","3_16","4_16","5_16","6_16","6_6"}, <7> {"0_17","2_17","3_16","4_16","5_16","6_16","7_7"}, <8> {"0_17","2_17","3_16","4_16","5_16","6_16","8_16","8_8"}, <9> {"0_17","2_17","3_16","4_16","5_16","6_16","8_16","9_10","9_16","9_9"}, <10> {"0_17","10_10","2_17","3_16","4_16","5_16","6_16","8_16","9_10","9_16"}, <11> {"0_17","11_11","11_16","2_17","3_16","4_16","5_16","6_16","8_16","9_16"}, <12> {"0_17","11_16","12_12","12_16","2_17","3_16","4_16","5_16","6_16","8_16","9_16"}, <13> {"0_17","11_16","12_16","13_13","2_17","3_16","4_16","5_16","6_16","8_16","9_16"}, <14> {"0_17","11_16","12_16","14_14","2_17","3_16","4_16","5_16","6_16","8_16","9_16"}, <15> {"0_17","11_16","12_16","15_15","2_17","3_16","4_16","5_16","6_16","8_16","9_16"}, <16> {"0_17","11_16","12_16","16_16","2_17","3_16","4_16","5_16","6_16","8_16","9_16"}, <17> {"0_17","17_17","2_17"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Quantity"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Natural_features"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Being_located"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Locale"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Time_vector"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Becoming"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Locale_by_use"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Temporal_collocation"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Political_locales"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Quantity"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Natural_features"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Being_located"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Locale"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Time_vector"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Becoming"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Locale_by_use"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Temporal_collocation"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Political_locales"] do sum <s> in Spans : z8[r,s] == 1;
#pairwise exclusion constraint
set Exc0 := {<"Individuals","Mass">};
subto exclusion0: forall <ri,rj> in Exc0 do z0[ri,"-1_-1"] + z0[rj,"-1_-1"] >= 1;
set Exc5 := {<"Final_category","Final_state">};
subto exclusion5: forall <ri,rj> in Exc5 do z5[ri,"-1_-1"] + z5[rj,"-1_-1"] >= 1;
set Exc7 := {<"Trajector_event","Trajector_period">,<"Landmark_entity","Landmark_event">,<"Landmark_event","Landmark_period">,<"Trajector_entity","Trajector_event">};
subto exclusion7: forall <ri,rj> in Exc7 do z7[ri,"-1_-1"] + z7[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
