# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Relational_quantity","Measure_duration","Thriving","Inclusion","Quantity","Sign","Temporal_subregion"};
set Roles[Frames] :=  <"Relational_quantity"> {"Mass","Denoted_quantity","Reference_quantity","Individuals"}, <"Measure_duration"> {"Agent","Count","Unit","Process"}, <"Thriving"> {"Duration","Place","Entity","Explanation","Time","Circumstances","Role","Particular_iteration"}, <"Inclusion"> {"Purpose","Total","Contrast_set","Subregion","Frequency","Part"}, <"Quantity"> {"Mass","Q_Prop","Degree","Quantity","Individuals"}, <"Sign"> {"Degree","Indicator","Indicated"}, <"Temporal_subregion"> {"Time_period","Time","Degree","Sub_part"};
set Spans := {"-1_-1","0_0","0_18","0_3","10_10","11_11","11_17","12_12","12_17","13_13","13_14","13_17","14_14","15_15","15_17","16_16","16_17","17_17","18_18","1_1","1_2","1_3","2_2","3_3","4_4","5_5","5_6","6_6","7_7","8_17","8_8","9_10","9_17","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Relational_quantity"]] binary;
var z1[Assignment["Measure_duration"]] binary;
var z2[Assignment["Thriving"]] binary;
var z3[Assignment["Inclusion"]] binary;
var z4[Assignment["Quantity"]] binary;
var z5[Assignment["Sign"]] binary;
var z6[Assignment["Temporal_subregion"]] binary;
param probabilities0[Assignment["Relational_quantity"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Measure_duration"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Thriving"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Inclusion"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Quantity"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Sign"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Temporal_subregion"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Relational_quantity"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Measure_duration"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Thriving"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Inclusion"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Quantity"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Sign"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Temporal_subregion"] : probabilities6[r,s] * z6[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 18};
set G[I] := <0> {"0_0","0_18","0_3"}, <1> {"0_18","0_3","1_1","1_2","1_3"}, <2> {"0_18","0_3","1_2","1_3","2_2"}, <3> {"0_18","0_3","1_3","3_3"}, <4> {"0_18","4_4"}, <5> {"0_18","5_5","5_6"}, <6> {"0_18","5_6","6_6"}, <7> {"0_18","7_7"}, <8> {"0_18","8_17","8_8"}, <9> {"0_18","8_17","9_10","9_17","9_9"}, <10> {"0_18","10_10","8_17","9_10","9_17"}, <11> {"0_18","11_11","11_17","8_17","9_17"}, <12> {"0_18","11_17","12_12","12_17","8_17","9_17"}, <13> {"0_18","11_17","12_17","13_13","13_14","13_17","8_17","9_17"}, <14> {"0_18","11_17","12_17","13_14","13_17","14_14","8_17","9_17"}, <15> {"0_18","11_17","12_17","13_17","15_15","15_17","8_17","9_17"}, <16> {"0_18","11_17","12_17","13_17","15_17","16_16","16_17","8_17","9_17"}, <17> {"0_18","11_17","12_17","13_17","15_17","16_17","17_17","8_17","9_17"}, <18> {"0_18","18_18"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Relational_quantity"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Measure_duration"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Thriving"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Inclusion"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Quantity"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Sign"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Temporal_subregion"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Relational_quantity"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Measure_duration"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Thriving"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Inclusion"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Quantity"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Sign"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Temporal_subregion"] do sum <s> in Spans : z6[r,s] == 1;
#pairwise exclusion constraint
set Exc4 := {<"Individuals","Mass">};
subto exclusion4: forall <ri,rj> in Exc4 do z4[ri,"-1_-1"] + z4[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
