# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Make_agreement_on_action","Commerce_sell","Cardinal_numbers","Purpose","Substance","Using","Manufacturing","Stimulus_focus","Active_substance"};
set Roles[Frames] :=  <"Make_agreement_on_action"> {"Place","Party_2","Party_1","Medium","Topic","Manner","Time","Parties","Obligation","Descriptor"}, <"Commerce_sell"> {"Purpose","Result","Unit","Purpose_of_Goods","Goods","Place","Seller","Rate","Manner","Relay","Buyer","Means","Time","Money"}, <"Cardinal_numbers"> {"Precision","Number","Multiplier","Entity"}, <"Purpose"> {"Attribute","Agent","Goal","Time","Restrictor","Value","Domain","Means"}, <"Substance"> {"Source","Type","Use","Descriptor","Substance","Constituents"}, <"Using"> {"Duration","Depictive","Purpose","Means","Role","Circumstances","Agent","Manner","Explanation","Outcome","Instrument","Time","Period_of_iterations","Containing_event","Degree","Place","Frequency","Group"}, <"Manufacturing"> {"Purpose","Circumstances","Time","Manufacturer","Instrument","Place","Frequency","Resource","Means","Locus","Consumer","Depictive","Factory","Product","Manner"}, <"Stimulus_focus"> {"Stimulus","Parameter","Circumstances","Property","Experiencer","Comparison_set","Degree"}, <"Active_substance"> {"Name","Type","Substance","Descriptor","Effect"};
set Spans := {"-1_-1","0_0","0_27","10_10","11_11","12_12","13_13","14_14","14_26","15_15","15_26","16_16","16_17","16_19","17_17","18_18","18_19","19_19","1_1","20_20","20_26","21_21","22_22","22_26","23_23","23_26","24_24","25_25","26_26","27_27","2_2","3_26","3_3","3_4","4_26","4_4","5_13","5_26","5_5","5_7","6_6","7_7","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Make_agreement_on_action"]] binary;
var z1[Assignment["Commerce_sell"]] binary;
var z2[Assignment["Cardinal_numbers"]] binary;
var z3[Assignment["Purpose"]] binary;
var z4[Assignment["Substance"]] binary;
var z5[Assignment["Using"]] binary;
var z6[Assignment["Manufacturing"]] binary;
var z7[Assignment["Stimulus_focus"]] binary;
var z8[Assignment["Active_substance"]] binary;
param probabilities0[Assignment["Make_agreement_on_action"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Commerce_sell"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Cardinal_numbers"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Purpose"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Substance"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Using"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Manufacturing"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Stimulus_focus"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Active_substance"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Make_agreement_on_action"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Commerce_sell"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Cardinal_numbers"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Purpose"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Substance"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Using"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Manufacturing"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Stimulus_focus"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Active_substance"] : probabilities8[r,s] * z8[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 27};
set G[I] := <0> {"0_0","0_27"}, <1> {"0_27","1_1"}, <2> {"0_27","2_2"}, <3> {"0_27","3_26","3_3","3_4"}, <4> {"0_27","3_26","3_4","4_26","4_4"}, <5> {"0_27","3_26","4_26","5_13","5_26","5_5","5_7"}, <6> {"0_27","3_26","4_26","5_13","5_26","5_7","6_6"}, <7> {"0_27","3_26","4_26","5_13","5_26","5_7","7_7"}, <8> {"0_27","3_26","4_26","5_13","5_26","8_8"}, <9> {"0_27","3_26","4_26","5_13","5_26","9_9"}, <10> {"0_27","10_10","3_26","4_26","5_13","5_26"}, <11> {"0_27","11_11","3_26","4_26","5_13","5_26"}, <12> {"0_27","12_12","3_26","4_26","5_13","5_26"}, <13> {"0_27","13_13","3_26","4_26","5_13","5_26"}, <14> {"0_27","14_14","14_26","3_26","4_26","5_26"}, <15> {"0_27","14_26","15_15","15_26","3_26","4_26","5_26"}, <16> {"0_27","14_26","15_26","16_16","16_17","16_19","3_26","4_26","5_26"}, <17> {"0_27","14_26","15_26","16_17","16_19","17_17","3_26","4_26","5_26"}, <18> {"0_27","14_26","15_26","16_19","18_18","18_19","3_26","4_26","5_26"}, <19> {"0_27","14_26","15_26","16_19","18_19","19_19","3_26","4_26","5_26"}, <20> {"0_27","14_26","15_26","20_20","20_26","3_26","4_26","5_26"}, <21> {"0_27","14_26","15_26","20_26","21_21","3_26","4_26","5_26"}, <22> {"0_27","14_26","15_26","20_26","22_22","22_26","3_26","4_26","5_26"}, <23> {"0_27","14_26","15_26","20_26","22_26","23_23","23_26","3_26","4_26","5_26"}, <24> {"0_27","14_26","15_26","20_26","22_26","23_26","24_24","3_26","4_26","5_26"}, <25> {"0_27","14_26","15_26","20_26","22_26","23_26","25_25","3_26","4_26","5_26"}, <26> {"0_27","14_26","15_26","20_26","22_26","23_26","26_26","3_26","4_26","5_26"}, <27> {"0_27","27_27"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Make_agreement_on_action"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Commerce_sell"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Cardinal_numbers"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Purpose"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Substance"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Using"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Manufacturing"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Stimulus_focus"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Active_substance"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Make_agreement_on_action"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Commerce_sell"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Cardinal_numbers"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Purpose"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Substance"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Using"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Manufacturing"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Stimulus_focus"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Active_substance"] do sum <s> in Spans : z8[r,s] == 1;
#pairwise exclusion constraint
set Exc0 := {<"Parties","Party_2">,<"Parties","Party_1">};
subto exclusion0: forall <ri,rj> in Exc0 do z0[ri,"-1_-1"] + z0[rj,"-1_-1"] >= 1;
set Exc3 := {<"Attribute","Goal">,<"Goal","Value">};
subto exclusion3: forall <ri,rj> in Exc3 do z3[ri,"-1_-1"] + z3[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
set Reqr3 := {<"Attribute","Value">};
subto require3: forall <ri,rj> in Reqr3 do z3[ri,"-1_-1"] - z3[rj,"-1_-1"] == 0;
