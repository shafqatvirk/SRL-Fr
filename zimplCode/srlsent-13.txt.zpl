# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Event","Left_to_do","Perception_experience","Assistance","Offering","Food","Destroying","Moving_in_place","Sign","Cardinal_numbers","Custom","Process_start","Change_position_on_a_scale"};
set Roles[Frames] :=  <"Event"> {"Time","Duration","Place","Manner","Reason","Event","Frequency"}, <"Left_to_do"> {"Remainder","Process"}, <"Perception_experience"> {"Perceiver_passive","Location_of_perceiver","Circumstances","Depictive","Place","Frequency","Degree","Body_part","Direction","State","Means","Phenomenon","Duration","Manner","Concessive","Time"}, <"Assistance"> {"Purpose","Time","Goal","Place","Frequency","Degree","Helper","Means","Benefited_party","Domain","Duration","Focal_entity","Manner","Explanation"}, <"Offering"> {"Potential_recipient","Offerer","Theme"}, <"Food"> {"Type","Descriptor","Food","Constituent_parts"}, <"Destroying"> {"Purpose","Result","Undergoer","Depictive","Containing_event","Instrument","Place","Frequency","Degree","Destroyer","Means","Cause","Reason","Manner","Explanation","Time"}, <"Moving_in_place"> {"Purpose","Result","Fixed_location","Time","Place","Theme","Direction","Periodicity","Cause","Depictive","Path_shape","Manner","Angle"}, <"Sign"> {"Degree","Indicator","Indicated"}, <"Cardinal_numbers"> {"Precision","Number","Multiplier","Entity"}, <"Custom"> {"Protagonist","Place","Descriptor","Behavior","Society","Domain"}, <"Process_start"> {"Place","Initial_subevent","Manner","Time","Reason","Depictive","Frequency","Event"}, <"Change_position_on_a_scale"> {"Speed","Duration","Item","Value_range","Attribute","Correlate","Initial_value","Circumstances","Difference","Manner","Result","Final_state","Time","Period_of_iterations","Degree","Group","Final_correlate","Initial_correlate","Initial_state","Particular_iteration","Path","Final_value","Place"};
set Spans := {"-1_-1","0_0","0_39","0_8","10_10","11_11","12_12","12_13","12_23","13_13","14_14","14_23","15_15","15_16","16_16","17_17","17_18","18_18","19_19","19_23","1_1","1_8","20_20","20_21","20_23","21_21","22_22","23_23","24_24","25_25","25_26","25_38","26_26","27_27","27_38","28_28","28_29","28_34","28_35","28_38","29_29","2_2","30_30","30_34","31_31","31_34","32_32","33_33","34_34","35_35","35_38","36_36","36_38","37_37","37_38","38_38","39_39","3_3","4_4","4_8","5_5","5_8","6_6","6_7","6_8","7_7","7_8","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Event"]] binary;
var z1[Assignment["Left_to_do"]] binary;
var z2[Assignment["Perception_experience"]] binary;
var z3[Assignment["Assistance"]] binary;
var z4[Assignment["Offering"]] binary;
var z5[Assignment["Food"]] binary;
var z6[Assignment["Destroying"]] binary;
var z7[Assignment["Moving_in_place"]] binary;
var z8[Assignment["Sign"]] binary;
var z9[Assignment["Cardinal_numbers"]] binary;
var z10[Assignment["Custom"]] binary;
var z11[Assignment["Process_start"]] binary;
var z12[Assignment["Change_position_on_a_scale"]] binary;
param probabilities0[Assignment["Event"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Left_to_do"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Perception_experience"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Assistance"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Offering"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Food"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Destroying"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Moving_in_place"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Sign"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Cardinal_numbers"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Custom"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;
param probabilities11[Assignment["Process_start"]] := read "../frameData/frame11.txt" as "<1s,2s> 3n" skip 2;
param probabilities12[Assignment["Change_position_on_a_scale"]] := read "../frameData/frame12.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Event"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Left_to_do"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Perception_experience"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Assistance"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Offering"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Food"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Destroying"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Moving_in_place"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Sign"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Cardinal_numbers"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Custom"] : probabilities10[r,s] * z10[r,s])+(sum <r,s> in Assignment["Process_start"] : probabilities11[r,s] * z11[r,s])+(sum <r,s> in Assignment["Change_position_on_a_scale"] : probabilities12[r,s] * z12[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 39};
set G[I] := <0> {"0_0","0_39","0_8"}, <1> {"0_39","0_8","1_1","1_8"}, <2> {"0_39","0_8","1_8","2_2"}, <3> {"0_39","0_8","1_8","3_3"}, <4> {"0_39","0_8","1_8","4_4","4_8"}, <5> {"0_39","0_8","1_8","4_8","5_5","5_8"}, <6> {"0_39","0_8","1_8","4_8","5_8","6_6","6_7","6_8"}, <7> {"0_39","0_8","1_8","4_8","5_8","6_7","6_8","7_7","7_8"}, <8> {"0_39","0_8","1_8","4_8","5_8","6_8","7_8","8_8"}, <9> {"0_39","9_9"}, <10> {"0_39","10_10"}, <11> {"0_39","11_11"}, <12> {"0_39","12_12","12_13","12_23"}, <13> {"0_39","12_13","12_23","13_13"}, <14> {"0_39","12_23","14_14","14_23"}, <15> {"0_39","12_23","14_23","15_15","15_16"}, <16> {"0_39","12_23","14_23","15_16","16_16"}, <17> {"0_39","12_23","14_23","17_17","17_18"}, <18> {"0_39","12_23","14_23","17_18","18_18"}, <19> {"0_39","12_23","14_23","19_19","19_23"}, <20> {"0_39","12_23","14_23","19_23","20_20","20_21","20_23"}, <21> {"0_39","12_23","14_23","19_23","20_21","20_23","21_21"}, <22> {"0_39","12_23","14_23","19_23","20_23","22_22"}, <23> {"0_39","12_23","14_23","19_23","20_23","23_23"}, <24> {"0_39","24_24"}, <25> {"0_39","25_25","25_26","25_38"}, <26> {"0_39","25_26","25_38","26_26"}, <27> {"0_39","25_38","27_27","27_38"}, <28> {"0_39","25_38","27_38","28_28","28_29","28_34","28_35","28_38"}, <29> {"0_39","25_38","27_38","28_29","28_34","28_35","28_38","29_29"}, <30> {"0_39","25_38","27_38","28_34","28_35","28_38","30_30","30_34"}, <31> {"0_39","25_38","27_38","28_34","28_35","28_38","30_34","31_31","31_34"}, <32> {"0_39","25_38","27_38","28_34","28_35","28_38","30_34","31_34","32_32"}, <33> {"0_39","25_38","27_38","28_34","28_35","28_38","30_34","31_34","33_33"}, <34> {"0_39","25_38","27_38","28_34","28_35","28_38","30_34","31_34","34_34"}, <35> {"0_39","25_38","27_38","28_35","28_38","35_35","35_38"}, <36> {"0_39","25_38","27_38","28_38","35_38","36_36","36_38"}, <37> {"0_39","25_38","27_38","28_38","35_38","36_38","37_37","37_38"}, <38> {"0_39","25_38","27_38","28_38","35_38","36_38","37_38","38_38"}, <39> {"0_39","39_39"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Event"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Left_to_do"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Perception_experience"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Assistance"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Offering"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Food"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Destroying"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Moving_in_place"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Sign"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Cardinal_numbers"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Custom"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
subto overlap11: forall <i> in I do 
 sum <r> in Roles["Process_start"] do 
 sum <s> in G[i] do z11[r,s] <= 1;
subto overlap12: forall <i> in I do 
 sum <r> in Roles["Change_position_on_a_scale"] do 
 sum <s> in G[i] do z12[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Event"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Left_to_do"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Perception_experience"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Assistance"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Offering"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Food"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Destroying"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Moving_in_place"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Sign"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Cardinal_numbers"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Custom"] do sum <s> in Spans : z10[r,s] == 1;
subto unique11: forall <r> in Roles["Process_start"] do sum <s> in Spans : z11[r,s] == 1;
subto unique12: forall <r> in Roles["Change_position_on_a_scale"] do sum <s> in Spans : z12[r,s] == 1;
#pairwise exclusion constraint
set Exc6 := {<"Cause","Destroyer">,<"Cause","Means">};
subto exclusion6: forall <ri,rj> in Exc6 do z6[ri,"-1_-1"] + z6[rj,"-1_-1"] >= 1;
set Exc10 := {<"Protagonist","Society">};
subto exclusion10: forall <ri,rj> in Exc10 do z10[ri,"-1_-1"] + z10[rj,"-1_-1"] >= 1;
set Exc12 := {<"Initial_state","Value_range">,<"Final_value","Value_range">,<"Initial_value","Value_range">,<"Final_state","Value_range">};
subto exclusion12: forall <ri,rj> in Exc12 do z12[ri,"-1_-1"] + z12[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
