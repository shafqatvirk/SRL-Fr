# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Giving","Exertive_force","Artifact","Infrastructure","Difficulty","Cause_to_make_progress","Secrecy_status","Hostile_encounter","Project"};
set Roles[Frames] :=  <"Giving"> {"Recipient","Donor","Circumstances","Time","Place","Theme","Purpose","Means","Period_of_iterations","Reason","Depictive","Purpose_of_theme","Manner"}, <"Exertive_force"> {"Magnitude","Force","Action","Degree","Entity"}, <"Artifact"> {"Creator","Type","Use","Material","Time_of_creation","Name","Artifact"}, <"Infrastructure"> {"Possessor","User","Descriptor","Place","Resource","Infrastructure","Activity"}, <"Difficulty"> {"Time","Standard","Parameter","Circumstances","Experiencer","Degree","Activity"}, <"Cause_to_make_progress"> {"Purpose","Time","Place","Degree","Rate","Means","Domain","Duration","Particular_iteration","Project","Post_state","Manner","Explanation","Agent","Prior_state"}, <"Secrecy_status"> {"Time","Phenomenon","Degree","Epistemic_stance","Cognizer"}, <"Hostile_encounter"> {"Purpose","Result","Depictive","Instrument","Place","Degree","Means","Internal_cause","Reason","Particular_iteration","Duration","Sides","Issue","Side_2","Side_1","Manner","Time"}, <"Project"> {"Salient_entity","Duration","Agent","Goal","Manner","Name","Project","Field","Descriptor","Activity"};
set Spans := {"-1_-1","0_0","0_22","0_7","10_10","11_11","12_12","13_13","13_14","13_21","14_14","14_21","15_15","15_16","15_21","16_16","17_17","17_21","18_18","18_21","19_19","1_1","1_2","1_7","20_20","21_21","22_22","2_2","3_3","3_4","4_4","5_5","6_6","7_7","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Giving"]] binary;
var z1[Assignment["Exertive_force"]] binary;
var z2[Assignment["Artifact"]] binary;
var z3[Assignment["Infrastructure"]] binary;
var z4[Assignment["Difficulty"]] binary;
var z5[Assignment["Cause_to_make_progress"]] binary;
var z6[Assignment["Secrecy_status"]] binary;
var z7[Assignment["Hostile_encounter"]] binary;
var z8[Assignment["Project"]] binary;
param probabilities0[Assignment["Giving"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Exertive_force"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Artifact"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Infrastructure"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Difficulty"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Cause_to_make_progress"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Secrecy_status"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Hostile_encounter"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Project"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Giving"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Exertive_force"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Artifact"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Infrastructure"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Difficulty"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Cause_to_make_progress"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Secrecy_status"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Hostile_encounter"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Project"] : probabilities8[r,s] * z8[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 22};
set G[I] := <0> {"0_0","0_22","0_7"}, <1> {"0_22","0_7","1_1","1_2","1_7"}, <2> {"0_22","0_7","1_2","1_7","2_2"}, <3> {"0_22","0_7","1_7","3_3","3_4"}, <4> {"0_22","0_7","1_7","3_4","4_4"}, <5> {"0_22","0_7","1_7","5_5"}, <6> {"0_22","0_7","1_7","6_6"}, <7> {"0_22","0_7","1_7","7_7"}, <8> {"0_22","8_8"}, <9> {"0_22","9_9"}, <10> {"0_22","10_10"}, <11> {"0_22","11_11"}, <12> {"0_22","12_12"}, <13> {"0_22","13_13","13_14","13_21"}, <14> {"0_22","13_14","13_21","14_14","14_21"}, <15> {"0_22","13_21","14_21","15_15","15_16","15_21"}, <16> {"0_22","13_21","14_21","15_16","15_21","16_16"}, <17> {"0_22","13_21","14_21","15_21","17_17","17_21"}, <18> {"0_22","13_21","14_21","15_21","17_21","18_18","18_21"}, <19> {"0_22","13_21","14_21","15_21","17_21","18_21","19_19"}, <20> {"0_22","13_21","14_21","15_21","17_21","18_21","20_20"}, <21> {"0_22","13_21","14_21","15_21","17_21","18_21","21_21"}, <22> {"0_22","22_22"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Giving"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Exertive_force"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Artifact"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Infrastructure"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Difficulty"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Cause_to_make_progress"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Secrecy_status"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Hostile_encounter"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Project"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Giving"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Exertive_force"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Artifact"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Infrastructure"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Difficulty"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Cause_to_make_progress"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Secrecy_status"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Hostile_encounter"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Project"] do sum <s> in Spans : z8[r,s] == 1;
#pairwise exclusion constraint
set Exc7 := {<"Side_1","Sides">,<"Side_2","Sides">};
subto exclusion7: forall <ri,rj> in Exc7 do z7[ri,"-1_-1"] + z7[rj,"-1_-1"] >= 1;
set Exc8 := {<"Activity","Salient_entity">};
subto exclusion8: forall <ri,rj> in Exc8 do z8[ri,"-1_-1"] + z8[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
set Reqr7 := {<"Side_1","Side_2">};
subto require7: forall <ri,rj> in Reqr7 do z7[ri,"-1_-1"] - z7[rj,"-1_-1"] == 0;
