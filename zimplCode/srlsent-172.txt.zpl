# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Quantity","Intentionally_act","Means","Adopt_selection","Hostile_encounter","Risky_situation","Part_inner_outer"};
set Roles[Frames] :=  <"Quantity"> {"Mass","Q_Prop","Degree","Quantity","Individuals"}, <"Intentionally_act"> {"Purpose","Result","Time","Place","Frequency","Means","Event_dscription","Period_of_iterations","Domain","Act","Particular_iteration","Manner","Explanation","Agent"}, <"Means"> {"Agent","Purpose","Descriptor","Time","Means"}, <"Adopt_selection"> {"Duration","Place","Depictive","Purpose","Attribute","Means","Role","Circumstances","Agent","Manner","Epistemic_stance","Explanation","Instrument","Time","Containing_event","Event_description","Frequency","Particular_iteration","Value"}, <"Hostile_encounter"> {"Purpose","Result","Depictive","Instrument","Place","Degree","Means","Internal_cause","Reason","Particular_iteration","Duration","Sides","Issue","Side_2","Side_1","Manner","Time"}, <"Risky_situation"> {"Dangerous_entity","Asset","Degree","Domain","Situation","Time","Circumstances","Frequency"}, <"Part_inner_outer"> {"Part_Prop","Part","Whole"};
set Spans := {"-1_-1","0_0","0_12","0_5","10_10","10_11","11_11","12_12","1_1","2_2","3_3","4_4","5_5","6_12","6_6","7_11","7_7","7_8","8_11","8_8","9_11","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Quantity"]] binary;
var z1[Assignment["Intentionally_act"]] binary;
var z2[Assignment["Means"]] binary;
var z3[Assignment["Adopt_selection"]] binary;
var z4[Assignment["Hostile_encounter"]] binary;
var z5[Assignment["Risky_situation"]] binary;
var z6[Assignment["Part_inner_outer"]] binary;
param probabilities0[Assignment["Quantity"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Intentionally_act"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Means"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Adopt_selection"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Hostile_encounter"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Risky_situation"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Part_inner_outer"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Quantity"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Intentionally_act"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Means"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Adopt_selection"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Hostile_encounter"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Risky_situation"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Part_inner_outer"] : probabilities6[r,s] * z6[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 12};
set G[I] := <0> {"0_0","0_12","0_5"}, <1> {"0_12","0_5","1_1"}, <2> {"0_12","0_5","2_2"}, <3> {"0_12","0_5","3_3"}, <4> {"0_12","0_5","4_4"}, <5> {"0_12","0_5","5_5"}, <6> {"0_12","6_12","6_6"}, <7> {"0_12","6_12","7_11","7_7","7_8"}, <8> {"0_12","6_12","7_11","7_8","8_11","8_8"}, <9> {"0_12","6_12","7_11","8_11","9_11","9_9"}, <10> {"0_12","10_10","10_11","6_12","7_11","8_11","9_11"}, <11> {"0_12","10_11","11_11","6_12","7_11","8_11","9_11"}, <12> {"0_12","12_12","6_12"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Quantity"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Intentionally_act"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Means"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Adopt_selection"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Hostile_encounter"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Risky_situation"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Part_inner_outer"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Quantity"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Intentionally_act"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Means"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Adopt_selection"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Hostile_encounter"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Risky_situation"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Part_inner_outer"] do sum <s> in Spans : z6[r,s] == 1;
#pairwise exclusion constraint
set Exc0 := {<"Individuals","Mass">};
subto exclusion0: forall <ri,rj> in Exc0 do z0[ri,"-1_-1"] + z0[rj,"-1_-1"] >= 1;
set Exc4 := {<"Side_1","Sides">,<"Side_2","Sides">};
subto exclusion4: forall <ri,rj> in Exc4 do z4[ri,"-1_-1"] + z4[rj,"-1_-1"] >= 1;
set Exc5 := {<"Dangerous_entity","Situation">};
subto exclusion5: forall <ri,rj> in Exc5 do z5[ri,"-1_-1"] + z5[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
set Reqr4 := {<"Side_1","Side_2">};
subto require4: forall <ri,rj> in Reqr4 do z4[ri,"-1_-1"] - z4[rj,"-1_-1"] == 0;
