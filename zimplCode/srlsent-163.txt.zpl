# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Intentionally_act","Perception_active","Hostile_encounter","Attack","Businesses","Perception_active","Active_substance","Body_mark"};
set Roles[Frames] :=  <"Intentionally_act"> {"Purpose","Result","Time","Place","Frequency","Means","Event_dscription","Period_of_iterations","Domain","Act","Particular_iteration","Manner","Explanation","Agent"}, <"Perception_active"> {"Purpose","Depictive","Place","Location_of_perceiver","Expected_entity","Body_part","Direction","State","Means","Phenomenon","Duration","Manner","Perceiver_agentive","Time"}, <"Hostile_encounter"> {"Purpose","Result","Depictive","Instrument","Place","Degree","Means","Internal_cause","Reason","Particular_iteration","Duration","Sides","Issue","Side_2","Side_1","Manner","Time"}, <"Attack"> {"Particular_iteration","Iteration","Event_description","Means","Depictive","Circumstances","Manner","Result","Explanation","Time","Source","Containing_event","Place","Re_encoding","Weapon","Purpose","Victim","Path","Assailant"}, <"Businesses"> {"Descriptor","Business_Name","Service_provider","Business","Place","Product","Proprietor"}, <"Perception_active"> {"Purpose","Depictive","Place","Location_of_perceiver","Expected_entity","Body_part","Direction","State","Means","Phenomenon","Duration","Manner","Perceiver_agentive","Time"}, <"Active_substance"> {"Name","Type","Substance","Descriptor","Effect"}, <"Body_mark"> {"Possessor","Cause","Descriptor","Attachment","Body_mark"};
set Spans := {"-1_-1","0_0","0_1","0_12","0_4","10_10","11_11","12_12","1_1","2_2","3_3","4_4","5_12","5_5","6_6","7_11","7_7","8_11","8_8","9_11","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Intentionally_act"]] binary;
var z1[Assignment["Perception_active"]] binary;
var z2[Assignment["Hostile_encounter"]] binary;
var z3[Assignment["Attack"]] binary;
var z4[Assignment["Businesses"]] binary;
var z5[Assignment["Perception_active"]] binary;
var z6[Assignment["Active_substance"]] binary;
var z7[Assignment["Body_mark"]] binary;
param probabilities0[Assignment["Intentionally_act"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Perception_active"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Hostile_encounter"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Attack"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Businesses"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Perception_active"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Active_substance"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Body_mark"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Intentionally_act"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Perception_active"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Hostile_encounter"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Attack"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Businesses"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Perception_active"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Active_substance"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Body_mark"] : probabilities7[r,s] * z7[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 12};
set G[I] := <0> {"0_0","0_1","0_12","0_4"}, <1> {"0_1","0_12","0_4","1_1"}, <2> {"0_12","0_4","2_2"}, <3> {"0_12","0_4","3_3"}, <4> {"0_12","0_4","4_4"}, <5> {"0_12","5_12","5_5"}, <6> {"0_12","5_12","6_6"}, <7> {"0_12","5_12","7_11","7_7"}, <8> {"0_12","5_12","7_11","8_11","8_8"}, <9> {"0_12","5_12","7_11","8_11","9_11","9_9"}, <10> {"0_12","10_10","5_12","7_11","8_11","9_11"}, <11> {"0_12","11_11","5_12","7_11","8_11","9_11"}, <12> {"0_12","12_12","5_12"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Intentionally_act"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Perception_active"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Hostile_encounter"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Attack"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Businesses"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Perception_active"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Active_substance"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Body_mark"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Intentionally_act"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Perception_active"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Hostile_encounter"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Attack"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Businesses"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Perception_active"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Active_substance"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Body_mark"] do sum <s> in Spans : z7[r,s] == 1;
#pairwise exclusion constraint
set Exc2 := {<"Side_1","Sides">,<"Side_2","Sides">};
subto exclusion2: forall <ri,rj> in Exc2 do z2[ri,"-1_-1"] + z2[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
set Reqr2 := {<"Side_1","Side_2">};
subto require2: forall <ri,rj> in Reqr2 do z2[ri,"-1_-1"] - z2[rj,"-1_-1"] == 0;
