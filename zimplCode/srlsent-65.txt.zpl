# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Sociability","People","Residence","Locative_relation","Openness","Awareness","People_by_residence","Businesses"};
set Roles[Frames] :=  <"Sociability"> {"Manner","Protagonist","Content","Degree","Company"}, <"People"> {"Person","Ethnicity","Persistent_characteristic","Context_of_acquaintance","Descriptor","Age","Origin"}, <"Residence"> {"Co_resident","Manner","Location","Time","Circumstances","Resident","Depictive","Frequency"}, <"Locative_relation"> {"Time","Distance","Figure","Ground","Direction","Figures"}, <"Openness"> {"Useful_location","Barrier"}, <"Awareness"> {"Cognizer","Topic","Degree","Role","Manner","Evidence","Explanation","Time","Content","Expressor","Paradigm"}, <"People_by_residence"> {"Residents","Location","Known_resident","Indicated_resident"}, <"Businesses"> {"Descriptor","Business_Name","Service_provider","Business","Place","Product","Proprietor"};
set Spans := {"-1_-1","0_0","0_19","10_10","10_14","10_18","11_11","11_13","12_12","13_13","14_14","15_15","15_18","16_16","16_18","17_17","18_18","19_19","1_1","1_19","2_2","2_3","3_3","4_4","5_18","5_5","6_6","6_7","7_7","8_8","9_18","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Sociability"]] binary;
var z1[Assignment["People"]] binary;
var z2[Assignment["Residence"]] binary;
var z3[Assignment["Locative_relation"]] binary;
var z4[Assignment["Openness"]] binary;
var z5[Assignment["Awareness"]] binary;
var z6[Assignment["People_by_residence"]] binary;
var z7[Assignment["Businesses"]] binary;
param probabilities0[Assignment["Sociability"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["People"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Residence"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Locative_relation"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Openness"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Awareness"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["People_by_residence"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Businesses"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Sociability"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["People"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Residence"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Locative_relation"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Openness"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Awareness"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["People_by_residence"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Businesses"] : probabilities7[r,s] * z7[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 19};
set G[I] := <0> {"0_0","0_19"}, <1> {"0_19","1_1","1_19"}, <2> {"0_19","1_19","2_2","2_3"}, <3> {"0_19","1_19","2_3","3_3"}, <4> {"0_19","1_19","4_4"}, <5> {"0_19","1_19","5_18","5_5"}, <6> {"0_19","1_19","5_18","6_6","6_7"}, <7> {"0_19","1_19","5_18","6_7","7_7"}, <8> {"0_19","1_19","5_18","8_8"}, <9> {"0_19","1_19","5_18","9_18","9_9"}, <10> {"0_19","10_10","10_14","10_18","1_19","5_18","9_18"}, <11> {"0_19","10_14","10_18","11_11","11_13","1_19","5_18","9_18"}, <12> {"0_19","10_14","10_18","11_13","12_12","1_19","5_18","9_18"}, <13> {"0_19","10_14","10_18","11_13","13_13","1_19","5_18","9_18"}, <14> {"0_19","10_14","10_18","14_14","1_19","5_18","9_18"}, <15> {"0_19","10_18","15_15","15_18","1_19","5_18","9_18"}, <16> {"0_19","10_18","15_18","16_16","16_18","1_19","5_18","9_18"}, <17> {"0_19","10_18","15_18","16_18","17_17","1_19","5_18","9_18"}, <18> {"0_19","10_18","15_18","16_18","18_18","1_19","5_18","9_18"}, <19> {"0_19","19_19","1_19"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Sociability"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["People"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Residence"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Locative_relation"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Openness"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Awareness"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["People_by_residence"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Businesses"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Sociability"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["People"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Residence"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Locative_relation"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Openness"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Awareness"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["People_by_residence"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Businesses"] do sum <s> in Spans : z7[r,s] == 1;
#pairwise exclusion constraint
set Exc3 := {<"Figure","Figures">,<"Figures","Ground">};
subto exclusion3: forall <ri,rj> in Exc3 do z3[ri,"-1_-1"] + z3[rj,"-1_-1"] >= 1;
set Exc4 := {<"Barrier","Useful_location">};
subto exclusion4: forall <ri,rj> in Exc4 do z4[ri,"-1_-1"] + z4[rj,"-1_-1"] >= 1;
set Exc5 := {<"Cognizer","Expressor">};
subto exclusion5: forall <ri,rj> in Exc5 do z5[ri,"-1_-1"] + z5[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
