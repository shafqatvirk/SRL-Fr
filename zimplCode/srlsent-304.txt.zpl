# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Time_vector","Temporal_subregion","Statement","Part_orientational","Capability","Manufacturing","Weapon","Active_substance","Dimension","Quantity","Arranging","Dimension","Quantity","Substance","Weapon"};
set Roles[Frames] :=  <"Time_vector"> {"Distance","Event","Landmark_event","Direction"}, <"Temporal_subregion"> {"Time_period","Time","Degree","Sub_part"}, <"Statement"> {"Message","Medium","Place","Iteration","Means","Depictive","Manner","Epistemic_stance","Speaker","Event_description","Addressee","Time","Containing_event","Degree","Occasion","Group","Frequency","Particular_iteration","Internal_cause","Topic"}, <"Part_orientational"> {"Part_Prop","Part","Whole"}, <"Capability"> {"Degree","Status","Entity","Relevant_feature","Circumstances","Role","Event","Cause"}, <"Manufacturing"> {"Purpose","Circumstances","Time","Manufacturer","Instrument","Place","Frequency","Resource","Means","Locus","Consumer","Depictive","Factory","Product","Manner"}, <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Active_substance"> {"Name","Type","Substance","Descriptor","Effect"}, <"Dimension"> {"Object","Domain","Measurement","Dimension","Location"}, <"Quantity"> {"Mass","Q_Prop","Degree","Quantity","Individuals"}, <"Arranging"> {"Agent","Theme","Configuration","Manner","Location","Time","Circumstances","Purpose","Degree"}, <"Dimension"> {"Object","Domain","Measurement","Dimension","Location"}, <"Quantity"> {"Mass","Q_Prop","Degree","Quantity","Individuals"}, <"Substance"> {"Source","Type","Use","Descriptor","Substance","Constituents"}, <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"};
set Spans := {"-1_-1","0_0","0_30","10_10","10_22","11_11","11_12","11_22","12_12","13_13","13_22","14_14","14_21","15_15","15_21","16_16","16_21","17_17","17_18","18_18","19_19","19_21","1_1","20_20","20_21","21_21","22_22","23_23","24_24","24_29","25_25","25_26","25_29","26_26","27_27","27_29","28_28","28_29","29_29","2_2","2_5","30_30","3_3","3_5","4_4","5_5","6_6","7_7","8_8","9_29","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Time_vector"]] binary;
var z1[Assignment["Temporal_subregion"]] binary;
var z2[Assignment["Statement"]] binary;
var z3[Assignment["Part_orientational"]] binary;
var z4[Assignment["Capability"]] binary;
var z5[Assignment["Manufacturing"]] binary;
var z6[Assignment["Weapon"]] binary;
var z7[Assignment["Active_substance"]] binary;
var z8[Assignment["Dimension"]] binary;
var z9[Assignment["Quantity"]] binary;
var z10[Assignment["Arranging"]] binary;
var z11[Assignment["Dimension"]] binary;
var z12[Assignment["Quantity"]] binary;
var z13[Assignment["Substance"]] binary;
var z14[Assignment["Weapon"]] binary;
param probabilities0[Assignment["Time_vector"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Temporal_subregion"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Statement"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Part_orientational"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Capability"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Manufacturing"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Weapon"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Active_substance"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Dimension"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Quantity"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Arranging"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;
param probabilities11[Assignment["Dimension"]] := read "../frameData/frame11.txt" as "<1s,2s> 3n" skip 2;
param probabilities12[Assignment["Quantity"]] := read "../frameData/frame12.txt" as "<1s,2s> 3n" skip 2;
param probabilities13[Assignment["Substance"]] := read "../frameData/frame13.txt" as "<1s,2s> 3n" skip 2;
param probabilities14[Assignment["Weapon"]] := read "../frameData/frame14.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Time_vector"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Temporal_subregion"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Statement"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Part_orientational"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Capability"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Manufacturing"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Weapon"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Active_substance"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Dimension"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Quantity"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Arranging"] : probabilities10[r,s] * z10[r,s])+(sum <r,s> in Assignment["Dimension"] : probabilities11[r,s] * z11[r,s])+(sum <r,s> in Assignment["Quantity"] : probabilities12[r,s] * z12[r,s])+(sum <r,s> in Assignment["Substance"] : probabilities13[r,s] * z13[r,s])+(sum <r,s> in Assignment["Weapon"] : probabilities14[r,s] * z14[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 30};
set G[I] := <0> {"0_0","0_30"}, <1> {"0_30","1_1"}, <2> {"0_30","2_2","2_5"}, <3> {"0_30","2_5","3_3","3_5"}, <4> {"0_30","2_5","3_5","4_4"}, <5> {"0_30","2_5","3_5","5_5"}, <6> {"0_30","6_6"}, <7> {"0_30","7_7"}, <8> {"0_30","8_8"}, <9> {"0_30","9_29","9_9"}, <10> {"0_30","10_10","10_22","9_29"}, <11> {"0_30","10_22","11_11","11_12","11_22","9_29"}, <12> {"0_30","10_22","11_12","11_22","12_12","9_29"}, <13> {"0_30","10_22","11_22","13_13","13_22","9_29"}, <14> {"0_30","10_22","11_22","13_22","14_14","14_21","9_29"}, <15> {"0_30","10_22","11_22","13_22","14_21","15_15","15_21","9_29"}, <16> {"0_30","10_22","11_22","13_22","14_21","15_21","16_16","16_21","9_29"}, <17> {"0_30","10_22","11_22","13_22","14_21","15_21","16_21","17_17","17_18","9_29"}, <18> {"0_30","10_22","11_22","13_22","14_21","15_21","16_21","17_18","18_18","9_29"}, <19> {"0_30","10_22","11_22","13_22","14_21","15_21","16_21","19_19","19_21","9_29"}, <20> {"0_30","10_22","11_22","13_22","14_21","15_21","16_21","19_21","20_20","20_21","9_29"}, <21> {"0_30","10_22","11_22","13_22","14_21","15_21","16_21","19_21","20_21","21_21","9_29"}, <22> {"0_30","10_22","11_22","13_22","22_22","9_29"}, <23> {"0_30","23_23","9_29"}, <24> {"0_30","24_24","24_29","9_29"}, <25> {"0_30","24_29","25_25","25_26","25_29","9_29"}, <26> {"0_30","24_29","25_26","25_29","26_26","9_29"}, <27> {"0_30","24_29","25_29","27_27","27_29","9_29"}, <28> {"0_30","24_29","25_29","27_29","28_28","28_29","9_29"}, <29> {"0_30","24_29","25_29","27_29","28_29","29_29","9_29"}, <30> {"0_30","30_30"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Time_vector"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Temporal_subregion"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Statement"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Part_orientational"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Capability"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Manufacturing"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Active_substance"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Dimension"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Quantity"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Arranging"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
subto overlap11: forall <i> in I do 
 sum <r> in Roles["Dimension"] do 
 sum <s> in G[i] do z11[r,s] <= 1;
subto overlap12: forall <i> in I do 
 sum <r> in Roles["Quantity"] do 
 sum <s> in G[i] do z12[r,s] <= 1;
subto overlap13: forall <i> in I do 
 sum <r> in Roles["Substance"] do 
 sum <s> in G[i] do z13[r,s] <= 1;
subto overlap14: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z14[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Time_vector"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Temporal_subregion"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Statement"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Part_orientational"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Capability"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Manufacturing"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Weapon"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Active_substance"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Dimension"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Quantity"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Arranging"] do sum <s> in Spans : z10[r,s] == 1;
subto unique11: forall <r> in Roles["Dimension"] do sum <s> in Spans : z11[r,s] == 1;
subto unique12: forall <r> in Roles["Quantity"] do sum <s> in Spans : z12[r,s] == 1;
subto unique13: forall <r> in Roles["Substance"] do sum <s> in Spans : z13[r,s] == 1;
subto unique14: forall <r> in Roles["Weapon"] do sum <s> in Spans : z14[r,s] == 1;
#pairwise exclusion constraint
set Exc9 := {<"Individuals","Mass">};
subto exclusion9: forall <ri,rj> in Exc9 do z9[ri,"-1_-1"] + z9[rj,"-1_-1"] >= 1;
set Exc12 := {<"Individuals","Mass">};
subto exclusion12: forall <ri,rj> in Exc12 do z12[ri,"-1_-1"] + z12[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
