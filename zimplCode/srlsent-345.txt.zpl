# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Temporal_subregion","Weapon","People_by_vocation","Leadership","Reveal_secret","Commerce_sell","Substance","Gizmo","Artifact","Part_orientational"};
set Roles[Frames] :=  <"Temporal_subregion"> {"Time_period","Time","Degree","Sub_part"}, <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"People_by_vocation"> {"Type","Origin","Contract_basis","Ethnicity","Employer","Place_of_employment","Person","Descriptor","Rank","Compensation","Persistent_characteristic"}, <"Leadership"> {"Domain","Leader","Type","Depictive","Descriptor","Degree","Means","Role","Activity","Duration","Governed","Manner","Time"}, <"Reveal_secret"> {"Medium","Place","Means","Depictive","Speaker","Location_of_protagonist","Manner","Completeness","Period_of_iterations","Information","Addressee","Time","Containing_event","Event_description","Frequency","Re-encoding","Internal_cause","Topic","Source_material"}, <"Commerce_sell"> {"Purpose","Result","Unit","Purpose_of_Goods","Goods","Place","Seller","Rate","Manner","Relay","Buyer","Means","Time","Money"}, <"Substance"> {"Source","Type","Use","Descriptor","Substance","Constituents"}, <"Gizmo"> {"Descriptor","Power_source","Gizmo","Use","User"}, <"Artifact"> {"Creator","Type","Use","Material","Time_of_creation","Name","Artifact"}, <"Part_orientational"> {"Part_Prop","Part","Whole"};
set Spans := {"-1_-1","0_0","0_2","0_28","10_10","11_11","12_12","13_13","13_27","14_14","14_15","14_27","15_15","15_27","16_16","16_27","17_17","17_20","18_18","19_19","1_1","1_2","20_20","21_21","21_27","22_22","22_23","22_27","23_23","24_24","25_25","26_26","27_27","28_28","2_2","3_3","4_11","4_4","4_7","5_5","6_6","7_7","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Temporal_subregion"]] binary;
var z1[Assignment["Weapon"]] binary;
var z2[Assignment["People_by_vocation"]] binary;
var z3[Assignment["Leadership"]] binary;
var z4[Assignment["Reveal_secret"]] binary;
var z5[Assignment["Commerce_sell"]] binary;
var z6[Assignment["Substance"]] binary;
var z7[Assignment["Gizmo"]] binary;
var z8[Assignment["Artifact"]] binary;
var z9[Assignment["Part_orientational"]] binary;
param probabilities0[Assignment["Temporal_subregion"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Weapon"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["People_by_vocation"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Leadership"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Reveal_secret"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Commerce_sell"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Substance"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Gizmo"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Artifact"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Part_orientational"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Temporal_subregion"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Weapon"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["People_by_vocation"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Leadership"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Reveal_secret"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Commerce_sell"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Substance"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Gizmo"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Artifact"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Part_orientational"] : probabilities9[r,s] * z9[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 28};
set G[I] := <0> {"0_0","0_2","0_28"}, <1> {"0_2","0_28","1_1","1_2"}, <2> {"0_2","0_28","1_2","2_2"}, <3> {"0_28","3_3"}, <4> {"0_28","4_11","4_4","4_7"}, <5> {"0_28","4_11","4_7","5_5"}, <6> {"0_28","4_11","4_7","6_6"}, <7> {"0_28","4_11","4_7","7_7"}, <8> {"0_28","4_11","8_8"}, <9> {"0_28","4_11","9_9"}, <10> {"0_28","10_10","4_11"}, <11> {"0_28","11_11","4_11"}, <12> {"0_28","12_12"}, <13> {"0_28","13_13","13_27"}, <14> {"0_28","13_27","14_14","14_15","14_27"}, <15> {"0_28","13_27","14_15","14_27","15_15","15_27"}, <16> {"0_28","13_27","14_27","15_27","16_16","16_27"}, <17> {"0_28","13_27","14_27","15_27","16_27","17_17","17_20"}, <18> {"0_28","13_27","14_27","15_27","16_27","17_20","18_18"}, <19> {"0_28","13_27","14_27","15_27","16_27","17_20","19_19"}, <20> {"0_28","13_27","14_27","15_27","16_27","17_20","20_20"}, <21> {"0_28","13_27","14_27","15_27","16_27","21_21","21_27"}, <22> {"0_28","13_27","14_27","15_27","16_27","21_27","22_22","22_23","22_27"}, <23> {"0_28","13_27","14_27","15_27","16_27","21_27","22_23","22_27","23_23"}, <24> {"0_28","13_27","14_27","15_27","16_27","21_27","22_27","24_24"}, <25> {"0_28","13_27","14_27","15_27","16_27","21_27","22_27","25_25"}, <26> {"0_28","13_27","14_27","15_27","16_27","21_27","22_27","26_26"}, <27> {"0_28","13_27","14_27","15_27","16_27","21_27","22_27","27_27"}, <28> {"0_28","28_28"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Temporal_subregion"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["People_by_vocation"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Leadership"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Reveal_secret"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Commerce_sell"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Substance"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Gizmo"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Artifact"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Part_orientational"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Temporal_subregion"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Weapon"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["People_by_vocation"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Leadership"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Reveal_secret"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Commerce_sell"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Substance"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Gizmo"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Artifact"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Part_orientational"] do sum <s> in Spans : z9[r,s] == 1;
#pairwise exclusion constraint
#pairwise requirement constraint
