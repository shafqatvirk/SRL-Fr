# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Weapon","Weapon","Importance","Emotion_directed","Existence","Proliferating_in_number","Artifact","Capability","Control","Weapon","Entity","Capability","Using","Manufacturing"};
set Roles[Frames] :=  <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Importance"> {"Place","Undertaking","Explanation","Field","Time","Factor","Reason","Frequency","Degree","Interested_party"}, <"Emotion_directed"> {"Topic","Circumstances","Parameter","Degree","Experiencer","Event","Expressor","Reason","Empathy_target","Manner","State","Stimulus","Frequency"}, <"Existence"> {"Place","Duration","Inherent_purpose","Entity","Point_of_view","Time","Circumstances","State","Cause"}, <"Proliferating_in_number"> {"Difference","Circumstances","Final_number","Time","Final_state","Place","Degree","Set","Final_correlate","Duration","Attribute","Initial_correlate","Initial_number","Manner","Speed"}, <"Artifact"> {"Creator","Type","Use","Material","Time_of_creation","Name","Artifact"}, <"Capability"> {"Degree","Status","Entity","Relevant_feature","Circumstances","Role","Event","Cause"}, <"Control"> {"Manner","Time","Controlling_entity","Dependent_situation","Dependent_entity"}, <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Entity"> {"Entity","Constituent_parts","Type"}, <"Capability"> {"Degree","Status","Entity","Relevant_feature","Circumstances","Role","Event","Cause"}, <"Using"> {"Duration","Depictive","Purpose","Means","Role","Circumstances","Agent","Manner","Explanation","Outcome","Instrument","Time","Period_of_iterations","Containing_event","Degree","Place","Frequency","Group"}, <"Manufacturing"> {"Purpose","Circumstances","Time","Manufacturer","Instrument","Place","Frequency","Resource","Means","Locus","Consumer","Depictive","Factory","Product","Manner"};
set Spans := {"-1_-1","0_0","0_1","0_28","10_10","11_11","12_12","13_13","14_14","14_15","14_27","15_15","15_27","16_16","16_17","16_27","17_17","18_18","18_27","19_19","19_27","1_1","20_20","20_27","21_21","21_27","22_22","22_27","23_23","23_24","23_27","24_24","25_25","25_27","26_26","26_27","27_27","28_28","2_2","2_28","3_27","3_3","4_10","4_13","4_27","4_4","4_5","4_6","5_5","6_10","6_6","7_10","7_7","8_10","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Weapon"]] binary;
var z1[Assignment["Weapon"]] binary;
var z2[Assignment["Importance"]] binary;
var z3[Assignment["Emotion_directed"]] binary;
var z4[Assignment["Existence"]] binary;
var z5[Assignment["Proliferating_in_number"]] binary;
var z6[Assignment["Artifact"]] binary;
var z7[Assignment["Capability"]] binary;
var z8[Assignment["Control"]] binary;
var z9[Assignment["Weapon"]] binary;
var z10[Assignment["Entity"]] binary;
var z11[Assignment["Capability"]] binary;
var z12[Assignment["Using"]] binary;
var z13[Assignment["Manufacturing"]] binary;
param probabilities0[Assignment["Weapon"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Weapon"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Importance"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Emotion_directed"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Existence"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Proliferating_in_number"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Artifact"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Capability"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Control"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Weapon"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Entity"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;
param probabilities11[Assignment["Capability"]] := read "../frameData/frame11.txt" as "<1s,2s> 3n" skip 2;
param probabilities12[Assignment["Using"]] := read "../frameData/frame12.txt" as "<1s,2s> 3n" skip 2;
param probabilities13[Assignment["Manufacturing"]] := read "../frameData/frame13.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Weapon"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Weapon"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Importance"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Emotion_directed"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Existence"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Proliferating_in_number"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Artifact"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Capability"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Control"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Weapon"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Entity"] : probabilities10[r,s] * z10[r,s])+(sum <r,s> in Assignment["Capability"] : probabilities11[r,s] * z11[r,s])+(sum <r,s> in Assignment["Using"] : probabilities12[r,s] * z12[r,s])+(sum <r,s> in Assignment["Manufacturing"] : probabilities13[r,s] * z13[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 28};
set G[I] := <0> {"0_0","0_1","0_28"}, <1> {"0_1","0_28","1_1"}, <2> {"0_28","2_2","2_28"}, <3> {"0_28","2_28","3_27","3_3"}, <4> {"0_28","2_28","3_27","4_10","4_13","4_27","4_4","4_5","4_6"}, <5> {"0_28","2_28","3_27","4_10","4_13","4_27","4_5","4_6","5_5"}, <6> {"0_28","2_28","3_27","4_10","4_13","4_27","4_6","6_10","6_6"}, <7> {"0_28","2_28","3_27","4_10","4_13","4_27","6_10","7_10","7_7"}, <8> {"0_28","2_28","3_27","4_10","4_13","4_27","6_10","7_10","8_10","8_8"}, <9> {"0_28","2_28","3_27","4_10","4_13","4_27","6_10","7_10","8_10","9_9"}, <10> {"0_28","10_10","2_28","3_27","4_10","4_13","4_27","6_10","7_10","8_10"}, <11> {"0_28","11_11","2_28","3_27","4_13","4_27"}, <12> {"0_28","12_12","2_28","3_27","4_13","4_27"}, <13> {"0_28","13_13","2_28","3_27","4_13","4_27"}, <14> {"0_28","14_14","14_15","14_27","2_28","3_27","4_27"}, <15> {"0_28","14_15","14_27","15_15","15_27","2_28","3_27","4_27"}, <16> {"0_28","14_27","15_27","16_16","16_17","16_27","2_28","3_27","4_27"}, <17> {"0_28","14_27","15_27","16_17","16_27","17_17","2_28","3_27","4_27"}, <18> {"0_28","14_27","15_27","16_27","18_18","18_27","2_28","3_27","4_27"}, <19> {"0_28","14_27","15_27","16_27","18_27","19_19","19_27","2_28","3_27","4_27"}, <20> {"0_28","14_27","15_27","16_27","18_27","19_27","20_20","20_27","2_28","3_27","4_27"}, <21> {"0_28","14_27","15_27","16_27","18_27","19_27","20_27","21_21","21_27","2_28","3_27","4_27"}, <22> {"0_28","14_27","15_27","16_27","18_27","19_27","20_27","21_27","22_22","22_27","2_28","3_27","4_27"}, <23> {"0_28","14_27","15_27","16_27","18_27","19_27","20_27","21_27","22_27","23_23","23_24","23_27","2_28","3_27","4_27"}, <24> {"0_28","14_27","15_27","16_27","18_27","19_27","20_27","21_27","22_27","23_24","23_27","24_24","2_28","3_27","4_27"}, <25> {"0_28","14_27","15_27","16_27","18_27","19_27","20_27","21_27","22_27","23_27","25_25","25_27","2_28","3_27","4_27"}, <26> {"0_28","14_27","15_27","16_27","18_27","19_27","20_27","21_27","22_27","23_27","25_27","26_26","26_27","2_28","3_27","4_27"}, <27> {"0_28","14_27","15_27","16_27","18_27","19_27","20_27","21_27","22_27","23_27","25_27","26_27","27_27","2_28","3_27","4_27"}, <28> {"0_28","28_28","2_28"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Importance"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Emotion_directed"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Existence"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Proliferating_in_number"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Artifact"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Capability"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Control"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Entity"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
subto overlap11: forall <i> in I do 
 sum <r> in Roles["Capability"] do 
 sum <s> in G[i] do z11[r,s] <= 1;
subto overlap12: forall <i> in I do 
 sum <r> in Roles["Using"] do 
 sum <s> in G[i] do z12[r,s] <= 1;
subto overlap13: forall <i> in I do 
 sum <r> in Roles["Manufacturing"] do 
 sum <s> in G[i] do z13[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Weapon"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Weapon"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Importance"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Emotion_directed"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Existence"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Proliferating_in_number"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Artifact"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Capability"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Control"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Weapon"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Entity"] do sum <s> in Spans : z10[r,s] == 1;
subto unique11: forall <r> in Roles["Capability"] do sum <s> in Spans : z11[r,s] == 1;
subto unique12: forall <r> in Roles["Using"] do sum <s> in Spans : z12[r,s] == 1;
subto unique13: forall <r> in Roles["Manufacturing"] do sum <s> in Spans : z13[r,s] == 1;
#pairwise exclusion constraint
set Exc2 := {<"Field","Interested_party">};
subto exclusion2: forall <ri,rj> in Exc2 do z2[ri,"-1_-1"] + z2[rj,"-1_-1"] >= 1;
set Exc3 := {<"Event","Experiencer">,<"Experiencer","Expressor">,<"Event","Expressor">};
subto exclusion3: forall <ri,rj> in Exc3 do z3[ri,"-1_-1"] + z3[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
