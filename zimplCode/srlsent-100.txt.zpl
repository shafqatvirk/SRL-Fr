# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Calendric_unit","Leadership","Defend","Statement","Statement","Cardinal_numbers","Measure_duration","Degree","Telling","Intentionally_act"};
set Roles[Frames] :=  <"Calendric_unit"> {"Relative_time","Unit","Count","Name","Salient_event","Whole"}, <"Leadership"> {"Domain","Leader","Type","Depictive","Descriptor","Degree","Means","Role","Activity","Duration","Governed","Manner","Time"}, <"Defend"> {"Defender","Place","Instrument","Manner","Victim","Assailant","Means","Purpose","Depictive","Reason"}, <"Statement"> {"Message","Medium","Place","Iteration","Means","Depictive","Manner","Epistemic_stance","Speaker","Event_description","Addressee","Time","Containing_event","Degree","Occasion","Group","Frequency","Particular_iteration","Internal_cause","Topic"}, <"Statement"> {"Message","Medium","Place","Iteration","Means","Depictive","Manner","Epistemic_stance","Speaker","Event_description","Addressee","Time","Containing_event","Degree","Occasion","Group","Frequency","Particular_iteration","Internal_cause","Topic"}, <"Cardinal_numbers"> {"Precision","Number","Multiplier","Entity"}, <"Measure_duration"> {"Agent","Count","Unit","Process"}, <"Degree"> {"Gradable_attribute"}, <"Telling"> {"Iteration","Topic","Time","Descriptor","Place","Addressee","Epistemic_stance","Manner","Means","Message","Speaker","Medium"}, <"Intentionally_act"> {"Purpose","Result","Time","Place","Frequency","Means","Event_dscription","Period_of_iterations","Domain","Act","Particular_iteration","Manner","Explanation","Agent"};
set Spans := {"-1_-1","0_0","0_29","10_10","11_11","11_17","11_19","11_27","12_12","12_17","13_13","13_17","14_14","15_15","15_17","16_16","16_17","17_17","18_18","19_19","1_1","20_20","20_23","20_27","21_21","21_22","22_22","23_23","24_24","25_25","26_26","27_27","28_28","29_29","2_2","3_3","3_4","4_4","5_5","6_6","6_8","6_9","7_7","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Calendric_unit"]] binary;
var z1[Assignment["Leadership"]] binary;
var z2[Assignment["Defend"]] binary;
var z3[Assignment["Statement"]] binary;
var z4[Assignment["Statement"]] binary;
var z5[Assignment["Cardinal_numbers"]] binary;
var z6[Assignment["Measure_duration"]] binary;
var z7[Assignment["Degree"]] binary;
var z8[Assignment["Telling"]] binary;
var z9[Assignment["Intentionally_act"]] binary;
param probabilities0[Assignment["Calendric_unit"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Leadership"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Defend"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Statement"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Statement"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Cardinal_numbers"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Measure_duration"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Degree"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Telling"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Intentionally_act"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Calendric_unit"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Leadership"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Defend"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Statement"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Statement"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Cardinal_numbers"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Measure_duration"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Degree"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Telling"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Intentionally_act"] : probabilities9[r,s] * z9[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 29};
set G[I] := <0> {"0_0","0_29"}, <1> {"0_29","1_1"}, <2> {"0_29","2_2"}, <3> {"0_29","3_3","3_4"}, <4> {"0_29","3_4","4_4"}, <5> {"0_29","5_5"}, <6> {"0_29","6_6","6_8","6_9"}, <7> {"0_29","6_8","6_9","7_7"}, <8> {"0_29","6_8","6_9","8_8"}, <9> {"0_29","6_9","9_9"}, <10> {"0_29","10_10"}, <11> {"0_29","11_11","11_17","11_19","11_27"}, <12> {"0_29","11_17","11_19","11_27","12_12","12_17"}, <13> {"0_29","11_17","11_19","11_27","12_17","13_13","13_17"}, <14> {"0_29","11_17","11_19","11_27","12_17","13_17","14_14"}, <15> {"0_29","11_17","11_19","11_27","12_17","13_17","15_15","15_17"}, <16> {"0_29","11_17","11_19","11_27","12_17","13_17","15_17","16_16","16_17"}, <17> {"0_29","11_17","11_19","11_27","12_17","13_17","15_17","16_17","17_17"}, <18> {"0_29","11_19","11_27","18_18"}, <19> {"0_29","11_19","11_27","19_19"}, <20> {"0_29","11_27","20_20","20_23","20_27"}, <21> {"0_29","11_27","20_23","20_27","21_21","21_22"}, <22> {"0_29","11_27","20_23","20_27","21_22","22_22"}, <23> {"0_29","11_27","20_23","20_27","23_23"}, <24> {"0_29","11_27","20_27","24_24"}, <25> {"0_29","11_27","20_27","25_25"}, <26> {"0_29","11_27","20_27","26_26"}, <27> {"0_29","11_27","20_27","27_27"}, <28> {"0_29","28_28"}, <29> {"0_29","29_29"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Calendric_unit"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Leadership"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Defend"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Statement"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Statement"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Cardinal_numbers"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Measure_duration"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Degree"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Telling"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Intentionally_act"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Calendric_unit"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Leadership"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Defend"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Statement"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Statement"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Cardinal_numbers"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Measure_duration"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Degree"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Telling"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Intentionally_act"] do sum <s> in Spans : z9[r,s] == 1;
#pairwise exclusion constraint
#pairwise requirement constraint
