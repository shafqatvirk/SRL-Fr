# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Weapon","Hostile_encounter","Hostile_encounter","Active_substance","Dead_or_alive","Manufacturing","Substance","Toxic_substance","Capability","Arriving","Observable_body_parts","Observable_body_parts"};
set Roles[Frames] :=  <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Hostile_encounter"> {"Purpose","Result","Depictive","Instrument","Place","Degree","Means","Internal_cause","Reason","Particular_iteration","Duration","Sides","Issue","Side_2","Side_1","Manner","Time"}, <"Hostile_encounter"> {"Purpose","Result","Depictive","Instrument","Place","Degree","Means","Internal_cause","Reason","Particular_iteration","Duration","Sides","Issue","Side_2","Side_1","Manner","Time"}, <"Active_substance"> {"Name","Type","Substance","Descriptor","Effect"}, <"Dead_or_alive"> {"Protagonist","Cause","Degree","Figure"}, <"Manufacturing"> {"Purpose","Circumstances","Time","Manufacturer","Instrument","Place","Frequency","Resource","Means","Locus","Consumer","Depictive","Factory","Product","Manner"}, <"Substance"> {"Source","Type","Use","Descriptor","Substance","Constituents"}, <"Toxic_substance"> {"Duration","Victim","Circumstances","Toxic_substance","Body_part","Toxin_source","Degree"}, <"Capability"> {"Degree","Status","Entity","Relevant_feature","Circumstances","Role","Event","Cause"}, <"Arriving"> {"Theme","Cotheme","Means","Depictive","Circumstances","Manner","Time","Source","Period_of_iterations","Degree","Event_description","Re_encoding","Goal","Purpose","Goal_conditions","Path","Frequency","Mode_of_transportation"}, <"Observable_body_parts"> {"Attachment","Descriptor","Possessor","Body_part","Subregion","Orientational_Location"}, <"Observable_body_parts"> {"Attachment","Descriptor","Possessor","Body_part","Subregion","Orientational_Location"};
set Spans := {"-1_-1","0_0","0_1","0_26","0_5","10_10","11_11","11_25","12_12","12_25","13_13","13_14","14_14","15_15","16_16","16_25","17_17","17_25","18_18","18_19","19_19","1_1","20_20","20_25","21_21","21_22","21_25","22_22","23_23","24_24","25_25","26_26","2_2","2_3","2_4","3_3","3_4","4_4","5_5","6_26","6_6","7_10","7_25","7_7","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Weapon"]] binary;
var z1[Assignment["Hostile_encounter"]] binary;
var z2[Assignment["Hostile_encounter"]] binary;
var z3[Assignment["Active_substance"]] binary;
var z4[Assignment["Dead_or_alive"]] binary;
var z5[Assignment["Manufacturing"]] binary;
var z6[Assignment["Substance"]] binary;
var z7[Assignment["Toxic_substance"]] binary;
var z8[Assignment["Capability"]] binary;
var z9[Assignment["Arriving"]] binary;
var z10[Assignment["Observable_body_parts"]] binary;
var z11[Assignment["Observable_body_parts"]] binary;
param probabilities0[Assignment["Weapon"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Hostile_encounter"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Hostile_encounter"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Active_substance"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Dead_or_alive"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Manufacturing"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Substance"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Toxic_substance"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Capability"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Arriving"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Observable_body_parts"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;
param probabilities11[Assignment["Observable_body_parts"]] := read "../frameData/frame11.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Weapon"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Hostile_encounter"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Hostile_encounter"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Active_substance"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Dead_or_alive"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Manufacturing"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Substance"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Toxic_substance"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Capability"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Arriving"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Observable_body_parts"] : probabilities10[r,s] * z10[r,s])+(sum <r,s> in Assignment["Observable_body_parts"] : probabilities11[r,s] * z11[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 26};
set G[I] := <0> {"0_0","0_1","0_26","0_5"}, <1> {"0_1","0_26","0_5","1_1"}, <2> {"0_26","0_5","2_2","2_3","2_4"}, <3> {"0_26","0_5","2_3","2_4","3_3","3_4"}, <4> {"0_26","0_5","2_4","3_4","4_4"}, <5> {"0_26","0_5","5_5"}, <6> {"0_26","6_26","6_6"}, <7> {"0_26","6_26","7_10","7_25","7_7"}, <8> {"0_26","6_26","7_10","7_25","8_8"}, <9> {"0_26","6_26","7_10","7_25","9_9"}, <10> {"0_26","10_10","6_26","7_10","7_25"}, <11> {"0_26","11_11","11_25","6_26","7_25"}, <12> {"0_26","11_25","12_12","12_25","6_26","7_25"}, <13> {"0_26","11_25","12_25","13_13","13_14","6_26","7_25"}, <14> {"0_26","11_25","12_25","13_14","14_14","6_26","7_25"}, <15> {"0_26","11_25","12_25","15_15","6_26","7_25"}, <16> {"0_26","11_25","12_25","16_16","16_25","6_26","7_25"}, <17> {"0_26","11_25","12_25","16_25","17_17","17_25","6_26","7_25"}, <18> {"0_26","11_25","12_25","16_25","17_25","18_18","18_19","6_26","7_25"}, <19> {"0_26","11_25","12_25","16_25","17_25","18_19","19_19","6_26","7_25"}, <20> {"0_26","11_25","12_25","16_25","17_25","20_20","20_25","6_26","7_25"}, <21> {"0_26","11_25","12_25","16_25","17_25","20_25","21_21","21_22","21_25","6_26","7_25"}, <22> {"0_26","11_25","12_25","16_25","17_25","20_25","21_22","21_25","22_22","6_26","7_25"}, <23> {"0_26","11_25","12_25","16_25","17_25","20_25","21_25","23_23","6_26","7_25"}, <24> {"0_26","11_25","12_25","16_25","17_25","20_25","21_25","24_24","6_26","7_25"}, <25> {"0_26","11_25","12_25","16_25","17_25","20_25","21_25","25_25","6_26","7_25"}, <26> {"0_26","26_26","6_26"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Hostile_encounter"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Hostile_encounter"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Active_substance"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Dead_or_alive"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Manufacturing"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Substance"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Toxic_substance"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Capability"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Arriving"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Observable_body_parts"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
subto overlap11: forall <i> in I do 
 sum <r> in Roles["Observable_body_parts"] do 
 sum <s> in G[i] do z11[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Weapon"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Hostile_encounter"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Hostile_encounter"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Active_substance"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Dead_or_alive"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Manufacturing"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Substance"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Toxic_substance"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Capability"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Arriving"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Observable_body_parts"] do sum <s> in Spans : z10[r,s] == 1;
subto unique11: forall <r> in Roles["Observable_body_parts"] do sum <s> in Spans : z11[r,s] == 1;
#pairwise exclusion constraint
set Exc1 := {<"Side_1","Sides">,<"Side_2","Sides">};
subto exclusion1: forall <ri,rj> in Exc1 do z1[ri,"-1_-1"] + z1[rj,"-1_-1"] >= 1;
set Exc2 := {<"Side_1","Sides">,<"Side_2","Sides">};
subto exclusion2: forall <ri,rj> in Exc2 do z2[ri,"-1_-1"] + z2[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
set Reqr1 := {<"Side_1","Side_2">};
subto require1: forall <ri,rj> in Reqr1 do z1[ri,"-1_-1"] - z1[rj,"-1_-1"] == 0;
set Reqr2 := {<"Side_1","Side_2">};
subto require2: forall <ri,rj> in Reqr2 do z2[ri,"-1_-1"] - z2[rj,"-1_-1"] == 0;
