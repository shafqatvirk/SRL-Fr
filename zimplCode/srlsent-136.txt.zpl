# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Locating","Weapon","Clothing","Intentionally_create","People_by_residence","Statement","Perception_experience","Cardinal_numbers","People","Communicate_categorization","Residence","Locative_relation","Quantity","Calendric_unit"};
set Roles[Frames] :=  <"Locating"> {"Location","Perceiver","Ground","Sought_entity"}, <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Clothing"> {"Use","Time_of_creation","Garment","Wearer","Descriptor","Material","Style","Subregion","Body_location"}, <"Intentionally_create"> {"Created_entity","Place","Role","Manner","Components","Creator","Time","Means","Purpose","Co_participant"}, <"People_by_residence"> {"Residents","Location","Known_resident","Indicated_resident"}, <"Statement"> {"Message","Medium","Place","Iteration","Means","Depictive","Manner","Epistemic_stance","Speaker","Event_description","Addressee","Time","Containing_event","Degree","Occasion","Group","Frequency","Particular_iteration","Internal_cause","Topic"}, <"Perception_experience"> {"Perceiver_passive","Location_of_perceiver","Circumstances","Depictive","Place","Frequency","Degree","Body_part","Direction","State","Means","Phenomenon","Duration","Manner","Concessive","Time"}, <"Cardinal_numbers"> {"Precision","Number","Multiplier","Entity"}, <"People"> {"Person","Ethnicity","Persistent_characteristic","Context_of_acquaintance","Descriptor","Age","Origin"}, <"Communicate_categorization"> {"Medium","Item","Manner","Criteria","Time","Circumstances","Speaker","Means","Category"}, <"Residence"> {"Co_resident","Manner","Location","Time","Circumstances","Resident","Depictive","Frequency"}, <"Locative_relation"> {"Time","Distance","Figure","Ground","Direction","Figures"}, <"Quantity"> {"Mass","Q_Prop","Degree","Quantity","Individuals"}, <"Calendric_unit"> {"Relative_time","Unit","Count","Name","Salient_event","Whole"};
set Spans := {"-1_-1","0_0","0_1","0_28","0_8","10_10","11_11","12_12","12_13","12_27","13_13","13_27","14_14","14_15","14_22","14_27","15_15","15_22","16_16","16_22","17_17","17_18","17_22","18_18","18_22","19_19","19_22","1_1","20_20","21_21","22_22","23_23","23_27","24_24","25_25","25_27","26_26","26_27","27_27","28_28","2_2","2_8","3_3","3_5","4_4","4_5","5_5","6_6","6_8","7_7","7_8","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Locating"]] binary;
var z1[Assignment["Weapon"]] binary;
var z2[Assignment["Clothing"]] binary;
var z3[Assignment["Intentionally_create"]] binary;
var z4[Assignment["People_by_residence"]] binary;
var z5[Assignment["Statement"]] binary;
var z6[Assignment["Perception_experience"]] binary;
var z7[Assignment["Cardinal_numbers"]] binary;
var z8[Assignment["People"]] binary;
var z9[Assignment["Communicate_categorization"]] binary;
var z10[Assignment["Residence"]] binary;
var z11[Assignment["Locative_relation"]] binary;
var z12[Assignment["Quantity"]] binary;
var z13[Assignment["Calendric_unit"]] binary;
param probabilities0[Assignment["Locating"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Weapon"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Clothing"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Intentionally_create"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["People_by_residence"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Statement"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Perception_experience"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Cardinal_numbers"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["People"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Communicate_categorization"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Residence"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;
param probabilities11[Assignment["Locative_relation"]] := read "../frameData/frame11.txt" as "<1s,2s> 3n" skip 2;
param probabilities12[Assignment["Quantity"]] := read "../frameData/frame12.txt" as "<1s,2s> 3n" skip 2;
param probabilities13[Assignment["Calendric_unit"]] := read "../frameData/frame13.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Locating"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Weapon"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Clothing"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Intentionally_create"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["People_by_residence"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Statement"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Perception_experience"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Cardinal_numbers"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["People"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Communicate_categorization"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Residence"] : probabilities10[r,s] * z10[r,s])+(sum <r,s> in Assignment["Locative_relation"] : probabilities11[r,s] * z11[r,s])+(sum <r,s> in Assignment["Quantity"] : probabilities12[r,s] * z12[r,s])+(sum <r,s> in Assignment["Calendric_unit"] : probabilities13[r,s] * z13[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 28};
set G[I] := <0> {"0_0","0_1","0_28","0_8"}, <1> {"0_1","0_28","0_8","1_1"}, <2> {"0_28","0_8","2_2","2_8"}, <3> {"0_28","0_8","2_8","3_3","3_5"}, <4> {"0_28","0_8","2_8","3_5","4_4","4_5"}, <5> {"0_28","0_8","2_8","3_5","4_5","5_5"}, <6> {"0_28","0_8","2_8","6_6","6_8"}, <7> {"0_28","0_8","2_8","6_8","7_7","7_8"}, <8> {"0_28","0_8","2_8","6_8","7_8","8_8"}, <9> {"0_28","9_9"}, <10> {"0_28","10_10"}, <11> {"0_28","11_11"}, <12> {"0_28","12_12","12_13","12_27"}, <13> {"0_28","12_13","12_27","13_13","13_27"}, <14> {"0_28","12_27","13_27","14_14","14_15","14_22","14_27"}, <15> {"0_28","12_27","13_27","14_15","14_22","14_27","15_15","15_22"}, <16> {"0_28","12_27","13_27","14_22","14_27","15_22","16_16","16_22"}, <17> {"0_28","12_27","13_27","14_22","14_27","15_22","16_22","17_17","17_18","17_22"}, <18> {"0_28","12_27","13_27","14_22","14_27","15_22","16_22","17_18","17_22","18_18","18_22"}, <19> {"0_28","12_27","13_27","14_22","14_27","15_22","16_22","17_22","18_22","19_19","19_22"}, <20> {"0_28","12_27","13_27","14_22","14_27","15_22","16_22","17_22","18_22","19_22","20_20"}, <21> {"0_28","12_27","13_27","14_22","14_27","15_22","16_22","17_22","18_22","19_22","21_21"}, <22> {"0_28","12_27","13_27","14_22","14_27","15_22","16_22","17_22","18_22","19_22","22_22"}, <23> {"0_28","12_27","13_27","14_27","23_23","23_27"}, <24> {"0_28","12_27","13_27","14_27","23_27","24_24"}, <25> {"0_28","12_27","13_27","14_27","23_27","25_25","25_27"}, <26> {"0_28","12_27","13_27","14_27","23_27","25_27","26_26","26_27"}, <27> {"0_28","12_27","13_27","14_27","23_27","25_27","26_27","27_27"}, <28> {"0_28","28_28"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Locating"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Clothing"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Intentionally_create"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["People_by_residence"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Statement"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Perception_experience"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Cardinal_numbers"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["People"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Communicate_categorization"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Residence"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
subto overlap11: forall <i> in I do 
 sum <r> in Roles["Locative_relation"] do 
 sum <s> in G[i] do z11[r,s] <= 1;
subto overlap12: forall <i> in I do 
 sum <r> in Roles["Quantity"] do 
 sum <s> in G[i] do z12[r,s] <= 1;
subto overlap13: forall <i> in I do 
 sum <r> in Roles["Calendric_unit"] do 
 sum <s> in G[i] do z13[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Locating"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Weapon"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Clothing"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Intentionally_create"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["People_by_residence"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Statement"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Perception_experience"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Cardinal_numbers"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["People"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Communicate_categorization"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Residence"] do sum <s> in Spans : z10[r,s] == 1;
subto unique11: forall <r> in Roles["Locative_relation"] do sum <s> in Spans : z11[r,s] == 1;
subto unique12: forall <r> in Roles["Quantity"] do sum <s> in Spans : z12[r,s] == 1;
subto unique13: forall <r> in Roles["Calendric_unit"] do sum <s> in Spans : z13[r,s] == 1;
#pairwise exclusion constraint
set Exc11 := {<"Figure","Figures">,<"Figures","Ground">};
subto exclusion11: forall <ri,rj> in Exc11 do z11[ri,"-1_-1"] + z11[rj,"-1_-1"] >= 1;
set Exc12 := {<"Individuals","Mass">};
subto exclusion12: forall <ri,rj> in Exc12 do z12[ri,"-1_-1"] + z12[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
