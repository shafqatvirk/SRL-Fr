# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Desirability","Aggregate","Locale_by_use","Locale","Grasp","Likelihood","Supporting","People","People"};
set Roles[Frames] :=  <"Desirability"> {"Parameter","Affected_party","Circumstances","Depictive","Comparison_set","Degree","Evaluee"}, <"Aggregate"> {"Individuals","AggregateProperty","Aggregate","Name","Domain","Container_possessor"}, <"Locale_by_use"> {"Formational_cause","Use","Locale","Relative_location","Name","Container_possessor","Constituent_parts","Descriptor"}, <"Locale"> {"Formational_cause","Locale","Relative_location","Name","Container_possessor","Related_event","Constituent_parts","Descriptor"}, <"Grasp"> {"Cognizer","Phenomenon","Manner","Faculty","Time","Evidence","Category","Completeness","Reference_point"}, <"Likelihood"> {"Time","Place","Circumstances","Reason","Hypothetical_event","Degree"}, <"Supporting"> {"Event_description","Place","Supported","Degree","Manner","Time","Supporter","Means"}, <"People"> {"Person","Ethnicity","Persistent_characteristic","Context_of_acquaintance","Descriptor","Age","Origin"}, <"People"> {"Person","Ethnicity","Persistent_characteristic","Context_of_acquaintance","Descriptor","Age","Origin"};
set Spans := {"-1_-1","0_0","0_14","0_28","0_3","10_10","11_11","12_12","12_13","13_13","14_14","15_15","15_28","16_16","17_17","17_27","18_18","19_19","19_27","1_1","20_20","20_22","20_27","21_21","22_22","23_23","23_27","24_24","24_27","25_25","26_26","27_27","28_28","2_2","3_3","4_4","5_5","6_6","7_7","8_8","9_11","9_13","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Desirability"]] binary;
var z1[Assignment["Aggregate"]] binary;
var z2[Assignment["Locale_by_use"]] binary;
var z3[Assignment["Locale"]] binary;
var z4[Assignment["Grasp"]] binary;
var z5[Assignment["Likelihood"]] binary;
var z6[Assignment["Supporting"]] binary;
var z7[Assignment["People"]] binary;
var z8[Assignment["People"]] binary;
param probabilities0[Assignment["Desirability"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Aggregate"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Locale_by_use"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Locale"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Grasp"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Likelihood"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Supporting"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["People"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["People"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Desirability"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Aggregate"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Locale_by_use"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Locale"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Grasp"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Likelihood"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Supporting"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["People"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["People"] : probabilities8[r,s] * z8[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 28};
set G[I] := <0> {"0_0","0_14","0_28","0_3"}, <1> {"0_14","0_28","0_3","1_1"}, <2> {"0_14","0_28","0_3","2_2"}, <3> {"0_14","0_28","0_3","3_3"}, <4> {"0_14","0_28","4_4"}, <5> {"0_14","0_28","5_5"}, <6> {"0_14","0_28","6_6"}, <7> {"0_14","0_28","7_7"}, <8> {"0_14","0_28","8_8"}, <9> {"0_14","0_28","9_11","9_13","9_9"}, <10> {"0_14","0_28","10_10","9_11","9_13"}, <11> {"0_14","0_28","11_11","9_11","9_13"}, <12> {"0_14","0_28","12_12","12_13","9_13"}, <13> {"0_14","0_28","12_13","13_13","9_13"}, <14> {"0_14","0_28","14_14"}, <15> {"0_28","15_15","15_28"}, <16> {"0_28","15_28","16_16"}, <17> {"0_28","15_28","17_17","17_27"}, <18> {"0_28","15_28","17_27","18_18"}, <19> {"0_28","15_28","17_27","19_19","19_27"}, <20> {"0_28","15_28","17_27","19_27","20_20","20_22","20_27"}, <21> {"0_28","15_28","17_27","19_27","20_22","20_27","21_21"}, <22> {"0_28","15_28","17_27","19_27","20_22","20_27","22_22"}, <23> {"0_28","15_28","17_27","19_27","20_27","23_23","23_27"}, <24> {"0_28","15_28","17_27","19_27","20_27","23_27","24_24","24_27"}, <25> {"0_28","15_28","17_27","19_27","20_27","23_27","24_27","25_25"}, <26> {"0_28","15_28","17_27","19_27","20_27","23_27","24_27","26_26"}, <27> {"0_28","15_28","17_27","19_27","20_27","23_27","24_27","27_27"}, <28> {"0_28","15_28","28_28"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Desirability"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Aggregate"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Locale_by_use"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Locale"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Grasp"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Likelihood"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Supporting"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["People"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["People"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Desirability"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Aggregate"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Locale_by_use"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Locale"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Grasp"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Likelihood"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Supporting"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["People"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["People"] do sum <s> in Spans : z8[r,s] == 1;
#pairwise exclusion constraint
set Exc4 := {<"Cognizer","Faculty">};
subto exclusion4: forall <ri,rj> in Exc4 do z4[ri,"-1_-1"] + z4[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
