# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Information","Text","Topic","Cause_expansion","Capability","Process_continue","Emotion_directed","Getting","Age","Artifact","Causation","Political_locales","Seeking","Increment","Possibilities","Resolve_problem","Locale","Risky_situation"};
set Roles[Frames] :=  <"Information"> {"Means_of_Gathering","Source","Topic","Information","Cognizer"}, <"Text"> {"Topic","Honoree","Use","Author","Containing_text","Genre","Material","Components","Time_of_creation","Title","Text","Medium"}, <"Topic"> {"Text","Topic","Manner","Status","Communicator","Degree"}, <"Cause_expansion"> {"Purpose","Size_change","Time","Instrument","Co_Variable","Initial_size","Group","Dimension","Means","Rate","Cause","Place","Item","Elapsed_time","Manner","Result_size","Agent"}, <"Capability"> {"Degree","Status","Entity","Relevant_feature","Circumstances","Role","Event","Cause"}, <"Process_continue"> {"Duration","Place","Manner","Time","Circumstances","Depictive","Event","Concessive"}, <"Emotion_directed"> {"Topic","Circumstances","Parameter","Degree","Experiencer","Event","Expressor","Reason","Empathy_target","Manner","State","Stimulus","Frequency"}, <"Getting"> {"Recipient","Result","Time","Place","Purpose","Means","Source","Theme","Reason","Beneficiary","Manner","Concessive"}, <"Age"> {"Attribute","Degree","Entity","Time","Expressor","Duration","Age","Descriptor"}, <"Artifact"> {"Creator","Type","Use","Material","Time_of_creation","Name","Artifact"}, <"Causation"> {"Circumstances","Time","Actor","Place","Frequency","Means","Effect","Cause","Reason","Affected","Manner","Concessive","Explanation"}, <"Political_locales"> {"Relative_location","Constituent_parts","Container_possessor","Descriptor","Name","Population","Locale"}, <"Seeking"> {"Sought_entity","Cognizer_agent","Ground","Manner","Outcome","Means"}, <"Increment"> {"Initial_set","Class","Increment","Added_set"}, <"Possibilities"> {"Purpose","Event","Salient_entity","Agent","Number_of_possibilities"}, <"Resolve_problem"> {"Duration","Medium","Role","Means","Problem","Circumstances","Agent","Manner","Resultant_Situation","Outcome","Instrument","Cause","Time","Beneficiary","Degree","Place","Frequency","Containing_Event","Co_participant"}, <"Locale"> {"Formational_cause","Locale","Relative_location","Name","Container_possessor","Related_event","Constituent_parts","Descriptor"}, <"Risky_situation"> {"Dangerous_entity","Asset","Degree","Domain","Situation","Time","Circumstances","Frequency"};
set Spans := {"-1_-1","0_0","0_1","0_12","0_32","10_10","11_11","11_12","12_12","13_13","13_14","14_14","15_15","16_16","16_31","17_17","17_19","17_21","17_31","18_18","19_19","1_1","1_12","20_20","21_21","22_22","22_23","22_31","23_23","24_24","24_31","25_25","25_31","26_26","26_27","27_27","28_28","28_31","29_29","29_31","2_12","2_2","30_30","31_31","32_32","3_10","3_12","3_3","3_4","3_5","3_7","4_4","5_5","5_7","6_6","6_7","7_7","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Information"]] binary;
var z1[Assignment["Text"]] binary;
var z2[Assignment["Topic"]] binary;
var z3[Assignment["Cause_expansion"]] binary;
var z4[Assignment["Capability"]] binary;
var z5[Assignment["Process_continue"]] binary;
var z6[Assignment["Emotion_directed"]] binary;
var z7[Assignment["Getting"]] binary;
var z8[Assignment["Age"]] binary;
var z9[Assignment["Artifact"]] binary;
var z10[Assignment["Causation"]] binary;
var z11[Assignment["Political_locales"]] binary;
var z12[Assignment["Seeking"]] binary;
var z13[Assignment["Increment"]] binary;
var z14[Assignment["Possibilities"]] binary;
var z15[Assignment["Resolve_problem"]] binary;
var z16[Assignment["Locale"]] binary;
var z17[Assignment["Risky_situation"]] binary;
param probabilities0[Assignment["Information"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Text"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Topic"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Cause_expansion"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Capability"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Process_continue"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Emotion_directed"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Getting"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Age"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Artifact"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Causation"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;
param probabilities11[Assignment["Political_locales"]] := read "../frameData/frame11.txt" as "<1s,2s> 3n" skip 2;
param probabilities12[Assignment["Seeking"]] := read "../frameData/frame12.txt" as "<1s,2s> 3n" skip 2;
param probabilities13[Assignment["Increment"]] := read "../frameData/frame13.txt" as "<1s,2s> 3n" skip 2;
param probabilities14[Assignment["Possibilities"]] := read "../frameData/frame14.txt" as "<1s,2s> 3n" skip 2;
param probabilities15[Assignment["Resolve_problem"]] := read "../frameData/frame15.txt" as "<1s,2s> 3n" skip 2;
param probabilities16[Assignment["Locale"]] := read "../frameData/frame16.txt" as "<1s,2s> 3n" skip 2;
param probabilities17[Assignment["Risky_situation"]] := read "../frameData/frame17.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Information"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Text"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Topic"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Cause_expansion"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Capability"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Process_continue"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Emotion_directed"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Getting"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Age"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Artifact"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Causation"] : probabilities10[r,s] * z10[r,s])+(sum <r,s> in Assignment["Political_locales"] : probabilities11[r,s] * z11[r,s])+(sum <r,s> in Assignment["Seeking"] : probabilities12[r,s] * z12[r,s])+(sum <r,s> in Assignment["Increment"] : probabilities13[r,s] * z13[r,s])+(sum <r,s> in Assignment["Possibilities"] : probabilities14[r,s] * z14[r,s])+(sum <r,s> in Assignment["Resolve_problem"] : probabilities15[r,s] * z15[r,s])+(sum <r,s> in Assignment["Locale"] : probabilities16[r,s] * z16[r,s])+(sum <r,s> in Assignment["Risky_situation"] : probabilities17[r,s] * z17[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 32};
set G[I] := <0> {"0_0","0_1","0_12","0_32"}, <1> {"0_1","0_12","0_32","1_1","1_12"}, <2> {"0_12","0_32","1_12","2_12","2_2"}, <3> {"0_12","0_32","1_12","2_12","3_10","3_12","3_3","3_4","3_5","3_7"}, <4> {"0_12","0_32","1_12","2_12","3_10","3_12","3_4","3_5","3_7","4_4"}, <5> {"0_12","0_32","1_12","2_12","3_10","3_12","3_5","3_7","5_5","5_7"}, <6> {"0_12","0_32","1_12","2_12","3_10","3_12","3_7","5_7","6_6","6_7"}, <7> {"0_12","0_32","1_12","2_12","3_10","3_12","3_7","5_7","6_7","7_7"}, <8> {"0_12","0_32","1_12","2_12","3_10","3_12","8_8"}, <9> {"0_12","0_32","1_12","2_12","3_10","3_12","9_9"}, <10> {"0_12","0_32","10_10","1_12","2_12","3_10","3_12"}, <11> {"0_12","0_32","11_11","11_12","1_12","2_12","3_12"}, <12> {"0_12","0_32","11_12","12_12","1_12","2_12","3_12"}, <13> {"0_32","13_13","13_14"}, <14> {"0_32","13_14","14_14"}, <15> {"0_32","15_15"}, <16> {"0_32","16_16","16_31"}, <17> {"0_32","16_31","17_17","17_19","17_21","17_31"}, <18> {"0_32","16_31","17_19","17_21","17_31","18_18"}, <19> {"0_32","16_31","17_19","17_21","17_31","19_19"}, <20> {"0_32","16_31","17_21","17_31","20_20"}, <21> {"0_32","16_31","17_21","17_31","21_21"}, <22> {"0_32","16_31","17_31","22_22","22_23","22_31"}, <23> {"0_32","16_31","17_31","22_23","22_31","23_23"}, <24> {"0_32","16_31","17_31","22_31","24_24","24_31"}, <25> {"0_32","16_31","17_31","22_31","24_31","25_25","25_31"}, <26> {"0_32","16_31","17_31","22_31","24_31","25_31","26_26","26_27"}, <27> {"0_32","16_31","17_31","22_31","24_31","25_31","26_27","27_27"}, <28> {"0_32","16_31","17_31","22_31","24_31","25_31","28_28","28_31"}, <29> {"0_32","16_31","17_31","22_31","24_31","25_31","28_31","29_29","29_31"}, <30> {"0_32","16_31","17_31","22_31","24_31","25_31","28_31","29_31","30_30"}, <31> {"0_32","16_31","17_31","22_31","24_31","25_31","28_31","29_31","31_31"}, <32> {"0_32","32_32"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Information"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Text"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Topic"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Cause_expansion"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Capability"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Process_continue"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Emotion_directed"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Getting"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Age"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Artifact"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Causation"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
subto overlap11: forall <i> in I do 
 sum <r> in Roles["Political_locales"] do 
 sum <s> in G[i] do z11[r,s] <= 1;
subto overlap12: forall <i> in I do 
 sum <r> in Roles["Seeking"] do 
 sum <s> in G[i] do z12[r,s] <= 1;
subto overlap13: forall <i> in I do 
 sum <r> in Roles["Increment"] do 
 sum <s> in G[i] do z13[r,s] <= 1;
subto overlap14: forall <i> in I do 
 sum <r> in Roles["Possibilities"] do 
 sum <s> in G[i] do z14[r,s] <= 1;
subto overlap15: forall <i> in I do 
 sum <r> in Roles["Resolve_problem"] do 
 sum <s> in G[i] do z15[r,s] <= 1;
subto overlap16: forall <i> in I do 
 sum <r> in Roles["Locale"] do 
 sum <s> in G[i] do z16[r,s] <= 1;
subto overlap17: forall <i> in I do 
 sum <r> in Roles["Risky_situation"] do 
 sum <s> in G[i] do z17[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Information"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Text"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Topic"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Cause_expansion"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Capability"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Process_continue"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Emotion_directed"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Getting"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Age"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Artifact"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Causation"] do sum <s> in Spans : z10[r,s] == 1;
subto unique11: forall <r> in Roles["Political_locales"] do sum <s> in Spans : z11[r,s] == 1;
subto unique12: forall <r> in Roles["Seeking"] do sum <s> in Spans : z12[r,s] == 1;
subto unique13: forall <r> in Roles["Increment"] do sum <s> in Spans : z13[r,s] == 1;
subto unique14: forall <r> in Roles["Possibilities"] do sum <s> in Spans : z14[r,s] == 1;
subto unique15: forall <r> in Roles["Resolve_problem"] do sum <s> in Spans : z15[r,s] == 1;
subto unique16: forall <r> in Roles["Locale"] do sum <s> in Spans : z16[r,s] == 1;
subto unique17: forall <r> in Roles["Risky_situation"] do sum <s> in Spans : z17[r,s] == 1;
#pairwise exclusion constraint
set Exc3 := {<"Agent","Cause">};
subto exclusion3: forall <ri,rj> in Exc3 do z3[ri,"-1_-1"] + z3[rj,"-1_-1"] >= 1;
set Exc6 := {<"Event","Experiencer">,<"Experiencer","Expressor">,<"Event","Expressor">};
subto exclusion6: forall <ri,rj> in Exc6 do z6[ri,"-1_-1"] + z6[rj,"-1_-1"] >= 1;
set Exc8 := {<"Entity","Expressor">,<"Age","Degree">};
subto exclusion8: forall <ri,rj> in Exc8 do z8[ri,"-1_-1"] + z8[rj,"-1_-1"] >= 1;
set Exc15 := {<"Agent","Cause">};
subto exclusion15: forall <ri,rj> in Exc15 do z15[ri,"-1_-1"] + z15[rj,"-1_-1"] >= 1;
set Exc17 := {<"Dangerous_entity","Situation">};
subto exclusion17: forall <ri,rj> in Exc17 do z17[ri,"-1_-1"] + z17[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
