# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Quantity","People_by_origin","Self_motion","Self_motion","Moving_in_place","Inspecting","Increment","Text","Attaching","Contacting","Roadways"};
set Roles[Frames] :=  <"Quantity"> {"Mass","Q_Prop","Degree","Quantity","Individuals"}, <"People_by_origin"> {"Person","Ethnicity","Persistent_characteristic","Context_of_acquaintance","Descriptor","Age","Origin"}, <"Self_motion"> {"Speed","Duration","Area","Purpose","Cotheme","Means","Depictive","Coordinated_event","Manner","Path","Result","Distance","Self_mover","Time","Source","External_cause","Place","Goal","Reason","Direction","Concessive","Internal_cause","Path_shape"}, <"Self_motion"> {"Speed","Duration","Area","Purpose","Cotheme","Means","Depictive","Coordinated_event","Manner","Path","Result","Distance","Self_mover","Time","Source","External_cause","Place","Goal","Reason","Direction","Concessive","Internal_cause","Path_shape"}, <"Moving_in_place"> {"Purpose","Result","Fixed_location","Time","Place","Theme","Direction","Periodicity","Cause","Depictive","Path_shape","Manner","Angle"}, <"Inspecting"> {"Desired_state","Location_of_inspector","Degree","Manner","Inspector","Ground","Time","Circumstances","Unwanted_entity","Means","Purpose"}, <"Increment"> {"Initial_set","Class","Increment","Added_set"}, <"Text"> {"Topic","Honoree","Use","Author","Containing_text","Genre","Material","Components","Time_of_creation","Title","Text","Medium"}, <"Attaching"> {"Purpose","Result","Time","Goal","Instrument","Place","Connector","Means","Items","Period_of_iterations","Handle","Duration","Item","Manner","Agent"}, <"Contacting"> {"Depictive","Topic","Time","Place","Addressee","Communicator","Communication","Reason","Intermediary","Location_of_communicator","Address","Frequency","Medium"}, <"Roadways"> {"Characteristic","Length","Use","Frequency_of_use","Goal","Relative_location","Endpoints","Direction","Source","Material","Path","Roadway","Name","Abundant_entities"};
set Spans := {"-1_-1","0_0","0_2","0_32","10_10","10_11","11_11","12_12","13_13","14_14","14_31","15_15","16_16","16_18","17_17","17_18","18_18","19_19","19_31","1_1","1_2","20_20","20_31","21_21","22_22","23_23","24_24","24_31","25_25","25_31","26_26","27_27","28_28","29_29","29_31","2_2","30_30","30_31","31_31","32_32","3_3","3_32","4_4","4_5","5_5","6_6","6_8","7_7","7_8","8_8","9_11","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Quantity"]] binary;
var z1[Assignment["People_by_origin"]] binary;
var z2[Assignment["Self_motion"]] binary;
var z3[Assignment["Self_motion"]] binary;
var z4[Assignment["Moving_in_place"]] binary;
var z5[Assignment["Inspecting"]] binary;
var z6[Assignment["Increment"]] binary;
var z7[Assignment["Text"]] binary;
var z8[Assignment["Attaching"]] binary;
var z9[Assignment["Contacting"]] binary;
var z10[Assignment["Roadways"]] binary;
param probabilities0[Assignment["Quantity"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["People_by_origin"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Self_motion"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Self_motion"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Moving_in_place"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Inspecting"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Increment"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Text"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Attaching"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Contacting"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Roadways"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Quantity"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["People_by_origin"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Self_motion"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Self_motion"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Moving_in_place"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Inspecting"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Increment"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Text"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Attaching"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Contacting"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Roadways"] : probabilities10[r,s] * z10[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 32};
set G[I] := <0> {"0_0","0_2","0_32"}, <1> {"0_2","0_32","1_1","1_2"}, <2> {"0_2","0_32","1_2","2_2"}, <3> {"0_32","3_3","3_32"}, <4> {"0_32","3_32","4_4","4_5"}, <5> {"0_32","3_32","4_5","5_5"}, <6> {"0_32","3_32","6_6","6_8"}, <7> {"0_32","3_32","6_8","7_7","7_8"}, <8> {"0_32","3_32","6_8","7_8","8_8"}, <9> {"0_32","3_32","9_11","9_9"}, <10> {"0_32","10_10","10_11","3_32","9_11"}, <11> {"0_32","10_11","11_11","3_32","9_11"}, <12> {"0_32","12_12","3_32"}, <13> {"0_32","13_13","3_32"}, <14> {"0_32","14_14","14_31","3_32"}, <15> {"0_32","14_31","15_15","3_32"}, <16> {"0_32","14_31","16_16","16_18","3_32"}, <17> {"0_32","14_31","16_18","17_17","17_18","3_32"}, <18> {"0_32","14_31","16_18","17_18","18_18","3_32"}, <19> {"0_32","14_31","19_19","19_31","3_32"}, <20> {"0_32","14_31","19_31","20_20","20_31","3_32"}, <21> {"0_32","14_31","19_31","20_31","21_21","3_32"}, <22> {"0_32","14_31","19_31","20_31","22_22","3_32"}, <23> {"0_32","14_31","19_31","20_31","23_23","3_32"}, <24> {"0_32","14_31","19_31","20_31","24_24","24_31","3_32"}, <25> {"0_32","14_31","19_31","20_31","24_31","25_25","25_31","3_32"}, <26> {"0_32","14_31","19_31","20_31","24_31","25_31","26_26","3_32"}, <27> {"0_32","14_31","19_31","20_31","24_31","25_31","27_27","3_32"}, <28> {"0_32","14_31","19_31","20_31","24_31","25_31","28_28","3_32"}, <29> {"0_32","14_31","19_31","20_31","24_31","25_31","29_29","29_31","3_32"}, <30> {"0_32","14_31","19_31","20_31","24_31","25_31","29_31","30_30","30_31","3_32"}, <31> {"0_32","14_31","19_31","20_31","24_31","25_31","29_31","30_31","31_31","3_32"}, <32> {"0_32","32_32","3_32"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Quantity"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["People_by_origin"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Self_motion"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Self_motion"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Moving_in_place"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Inspecting"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Increment"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Text"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Attaching"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Contacting"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Roadways"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Quantity"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["People_by_origin"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Self_motion"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Self_motion"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Moving_in_place"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Inspecting"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Increment"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Text"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Attaching"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Contacting"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Roadways"] do sum <s> in Spans : z10[r,s] == 1;
#pairwise exclusion constraint
set Exc0 := {<"Individuals","Mass">};
subto exclusion0: forall <ri,rj> in Exc0 do z0[ri,"-1_-1"] + z0[rj,"-1_-1"] >= 1;
set Exc2 := {<"Area","Direction">,<"Area","Goal">,<"Area","Path">,<"Area","Source">};
subto exclusion2: forall <ri,rj> in Exc2 do z2[ri,"-1_-1"] + z2[rj,"-1_-1"] >= 1;
set Exc3 := {<"Area","Direction">,<"Area","Goal">,<"Area","Path">,<"Area","Source">};
subto exclusion3: forall <ri,rj> in Exc3 do z3[ri,"-1_-1"] + z3[rj,"-1_-1"] >= 1;
set Exc8 := {<"Item","Items">,<"Goal","Items">};
subto exclusion8: forall <ri,rj> in Exc8 do z8[ri,"-1_-1"] + z8[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
set Reqr8 := {<"Goal","Item">};
subto require8: forall <ri,rj> in Reqr8 do z8[ri,"-1_-1"] - z8[rj,"-1_-1"] == 0;
