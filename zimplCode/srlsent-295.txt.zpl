# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Request","Taking","Quantity","Being_necessary","Intentionally_act","Body_decoration","Resolve_problem","Quantity","Usefulness","Point_of_dispute","Inclusion","Cognitive_connection","Position_on_a_scale","Degree_of_processing","Substance","Manufacturing","Substance"};
set Roles[Frames] :=  <"Request"> {"Addressee","Containing_event","Medium","Topic","Speaker","Time","Message","Iteration","Means","Manner","Depictive"}, <"Taking"> {"Place","Agent","Containing_event","Theme","Source","Manner","Time","Reason","Purpose"}, <"Quantity"> {"Mass","Q_Prop","Degree","Quantity","Individuals"}, <"Being_necessary"> {"Dependent","Requirement","Degree","Domain","Condition","Time","Required_entity","Reason","Descriptor","Dependent_individual"}, <"Intentionally_act"> {"Purpose","Result","Time","Place","Frequency","Means","Event_dscription","Period_of_iterations","Domain","Act","Particular_iteration","Manner","Explanation","Agent"}, <"Body_decoration"> {"Picture","Decorated_individual","Type","Use","Body_location","Decoration","Decoration_desriptor"}, <"Resolve_problem"> {"Duration","Medium","Role","Means","Problem","Circumstances","Agent","Manner","Resultant_Situation","Outcome","Instrument","Cause","Time","Beneficiary","Degree","Place","Frequency","Containing_Event","Co_participant"}, <"Quantity"> {"Mass","Q_Prop","Degree","Quantity","Individuals"}, <"Usefulness"> {"Purpose","Domain","Time","Degree","Entity"}, <"Point_of_dispute"> {"Status","Descriptor","Group","Domain","Question"}, <"Inclusion"> {"Purpose","Total","Contrast_set","Subregion","Frequency","Part"}, <"Cognitive_connection"> {"Point_of_view","Circumstances","Specification","Concept_2","Concept_1","Degree","Concepts"}, <"Position_on_a_scale"> {"Domain","Value","Item","Variable","Degree"}, <"Degree_of_processing"> {"Degree","Material"}, <"Substance"> {"Source","Type","Use","Descriptor","Substance","Constituents"}, <"Manufacturing"> {"Purpose","Circumstances","Time","Manufacturer","Instrument","Place","Frequency","Resource","Means","Locus","Consumer","Depictive","Factory","Product","Manner"}, <"Substance"> {"Source","Type","Use","Descriptor","Substance","Constituents"};
set Spans := {"-1_-1","0_0","0_1","0_53","10_10","10_52","11_11","11_13","11_17","12_12","13_13","14_14","14_17","15_15","15_17","16_16","17_17","18_18","18_19","18_52","19_19","19_52","1_1","20_20","20_52","21_21","22_22","23_23","24_24","25_25","25_52","26_26","26_52","27_27","27_52","28_28","28_52","29_29","29_39","29_52","2_2","2_53","30_30","30_39","31_31","31_32","31_34","31_39","32_32","33_33","34_34","35_35","35_36","35_37","36_36","36_37","37_37","38_38","39_39","3_3","3_4","40_40","41_41","41_43","41_46","41_48","42_42","43_43","44_44","45_45","46_46","47_47","47_48","48_48","49_49","4_4","50_50","51_51","52_52","53_53","5_5","5_52","6_6","7_7","8_8","9_52","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Request"]] binary;
var z1[Assignment["Taking"]] binary;
var z2[Assignment["Quantity"]] binary;
var z3[Assignment["Being_necessary"]] binary;
var z4[Assignment["Intentionally_act"]] binary;
var z5[Assignment["Body_decoration"]] binary;
var z6[Assignment["Resolve_problem"]] binary;
var z7[Assignment["Quantity"]] binary;
var z8[Assignment["Usefulness"]] binary;
var z9[Assignment["Point_of_dispute"]] binary;
var z10[Assignment["Inclusion"]] binary;
var z11[Assignment["Cognitive_connection"]] binary;
var z12[Assignment["Position_on_a_scale"]] binary;
var z13[Assignment["Degree_of_processing"]] binary;
var z14[Assignment["Substance"]] binary;
var z15[Assignment["Manufacturing"]] binary;
var z16[Assignment["Substance"]] binary;
param probabilities0[Assignment["Request"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Taking"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Quantity"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Being_necessary"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Intentionally_act"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Body_decoration"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Resolve_problem"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Quantity"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Usefulness"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Point_of_dispute"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Inclusion"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;
param probabilities11[Assignment["Cognitive_connection"]] := read "../frameData/frame11.txt" as "<1s,2s> 3n" skip 2;
param probabilities12[Assignment["Position_on_a_scale"]] := read "../frameData/frame12.txt" as "<1s,2s> 3n" skip 2;
param probabilities13[Assignment["Degree_of_processing"]] := read "../frameData/frame13.txt" as "<1s,2s> 3n" skip 2;
param probabilities14[Assignment["Substance"]] := read "../frameData/frame14.txt" as "<1s,2s> 3n" skip 2;
param probabilities15[Assignment["Manufacturing"]] := read "../frameData/frame15.txt" as "<1s,2s> 3n" skip 2;
param probabilities16[Assignment["Substance"]] := read "../frameData/frame16.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Request"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Taking"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Quantity"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Being_necessary"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Intentionally_act"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Body_decoration"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Resolve_problem"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Quantity"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Usefulness"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Point_of_dispute"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Inclusion"] : probabilities10[r,s] * z10[r,s])+(sum <r,s> in Assignment["Cognitive_connection"] : probabilities11[r,s] * z11[r,s])+(sum <r,s> in Assignment["Position_on_a_scale"] : probabilities12[r,s] * z12[r,s])+(sum <r,s> in Assignment["Degree_of_processing"] : probabilities13[r,s] * z13[r,s])+(sum <r,s> in Assignment["Substance"] : probabilities14[r,s] * z14[r,s])+(sum <r,s> in Assignment["Manufacturing"] : probabilities15[r,s] * z15[r,s])+(sum <r,s> in Assignment["Substance"] : probabilities16[r,s] * z16[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 53};
set G[I] := <0> {"0_0","0_1","0_53"}, <1> {"0_1","0_53","1_1"}, <2> {"0_53","2_2","2_53"}, <3> {"0_53","2_53","3_3","3_4"}, <4> {"0_53","2_53","3_4","4_4"}, <5> {"0_53","2_53","5_5","5_52"}, <6> {"0_53","2_53","5_52","6_6"}, <7> {"0_53","2_53","5_52","7_7"}, <8> {"0_53","2_53","5_52","8_8"}, <9> {"0_53","2_53","5_52","9_52","9_9"}, <10> {"0_53","10_10","10_52","2_53","5_52","9_52"}, <11> {"0_53","10_52","11_11","11_13","11_17","2_53","5_52","9_52"}, <12> {"0_53","10_52","11_13","11_17","12_12","2_53","5_52","9_52"}, <13> {"0_53","10_52","11_13","11_17","13_13","2_53","5_52","9_52"}, <14> {"0_53","10_52","11_17","14_14","14_17","2_53","5_52","9_52"}, <15> {"0_53","10_52","11_17","14_17","15_15","15_17","2_53","5_52","9_52"}, <16> {"0_53","10_52","11_17","14_17","15_17","16_16","2_53","5_52","9_52"}, <17> {"0_53","10_52","11_17","14_17","15_17","17_17","2_53","5_52","9_52"}, <18> {"0_53","10_52","18_18","18_19","18_52","2_53","5_52","9_52"}, <19> {"0_53","10_52","18_19","18_52","19_19","19_52","2_53","5_52","9_52"}, <20> {"0_53","10_52","18_52","19_52","20_20","20_52","2_53","5_52","9_52"}, <21> {"0_53","10_52","18_52","19_52","20_52","21_21","2_53","5_52","9_52"}, <22> {"0_53","10_52","18_52","19_52","20_52","22_22","2_53","5_52","9_52"}, <23> {"0_53","10_52","18_52","19_52","20_52","23_23","2_53","5_52","9_52"}, <24> {"0_53","10_52","18_52","19_52","20_52","24_24","2_53","5_52","9_52"}, <25> {"0_53","10_52","18_52","19_52","20_52","25_25","25_52","2_53","5_52","9_52"}, <26> {"0_53","10_52","18_52","19_52","20_52","25_52","26_26","26_52","2_53","5_52","9_52"}, <27> {"0_53","10_52","18_52","19_52","20_52","25_52","26_52","27_27","27_52","2_53","5_52","9_52"}, <28> {"0_53","10_52","18_52","19_52","20_52","25_52","26_52","27_52","28_28","28_52","2_53","5_52","9_52"}, <29> {"0_53","10_52","18_52","19_52","20_52","25_52","26_52","27_52","28_52","29_29","29_39","29_52","2_53","5_52","9_52"}, <30> {"0_53","10_52","18_52","19_52","20_52","25_52","26_52","27_52","28_52","29_39","29_52","2_53","30_30","30_39","5_52","9_52"}, <31> {"0_53","10_52","18_52","19_52","20_52","25_52","26_52","27_52","28_52","29_39","29_52","2_53","30_39","31_31","31_32","31_34","31_39","5_52","9_52"}, <32> {"0_53","10_52","18_52","19_52","20_52","25_52","26_52","27_52","28_52","29_39","29_52","2_53","30_39","31_32","31_34","31_39","32_32","5_52","9_52"}, <33> {"0_53","10_52","18_52","19_52","20_52","25_52","26_52","27_52","28_52","29_39","29_52","2_53","30_39","31_34","31_39","33_33","5_52","9_52"}, <34> {"0_53","10_52","18_52","19_52","20_52","25_52","26_52","27_52","28_52","29_39","29_52","2_53","30_39","31_34","31_39","34_34","5_52","9_52"}, <35> {"0_53","10_52","18_52","19_52","20_52","25_52","26_52","27_52","28_52","29_39","29_52","2_53","30_39","31_39","35_35","35_36","35_37","5_52","9_52"}, <36> {"0_53","10_52","18_52","19_52","20_52","25_52","26_52","27_52","28_52","29_39","29_52","2_53","30_39","31_39","35_36","35_37","36_36","36_37","5_52","9_52"}, <37> {"0_53","10_52","18_52","19_52","20_52","25_52","26_52","27_52","28_52","29_39","29_52","2_53","30_39","31_39","35_37","36_37","37_37","5_52","9_52"}, <38> {"0_53","10_52","18_52","19_52","20_52","25_52","26_52","27_52","28_52","29_39","29_52","2_53","30_39","31_39","38_38","5_52","9_52"}, <39> {"0_53","10_52","18_52","19_52","20_52","25_52","26_52","27_52","28_52","29_39","29_52","2_53","30_39","31_39","39_39","5_52","9_52"}, <40> {"0_53","10_52","18_52","19_52","20_52","25_52","26_52","27_52","28_52","29_52","2_53","40_40","5_52","9_52"}, <41> {"0_53","10_52","18_52","19_52","20_52","25_52","26_52","27_52","28_52","29_52","2_53","41_41","41_43","41_46","41_48","5_52","9_52"}, <42> {"0_53","10_52","18_52","19_52","20_52","25_52","26_52","27_52","28_52","29_52","2_53","41_43","41_46","41_48","42_42","5_52","9_52"}, <43> {"0_53","10_52","18_52","19_52","20_52","25_52","26_52","27_52","28_52","29_52","2_53","41_43","41_46","41_48","43_43","5_52","9_52"}, <44> {"0_53","10_52","18_52","19_52","20_52","25_52","26_52","27_52","28_52","29_52","2_53","41_46","41_48","44_44","5_52","9_52"}, <45> {"0_53","10_52","18_52","19_52","20_52","25_52","26_52","27_52","28_52","29_52","2_53","41_46","41_48","45_45","5_52","9_52"}, <46> {"0_53","10_52","18_52","19_52","20_52","25_52","26_52","27_52","28_52","29_52","2_53","41_46","41_48","46_46","5_52","9_52"}, <47> {"0_53","10_52","18_52","19_52","20_52","25_52","26_52","27_52","28_52","29_52","2_53","41_48","47_47","47_48","5_52","9_52"}, <48> {"0_53","10_52","18_52","19_52","20_52","25_52","26_52","27_52","28_52","29_52","2_53","41_48","47_48","48_48","5_52","9_52"}, <49> {"0_53","10_52","18_52","19_52","20_52","25_52","26_52","27_52","28_52","29_52","2_53","49_49","5_52","9_52"}, <50> {"0_53","10_52","18_52","19_52","20_52","25_52","26_52","27_52","28_52","29_52","2_53","50_50","5_52","9_52"}, <51> {"0_53","10_52","18_52","19_52","20_52","25_52","26_52","27_52","28_52","29_52","2_53","51_51","5_52","9_52"}, <52> {"0_53","10_52","18_52","19_52","20_52","25_52","26_52","27_52","28_52","29_52","2_53","52_52","5_52","9_52"}, <53> {"0_53","2_53","53_53"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Request"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Taking"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Quantity"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Being_necessary"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Intentionally_act"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Body_decoration"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Resolve_problem"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Quantity"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Usefulness"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Point_of_dispute"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Inclusion"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
subto overlap11: forall <i> in I do 
 sum <r> in Roles["Cognitive_connection"] do 
 sum <s> in G[i] do z11[r,s] <= 1;
subto overlap12: forall <i> in I do 
 sum <r> in Roles["Position_on_a_scale"] do 
 sum <s> in G[i] do z12[r,s] <= 1;
subto overlap13: forall <i> in I do 
 sum <r> in Roles["Degree_of_processing"] do 
 sum <s> in G[i] do z13[r,s] <= 1;
subto overlap14: forall <i> in I do 
 sum <r> in Roles["Substance"] do 
 sum <s> in G[i] do z14[r,s] <= 1;
subto overlap15: forall <i> in I do 
 sum <r> in Roles["Manufacturing"] do 
 sum <s> in G[i] do z15[r,s] <= 1;
subto overlap16: forall <i> in I do 
 sum <r> in Roles["Substance"] do 
 sum <s> in G[i] do z16[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Request"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Taking"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Quantity"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Being_necessary"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Intentionally_act"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Body_decoration"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Resolve_problem"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Quantity"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Usefulness"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Point_of_dispute"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Inclusion"] do sum <s> in Spans : z10[r,s] == 1;
subto unique11: forall <r> in Roles["Cognitive_connection"] do sum <s> in Spans : z11[r,s] == 1;
subto unique12: forall <r> in Roles["Position_on_a_scale"] do sum <s> in Spans : z12[r,s] == 1;
subto unique13: forall <r> in Roles["Degree_of_processing"] do sum <s> in Spans : z13[r,s] == 1;
subto unique14: forall <r> in Roles["Substance"] do sum <s> in Spans : z14[r,s] == 1;
subto unique15: forall <r> in Roles["Manufacturing"] do sum <s> in Spans : z15[r,s] == 1;
subto unique16: forall <r> in Roles["Substance"] do sum <s> in Spans : z16[r,s] == 1;
#pairwise exclusion constraint
set Exc2 := {<"Individuals","Mass">};
subto exclusion2: forall <ri,rj> in Exc2 do z2[ri,"-1_-1"] + z2[rj,"-1_-1"] >= 1;
set Exc6 := {<"Agent","Cause">};
subto exclusion6: forall <ri,rj> in Exc6 do z6[ri,"-1_-1"] + z6[rj,"-1_-1"] >= 1;
set Exc7 := {<"Individuals","Mass">};
subto exclusion7: forall <ri,rj> in Exc7 do z7[ri,"-1_-1"] + z7[rj,"-1_-1"] >= 1;
set Exc11 := {<"Concept_2","Concepts">,<"Concept_1","Concepts">};
subto exclusion11: forall <ri,rj> in Exc11 do z11[ri,"-1_-1"] + z11[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
