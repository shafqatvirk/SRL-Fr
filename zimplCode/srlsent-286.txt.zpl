# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Process_start","Calendric_unit","Activity_start","Weapon","Attack"};
set Roles[Frames] :=  <"Process_start"> {"Place","Initial_subevent","Manner","Time","Reason","Depictive","Frequency","Event"}, <"Calendric_unit"> {"Relative_time","Unit","Count","Name","Salient_event","Whole"}, <"Activity_start"> {"Purpose","Circumstances","Subevent","Depictive","Containing_event","Place","Particular_iteration","Activity","Event_description","Manner","Time","Means","Concessive","Explanation","Agent"}, <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Attack"> {"Particular_iteration","Iteration","Event_description","Means","Depictive","Circumstances","Manner","Result","Explanation","Time","Source","Containing_event","Place","Re_encoding","Weapon","Purpose","Victim","Path","Assailant"};
set Spans := {"-1_-1","0_0","0_14","0_3","10_10","10_13","11_11","11_13","12_12","13_13","14_14","1_1","1_3","2_2","2_3","3_3","4_4","5_5","6_6","7_13","7_7","7_9","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Process_start"]] binary;
var z1[Assignment["Calendric_unit"]] binary;
var z2[Assignment["Activity_start"]] binary;
var z3[Assignment["Weapon"]] binary;
var z4[Assignment["Attack"]] binary;
param probabilities0[Assignment["Process_start"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Calendric_unit"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Activity_start"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Weapon"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Attack"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Process_start"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Calendric_unit"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Activity_start"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Weapon"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Attack"] : probabilities4[r,s] * z4[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 14};
set G[I] := <0> {"0_0","0_14","0_3"}, <1> {"0_14","0_3","1_1","1_3"}, <2> {"0_14","0_3","1_3","2_2","2_3"}, <3> {"0_14","0_3","1_3","2_3","3_3"}, <4> {"0_14","4_4"}, <5> {"0_14","5_5"}, <6> {"0_14","6_6"}, <7> {"0_14","7_13","7_7","7_9"}, <8> {"0_14","7_13","7_9","8_8"}, <9> {"0_14","7_13","7_9","9_9"}, <10> {"0_14","10_10","10_13","7_13"}, <11> {"0_14","10_13","11_11","11_13","7_13"}, <12> {"0_14","10_13","11_13","12_12","7_13"}, <13> {"0_14","10_13","11_13","13_13","7_13"}, <14> {"0_14","14_14"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Process_start"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Calendric_unit"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Activity_start"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Attack"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Process_start"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Calendric_unit"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Activity_start"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Weapon"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Attack"] do sum <s> in Spans : z4[r,s] == 1;
#pairwise exclusion constraint
#pairwise requirement constraint
