# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Certainty","Dimension","Substance","Causation","Dimension","Manufacturing","Hostile_encounter","Active_substance","Capability"};
set Roles[Frames] :=  <"Certainty"> {"Cognizer","Topic","Content","Manner","Explanation","Degree","Expressor","Concessive"}, <"Dimension"> {"Object","Domain","Measurement","Dimension","Location"}, <"Substance"> {"Source","Type","Use","Descriptor","Substance","Constituents"}, <"Causation"> {"Circumstances","Time","Actor","Place","Frequency","Means","Effect","Cause","Reason","Affected","Manner","Concessive","Explanation"}, <"Dimension"> {"Object","Domain","Measurement","Dimension","Location"}, <"Manufacturing"> {"Purpose","Circumstances","Time","Manufacturer","Instrument","Place","Frequency","Resource","Means","Locus","Consumer","Depictive","Factory","Product","Manner"}, <"Hostile_encounter"> {"Purpose","Result","Depictive","Instrument","Place","Degree","Means","Internal_cause","Reason","Particular_iteration","Duration","Sides","Issue","Side_2","Side_1","Manner","Time"}, <"Active_substance"> {"Name","Type","Substance","Descriptor","Effect"}, <"Capability"> {"Degree","Status","Entity","Relevant_feature","Circumstances","Role","Event","Cause"};
set Spans := {"-1_-1","0_0","0_1","0_2","0_37","10_10","10_11","11_11","12_12","13_13","14_14","15_15","16_16","17_17","18_18","18_22","18_36","19_19","1_1","1_2","20_20","21_21","22_22","23_23","23_36","24_24","24_26","24_36","25_25","26_26","27_27","27_36","28_28","29_29","2_2","30_30","30_31","30_36","31_31","31_36","32_32","32_33","32_36","33_33","34_34","34_36","35_35","35_36","36_36","37_37","3_3","4_13","4_15","4_16","4_4","4_6","4_8","5_5","6_6","7_7","7_8","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Certainty"]] binary;
var z1[Assignment["Dimension"]] binary;
var z2[Assignment["Substance"]] binary;
var z3[Assignment["Causation"]] binary;
var z4[Assignment["Dimension"]] binary;
var z5[Assignment["Manufacturing"]] binary;
var z6[Assignment["Hostile_encounter"]] binary;
var z7[Assignment["Active_substance"]] binary;
var z8[Assignment["Capability"]] binary;
param probabilities0[Assignment["Certainty"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Dimension"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Substance"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Causation"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Dimension"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Manufacturing"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Hostile_encounter"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Active_substance"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Capability"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Certainty"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Dimension"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Substance"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Causation"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Dimension"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Manufacturing"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Hostile_encounter"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Active_substance"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Capability"] : probabilities8[r,s] * z8[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 37};
set G[I] := <0> {"0_0","0_1","0_2","0_37"}, <1> {"0_1","0_2","0_37","1_1","1_2"}, <2> {"0_2","0_37","1_2","2_2"}, <3> {"0_37","3_3"}, <4> {"0_37","4_13","4_15","4_16","4_4","4_6","4_8"}, <5> {"0_37","4_13","4_15","4_16","4_6","4_8","5_5"}, <6> {"0_37","4_13","4_15","4_16","4_6","4_8","6_6"}, <7> {"0_37","4_13","4_15","4_16","4_8","7_7","7_8"}, <8> {"0_37","4_13","4_15","4_16","4_8","7_8","8_8"}, <9> {"0_37","4_13","4_15","4_16","9_9"}, <10> {"0_37","10_10","10_11","4_13","4_15","4_16"}, <11> {"0_37","10_11","11_11","4_13","4_15","4_16"}, <12> {"0_37","12_12","4_13","4_15","4_16"}, <13> {"0_37","13_13","4_13","4_15","4_16"}, <14> {"0_37","14_14","4_15","4_16"}, <15> {"0_37","15_15","4_15","4_16"}, <16> {"0_37","16_16","4_16"}, <17> {"0_37","17_17"}, <18> {"0_37","18_18","18_22","18_36"}, <19> {"0_37","18_22","18_36","19_19"}, <20> {"0_37","18_22","18_36","20_20"}, <21> {"0_37","18_22","18_36","21_21"}, <22> {"0_37","18_22","18_36","22_22"}, <23> {"0_37","18_36","23_23","23_36"}, <24> {"0_37","18_36","23_36","24_24","24_26","24_36"}, <25> {"0_37","18_36","23_36","24_26","24_36","25_25"}, <26> {"0_37","18_36","23_36","24_26","24_36","26_26"}, <27> {"0_37","18_36","23_36","24_36","27_27","27_36"}, <28> {"0_37","18_36","23_36","24_36","27_36","28_28"}, <29> {"0_37","18_36","23_36","24_36","27_36","29_29"}, <30> {"0_37","18_36","23_36","24_36","27_36","30_30","30_31","30_36"}, <31> {"0_37","18_36","23_36","24_36","27_36","30_31","30_36","31_31","31_36"}, <32> {"0_37","18_36","23_36","24_36","27_36","30_36","31_36","32_32","32_33","32_36"}, <33> {"0_37","18_36","23_36","24_36","27_36","30_36","31_36","32_33","32_36","33_33"}, <34> {"0_37","18_36","23_36","24_36","27_36","30_36","31_36","32_36","34_34","34_36"}, <35> {"0_37","18_36","23_36","24_36","27_36","30_36","31_36","32_36","34_36","35_35","35_36"}, <36> {"0_37","18_36","23_36","24_36","27_36","30_36","31_36","32_36","34_36","35_36","36_36"}, <37> {"0_37","37_37"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Certainty"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Dimension"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Substance"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Causation"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Dimension"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Manufacturing"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Hostile_encounter"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Active_substance"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Capability"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Certainty"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Dimension"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Substance"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Causation"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Dimension"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Manufacturing"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Hostile_encounter"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Active_substance"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Capability"] do sum <s> in Spans : z8[r,s] == 1;
#pairwise exclusion constraint
set Exc6 := {<"Side_1","Sides">,<"Side_2","Sides">};
subto exclusion6: forall <ri,rj> in Exc6 do z6[ri,"-1_-1"] + z6[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
set Reqr6 := {<"Side_1","Side_2">};
subto require6: forall <ri,rj> in Reqr6 do z6[ri,"-1_-1"] - z6[rj,"-1_-1"] == 0;
