# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Public_services","Buildings","Scarcity","Judicial_body","System","Locale_by_use","Sent_items","Public_services","Contacting","Network","Roadways","Disgraceful_situation","State_of_entity"};
set Roles[Frames] :=  <"Public_services"> {"Domain","Target_group","Service_action","Institution"}, <"Buildings"> {"Type","Place","Function","Time_of_creation","Relative_location","Name","Building","Descriptor","Material","Builder"}, <"Scarcity"> {"Quantity","Time","Collection","Place","Circumstances","Degree"}, <"Judicial_body"> {"Rank","Judges","Judicial_body","Jurisdiction","Place"}, <"System"> {"Component_entities","Function","Possessor","Descriptor","Salient_entity","Complex"}, <"Locale_by_use"> {"Formational_cause","Use","Locale","Relative_location","Name","Container_possessor","Constituent_parts","Descriptor"}, <"Sent_items"> {"Recipient","Sent_item"}, <"Public_services"> {"Domain","Target_group","Service_action","Institution"}, <"Contacting"> {"Depictive","Topic","Time","Place","Addressee","Communicator","Communication","Reason","Intermediary","Location_of_communicator","Address","Frequency","Medium"}, <"Network"> {"Possessor","Descriptor","Connections","Network","Nodes"}, <"Roadways"> {"Characteristic","Length","Use","Frequency_of_use","Goal","Relative_location","Endpoints","Direction","Source","Material","Path","Roadway","Name","Abundant_entities"}, <"Disgraceful_situation"> {"State_of_affairs","Protagonist","Degree","Explanation"}, <"State_of_entity"> {"State","Entity","Evaluation"};
set Spans := {"-1_-1","0_0","0_1","0_2","0_26","10_10","11_11","12_12","13_13","13_14","14_14","15_15","16_16","16_17","17_17","18_18","19_19","1_1","1_2","20_20","21_21","22_22","23_23","23_25","24_24","24_25","25_25","26_26","2_2","3_3","4_21","4_4","4_5","5_5","6_20","6_21","6_6","7_7","7_9","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Public_services"]] binary;
var z1[Assignment["Buildings"]] binary;
var z2[Assignment["Scarcity"]] binary;
var z3[Assignment["Judicial_body"]] binary;
var z4[Assignment["System"]] binary;
var z5[Assignment["Locale_by_use"]] binary;
var z6[Assignment["Sent_items"]] binary;
var z7[Assignment["Public_services"]] binary;
var z8[Assignment["Contacting"]] binary;
var z9[Assignment["Network"]] binary;
var z10[Assignment["Roadways"]] binary;
var z11[Assignment["Disgraceful_situation"]] binary;
var z12[Assignment["State_of_entity"]] binary;
param probabilities0[Assignment["Public_services"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Buildings"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Scarcity"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Judicial_body"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["System"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Locale_by_use"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Sent_items"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Public_services"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Contacting"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Network"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Roadways"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;
param probabilities11[Assignment["Disgraceful_situation"]] := read "../frameData/frame11.txt" as "<1s,2s> 3n" skip 2;
param probabilities12[Assignment["State_of_entity"]] := read "../frameData/frame12.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Public_services"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Buildings"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Scarcity"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Judicial_body"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["System"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Locale_by_use"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Sent_items"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Public_services"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Contacting"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Network"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Roadways"] : probabilities10[r,s] * z10[r,s])+(sum <r,s> in Assignment["Disgraceful_situation"] : probabilities11[r,s] * z11[r,s])+(sum <r,s> in Assignment["State_of_entity"] : probabilities12[r,s] * z12[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 26};
set G[I] := <0> {"0_0","0_1","0_2","0_26"}, <1> {"0_1","0_2","0_26","1_1","1_2"}, <2> {"0_2","0_26","1_2","2_2"}, <3> {"0_26","3_3"}, <4> {"0_26","4_21","4_4","4_5"}, <5> {"0_26","4_21","4_5","5_5"}, <6> {"0_26","4_21","6_20","6_21","6_6"}, <7> {"0_26","4_21","6_20","6_21","7_7","7_9"}, <8> {"0_26","4_21","6_20","6_21","7_9","8_8"}, <9> {"0_26","4_21","6_20","6_21","7_9","9_9"}, <10> {"0_26","10_10","4_21","6_20","6_21"}, <11> {"0_26","11_11","4_21","6_20","6_21"}, <12> {"0_26","12_12","4_21","6_20","6_21"}, <13> {"0_26","13_13","13_14","4_21","6_20","6_21"}, <14> {"0_26","13_14","14_14","4_21","6_20","6_21"}, <15> {"0_26","15_15","4_21","6_20","6_21"}, <16> {"0_26","16_16","16_17","4_21","6_20","6_21"}, <17> {"0_26","16_17","17_17","4_21","6_20","6_21"}, <18> {"0_26","18_18","4_21","6_20","6_21"}, <19> {"0_26","19_19","4_21","6_20","6_21"}, <20> {"0_26","20_20","4_21","6_20","6_21"}, <21> {"0_26","21_21","4_21","6_21"}, <22> {"0_26","22_22"}, <23> {"0_26","23_23","23_25"}, <24> {"0_26","23_25","24_24","24_25"}, <25> {"0_26","23_25","24_25","25_25"}, <26> {"0_26","26_26"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Public_services"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Buildings"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Scarcity"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Judicial_body"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["System"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Locale_by_use"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Sent_items"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Public_services"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Contacting"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Network"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Roadways"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
subto overlap11: forall <i> in I do 
 sum <r> in Roles["Disgraceful_situation"] do 
 sum <s> in G[i] do z11[r,s] <= 1;
subto overlap12: forall <i> in I do 
 sum <r> in Roles["State_of_entity"] do 
 sum <s> in G[i] do z12[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Public_services"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Buildings"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Scarcity"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Judicial_body"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["System"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Locale_by_use"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Sent_items"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Public_services"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Contacting"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Network"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Roadways"] do sum <s> in Spans : z10[r,s] == 1;
subto unique11: forall <r> in Roles["Disgraceful_situation"] do sum <s> in Spans : z11[r,s] == 1;
subto unique12: forall <r> in Roles["State_of_entity"] do sum <s> in Spans : z12[r,s] == 1;
#pairwise exclusion constraint
#pairwise requirement constraint
