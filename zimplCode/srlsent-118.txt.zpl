# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Being_up_to_it","Change_position_on_a_scale","Taking","Natural_features","Roadways","Part_orientational","Locale_by_use"};
set Roles[Frames] :=  <"Being_up_to_it"> {"Circumstances","Entity","Activity"}, <"Change_position_on_a_scale"> {"Speed","Duration","Item","Value_range","Attribute","Correlate","Initial_value","Circumstances","Difference","Manner","Result","Final_state","Time","Period_of_iterations","Degree","Group","Final_correlate","Initial_correlate","Initial_state","Particular_iteration","Path","Final_value","Place"}, <"Taking"> {"Place","Agent","Containing_event","Theme","Source","Manner","Time","Reason","Purpose"}, <"Natural_features"> {"Type","Locale","Relative_location","Name","Formational_cause","Container_possessor","Constituent_parts","Descriptor"}, <"Roadways"> {"Characteristic","Length","Use","Frequency_of_use","Goal","Relative_location","Endpoints","Direction","Source","Material","Path","Roadway","Name","Abundant_entities"}, <"Part_orientational"> {"Part_Prop","Part","Whole"}, <"Locale_by_use"> {"Formational_cause","Use","Locale","Relative_location","Name","Container_possessor","Constituent_parts","Descriptor"};
set Spans := {"-1_-1","0_0","0_18","0_6","10_10","11_11","12_12","13_13","13_17","14_14","14_17","15_15","16_16","17_17","18_18","1_1","1_2","1_6","2_2","2_6","3_3","3_6","4_4","4_6","5_5","5_6","6_6","7_7","8_8","9_12","9_17","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Being_up_to_it"]] binary;
var z1[Assignment["Change_position_on_a_scale"]] binary;
var z2[Assignment["Taking"]] binary;
var z3[Assignment["Natural_features"]] binary;
var z4[Assignment["Roadways"]] binary;
var z5[Assignment["Part_orientational"]] binary;
var z6[Assignment["Locale_by_use"]] binary;
param probabilities0[Assignment["Being_up_to_it"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Change_position_on_a_scale"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Taking"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Natural_features"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Roadways"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Part_orientational"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Locale_by_use"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Being_up_to_it"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Change_position_on_a_scale"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Taking"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Natural_features"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Roadways"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Part_orientational"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Locale_by_use"] : probabilities6[r,s] * z6[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 18};
set G[I] := <0> {"0_0","0_18","0_6"}, <1> {"0_18","0_6","1_1","1_2","1_6"}, <2> {"0_18","0_6","1_2","1_6","2_2","2_6"}, <3> {"0_18","0_6","1_6","2_6","3_3","3_6"}, <4> {"0_18","0_6","1_6","2_6","3_6","4_4","4_6"}, <5> {"0_18","0_6","1_6","2_6","3_6","4_6","5_5","5_6"}, <6> {"0_18","0_6","1_6","2_6","3_6","4_6","5_6","6_6"}, <7> {"0_18","7_7"}, <8> {"0_18","8_8"}, <9> {"0_18","9_12","9_17","9_9"}, <10> {"0_18","10_10","9_12","9_17"}, <11> {"0_18","11_11","9_12","9_17"}, <12> {"0_18","12_12","9_12","9_17"}, <13> {"0_18","13_13","13_17","9_17"}, <14> {"0_18","13_17","14_14","14_17","9_17"}, <15> {"0_18","13_17","14_17","15_15","9_17"}, <16> {"0_18","13_17","14_17","16_16","9_17"}, <17> {"0_18","13_17","14_17","17_17","9_17"}, <18> {"0_18","18_18"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Being_up_to_it"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Change_position_on_a_scale"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Taking"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Natural_features"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Roadways"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Part_orientational"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Locale_by_use"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Being_up_to_it"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Change_position_on_a_scale"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Taking"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Natural_features"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Roadways"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Part_orientational"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Locale_by_use"] do sum <s> in Spans : z6[r,s] == 1;
#pairwise exclusion constraint
set Exc1 := {<"Initial_state","Value_range">,<"Final_value","Value_range">,<"Initial_value","Value_range">,<"Final_state","Value_range">};
subto exclusion1: forall <ri,rj> in Exc1 do z1[ri,"-1_-1"] + z1[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
