# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Natural_features","Measure_duration","Importance","Locale_by_use","Roadways","Becoming","Isolated_places","Age","Bringing","Network","Economy","Quantity","Natural_features","Arriving","Social_connection"};
set Roles[Frames] :=  <"Natural_features"> {"Type","Locale","Relative_location","Name","Formational_cause","Container_possessor","Constituent_parts","Descriptor"}, <"Measure_duration"> {"Agent","Count","Unit","Process"}, <"Importance"> {"Place","Undertaking","Explanation","Field","Time","Factor","Reason","Frequency","Degree","Interested_party"}, <"Locale_by_use"> {"Formational_cause","Use","Locale","Relative_location","Name","Container_possessor","Constituent_parts","Descriptor"}, <"Roadways"> {"Characteristic","Length","Use","Frequency_of_use","Goal","Relative_location","Endpoints","Direction","Source","Material","Path","Roadway","Name","Abundant_entities"}, <"Becoming"> {"Initial_category","Initial_state","Circumstances","Time","Final_state","Place","Duration_of_final_state","Cause","Group","Final_category","Entity","Transitional_period","Reason","Manner","Explanation"}, <"Isolated_places"> {"Place","Relative_location"}, <"Age"> {"Attribute","Degree","Entity","Time","Expressor","Duration","Age","Descriptor"}, <"Bringing"> {"Duration","Area","Constant_location","Theme","Means","Depictive","Agent","Manner","Explanation","Distance","Co_participant","Time","Source","Beneficiary","Degree","Place","Frequency","Goal","Purpose","Particular_iteration","Path","Carrier"}, <"Network"> {"Possessor","Descriptor","Connections","Network","Nodes"}, <"Economy"> {"Descriptor","Domain","Market_type","Political_region","Economy"}, <"Quantity"> {"Mass","Q_Prop","Degree","Quantity","Individuals"}, <"Natural_features"> {"Type","Locale","Relative_location","Name","Formational_cause","Container_possessor","Constituent_parts","Descriptor"}, <"Arriving"> {"Theme","Cotheme","Means","Depictive","Circumstances","Manner","Time","Source","Period_of_iterations","Degree","Event_description","Re_encoding","Goal","Purpose","Goal_conditions","Path","Frequency","Mode_of_transportation"}, <"Social_connection"> {"Type","Degree","Connection","Individual2","Individual1"};
set Spans := {"-1_-1","0_0","0_15","0_16","0_23","0_34","10_10","11_11","11_14","12_12","12_14","13_13","14_14","15_15","16_16","16_23","17_17","17_18","17_23","18_18","19_19","19_23","1_1","20_20","20_23","21_21","22_22","23_23","24_24","25_25","25_26","25_29","26_26","27_27","27_29","28_28","28_29","29_29","2_2","30_30","31_31","31_33","32_32","32_33","33_33","34_34","3_3","4_14","4_4","5_14","5_5","5_6","5_7","6_6","7_14","7_7","8_14","8_8","9_10","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Natural_features"]] binary;
var z1[Assignment["Measure_duration"]] binary;
var z2[Assignment["Importance"]] binary;
var z3[Assignment["Locale_by_use"]] binary;
var z4[Assignment["Roadways"]] binary;
var z5[Assignment["Becoming"]] binary;
var z6[Assignment["Isolated_places"]] binary;
var z7[Assignment["Age"]] binary;
var z8[Assignment["Bringing"]] binary;
var z9[Assignment["Network"]] binary;
var z10[Assignment["Economy"]] binary;
var z11[Assignment["Quantity"]] binary;
var z12[Assignment["Natural_features"]] binary;
var z13[Assignment["Arriving"]] binary;
var z14[Assignment["Social_connection"]] binary;
param probabilities0[Assignment["Natural_features"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Measure_duration"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Importance"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Locale_by_use"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Roadways"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Becoming"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Isolated_places"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Age"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Bringing"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Network"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Economy"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;
param probabilities11[Assignment["Quantity"]] := read "../frameData/frame11.txt" as "<1s,2s> 3n" skip 2;
param probabilities12[Assignment["Natural_features"]] := read "../frameData/frame12.txt" as "<1s,2s> 3n" skip 2;
param probabilities13[Assignment["Arriving"]] := read "../frameData/frame13.txt" as "<1s,2s> 3n" skip 2;
param probabilities14[Assignment["Social_connection"]] := read "../frameData/frame14.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Natural_features"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Measure_duration"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Importance"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Locale_by_use"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Roadways"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Becoming"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Isolated_places"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Age"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Bringing"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Network"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Economy"] : probabilities10[r,s] * z10[r,s])+(sum <r,s> in Assignment["Quantity"] : probabilities11[r,s] * z11[r,s])+(sum <r,s> in Assignment["Natural_features"] : probabilities12[r,s] * z12[r,s])+(sum <r,s> in Assignment["Arriving"] : probabilities13[r,s] * z13[r,s])+(sum <r,s> in Assignment["Social_connection"] : probabilities14[r,s] * z14[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 34};
set G[I] := <0> {"0_0","0_15","0_16","0_23","0_34"}, <1> {"0_15","0_16","0_23","0_34","1_1"}, <2> {"0_15","0_16","0_23","0_34","2_2"}, <3> {"0_15","0_16","0_23","0_34","3_3"}, <4> {"0_15","0_16","0_23","0_34","4_14","4_4"}, <5> {"0_15","0_16","0_23","0_34","4_14","5_14","5_5","5_6","5_7"}, <6> {"0_15","0_16","0_23","0_34","4_14","5_14","5_6","5_7","6_6"}, <7> {"0_15","0_16","0_23","0_34","4_14","5_14","5_7","7_14","7_7"}, <8> {"0_15","0_16","0_23","0_34","4_14","5_14","7_14","8_14","8_8"}, <9> {"0_15","0_16","0_23","0_34","4_14","5_14","7_14","8_14","9_10","9_9"}, <10> {"0_15","0_16","0_23","0_34","10_10","4_14","5_14","7_14","8_14","9_10"}, <11> {"0_15","0_16","0_23","0_34","11_11","11_14","4_14","5_14","7_14","8_14"}, <12> {"0_15","0_16","0_23","0_34","11_14","12_12","12_14","4_14","5_14","7_14","8_14"}, <13> {"0_15","0_16","0_23","0_34","11_14","12_14","13_13","4_14","5_14","7_14","8_14"}, <14> {"0_15","0_16","0_23","0_34","11_14","12_14","14_14","4_14","5_14","7_14","8_14"}, <15> {"0_15","0_16","0_23","0_34","15_15"}, <16> {"0_16","0_23","0_34","16_16","16_23"}, <17> {"0_23","0_34","16_23","17_17","17_18","17_23"}, <18> {"0_23","0_34","16_23","17_18","17_23","18_18"}, <19> {"0_23","0_34","16_23","17_23","19_19","19_23"}, <20> {"0_23","0_34","16_23","17_23","19_23","20_20","20_23"}, <21> {"0_23","0_34","16_23","17_23","19_23","20_23","21_21"}, <22> {"0_23","0_34","16_23","17_23","19_23","20_23","22_22"}, <23> {"0_23","0_34","16_23","17_23","19_23","20_23","23_23"}, <24> {"0_34","24_24"}, <25> {"0_34","25_25","25_26","25_29"}, <26> {"0_34","25_26","25_29","26_26"}, <27> {"0_34","25_29","27_27","27_29"}, <28> {"0_34","25_29","27_29","28_28","28_29"}, <29> {"0_34","25_29","27_29","28_29","29_29"}, <30> {"0_34","30_30"}, <31> {"0_34","31_31","31_33"}, <32> {"0_34","31_33","32_32","32_33"}, <33> {"0_34","31_33","32_33","33_33"}, <34> {"0_34","34_34"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Natural_features"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Measure_duration"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Importance"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Locale_by_use"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Roadways"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Becoming"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Isolated_places"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Age"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Bringing"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Network"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Economy"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
subto overlap11: forall <i> in I do 
 sum <r> in Roles["Quantity"] do 
 sum <s> in G[i] do z11[r,s] <= 1;
subto overlap12: forall <i> in I do 
 sum <r> in Roles["Natural_features"] do 
 sum <s> in G[i] do z12[r,s] <= 1;
subto overlap13: forall <i> in I do 
 sum <r> in Roles["Arriving"] do 
 sum <s> in G[i] do z13[r,s] <= 1;
subto overlap14: forall <i> in I do 
 sum <r> in Roles["Social_connection"] do 
 sum <s> in G[i] do z14[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Natural_features"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Measure_duration"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Importance"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Locale_by_use"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Roadways"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Becoming"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Isolated_places"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Age"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Bringing"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Network"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Economy"] do sum <s> in Spans : z10[r,s] == 1;
subto unique11: forall <r> in Roles["Quantity"] do sum <s> in Spans : z11[r,s] == 1;
subto unique12: forall <r> in Roles["Natural_features"] do sum <s> in Spans : z12[r,s] == 1;
subto unique13: forall <r> in Roles["Arriving"] do sum <s> in Spans : z13[r,s] == 1;
subto unique14: forall <r> in Roles["Social_connection"] do sum <s> in Spans : z14[r,s] == 1;
#pairwise exclusion constraint
set Exc2 := {<"Field","Interested_party">};
subto exclusion2: forall <ri,rj> in Exc2 do z2[ri,"-1_-1"] + z2[rj,"-1_-1"] >= 1;
set Exc5 := {<"Final_category","Final_state">};
subto exclusion5: forall <ri,rj> in Exc5 do z5[ri,"-1_-1"] + z5[rj,"-1_-1"] >= 1;
set Exc7 := {<"Entity","Expressor">,<"Age","Degree">};
subto exclusion7: forall <ri,rj> in Exc7 do z7[ri,"-1_-1"] + z7[rj,"-1_-1"] >= 1;
set Exc8 := {<"Area","Source">,<"Area","Goal">,<"Area","Path">};
subto exclusion8: forall <ri,rj> in Exc8 do z8[ri,"-1_-1"] + z8[rj,"-1_-1"] >= 1;
set Exc11 := {<"Individuals","Mass">};
subto exclusion11: forall <ri,rj> in Exc11 do z11[ri,"-1_-1"] + z11[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
set Reqr14 := {<"Individual1","Individual2">};
subto require14: forall <ri,rj> in Reqr14 do z14[ri,"-1_-1"] - z14[rj,"-1_-1"] == 0;
