# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Part_orientational","Political_locales","Cardinal_numbers","Age","Dimension","Roadways","Defend","Aggregate","Mental_stimulus_stimulus_focus","Custom","Locale_by_use"};
set Roles[Frames] :=  <"Part_orientational"> {"Part_Prop","Part","Whole"}, <"Political_locales"> {"Relative_location","Constituent_parts","Container_possessor","Descriptor","Name","Population","Locale"}, <"Cardinal_numbers"> {"Precision","Number","Multiplier","Entity"}, <"Age"> {"Attribute","Degree","Entity","Time","Expressor","Duration","Age","Descriptor"}, <"Dimension"> {"Object","Domain","Measurement","Dimension","Location"}, <"Roadways"> {"Characteristic","Length","Use","Frequency_of_use","Goal","Relative_location","Endpoints","Direction","Source","Material","Path","Roadway","Name","Abundant_entities"}, <"Defend"> {"Defender","Place","Instrument","Manner","Victim","Assailant","Means","Purpose","Depictive","Reason"}, <"Aggregate"> {"Individuals","AggregateProperty","Aggregate","Name","Domain","Container_possessor"}, <"Mental_stimulus_stimulus_focus"> {"Experiencer","Degree","Stimulus","Frequency"}, <"Custom"> {"Protagonist","Place","Descriptor","Behavior","Society","Domain"}, <"Locale_by_use"> {"Formational_cause","Use","Locale","Relative_location","Name","Container_possessor","Constituent_parts","Descriptor"};
set Spans := {"-1_-1","0_0","0_10","0_2","0_25","0_3","10_10","11_11","12_12","13_13","13_15","14_14","15_15","16_16","17_17","17_18","17_24","18_18","19_19","19_24","1_1","20_20","20_24","21_21","22_22","23_23","24_24","25_25","2_2","3_10","3_3","4_10","4_4","5_10","5_5","6_10","6_6","6_8","7_7","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Part_orientational"]] binary;
var z1[Assignment["Political_locales"]] binary;
var z2[Assignment["Cardinal_numbers"]] binary;
var z3[Assignment["Age"]] binary;
var z4[Assignment["Dimension"]] binary;
var z5[Assignment["Roadways"]] binary;
var z6[Assignment["Defend"]] binary;
var z7[Assignment["Aggregate"]] binary;
var z8[Assignment["Mental_stimulus_stimulus_focus"]] binary;
var z9[Assignment["Custom"]] binary;
var z10[Assignment["Locale_by_use"]] binary;
param probabilities0[Assignment["Part_orientational"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Political_locales"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Cardinal_numbers"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Age"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Dimension"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Roadways"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Defend"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Aggregate"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Mental_stimulus_stimulus_focus"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Custom"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Locale_by_use"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Part_orientational"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Political_locales"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Cardinal_numbers"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Age"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Dimension"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Roadways"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Defend"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Aggregate"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Mental_stimulus_stimulus_focus"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Custom"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Locale_by_use"] : probabilities10[r,s] * z10[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 25};
set G[I] := <0> {"0_0","0_10","0_2","0_25","0_3"}, <1> {"0_10","0_2","0_25","0_3","1_1"}, <2> {"0_10","0_2","0_25","0_3","2_2"}, <3> {"0_10","0_25","0_3","3_10","3_3"}, <4> {"0_10","0_25","3_10","4_10","4_4"}, <5> {"0_10","0_25","3_10","4_10","5_10","5_5"}, <6> {"0_10","0_25","3_10","4_10","5_10","6_10","6_6","6_8"}, <7> {"0_10","0_25","3_10","4_10","5_10","6_10","6_8","7_7"}, <8> {"0_10","0_25","3_10","4_10","5_10","6_10","6_8","8_8"}, <9> {"0_10","0_25","3_10","4_10","5_10","6_10","9_9"}, <10> {"0_10","0_25","10_10","3_10","4_10","5_10","6_10"}, <11> {"0_25","11_11"}, <12> {"0_25","12_12"}, <13> {"0_25","13_13","13_15"}, <14> {"0_25","13_15","14_14"}, <15> {"0_25","13_15","15_15"}, <16> {"0_25","16_16"}, <17> {"0_25","17_17","17_18","17_24"}, <18> {"0_25","17_18","17_24","18_18"}, <19> {"0_25","17_24","19_19","19_24"}, <20> {"0_25","17_24","19_24","20_20","20_24"}, <21> {"0_25","17_24","19_24","20_24","21_21"}, <22> {"0_25","17_24","19_24","20_24","22_22"}, <23> {"0_25","17_24","19_24","20_24","23_23"}, <24> {"0_25","17_24","19_24","20_24","24_24"}, <25> {"0_25","25_25"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Part_orientational"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Political_locales"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Cardinal_numbers"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Age"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Dimension"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Roadways"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Defend"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Aggregate"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Mental_stimulus_stimulus_focus"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Custom"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Locale_by_use"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Part_orientational"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Political_locales"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Cardinal_numbers"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Age"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Dimension"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Roadways"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Defend"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Aggregate"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Mental_stimulus_stimulus_focus"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Custom"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Locale_by_use"] do sum <s> in Spans : z10[r,s] == 1;
#pairwise exclusion constraint
set Exc3 := {<"Entity","Expressor">,<"Age","Degree">};
subto exclusion3: forall <ri,rj> in Exc3 do z3[ri,"-1_-1"] + z3[rj,"-1_-1"] >= 1;
set Exc9 := {<"Protagonist","Society">};
subto exclusion9: forall <ri,rj> in Exc9 do z9[ri,"-1_-1"] + z9[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
