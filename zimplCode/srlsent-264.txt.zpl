# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Attributed_information","Measure_mass","Attempt_suasion","Text","Adducing","Occupy_rank","Secrecy_status","Text","Commerce_sell","Relational_quantity","Cardinal_numbers","Substance","Using","Manufacturing","Stimulus_focus","Active_substance","Be_in_control","Substance"};
set Roles[Frames] :=  <"Attributed_information"> {"Text","Speaker","Proposition"}, <"Measure_mass"> {"Unit","Stuff","Count"}, <"Attempt_suasion"> {"Circumstances","Frequency","Depictive","Addressee","Degree","Group","Means","Speaker","Period_of_iterations","Topic","Re_encoding","Content","Manner","Explanation","Time","Medium"}, <"Text"> {"Topic","Honoree","Use","Author","Containing_text","Genre","Material","Components","Time_of_creation","Title","Text","Medium"}, <"Adducing"> {"Purpose","Circumstances","Depictive","Containing_event","Place","Addressee","Means","Role","Event_description","Frequency","Explanation","Manner","Specified_entity","Speaker","Time","Medium"}, <"Occupy_rank"> {"Item","Time","Rank","Dimension","Comparison_set"}, <"Secrecy_status"> {"Time","Phenomenon","Degree","Epistemic_stance","Cognizer"}, <"Text"> {"Topic","Honoree","Use","Author","Containing_text","Genre","Material","Components","Time_of_creation","Title","Text","Medium"}, <"Commerce_sell"> {"Purpose","Result","Unit","Purpose_of_Goods","Goods","Place","Seller","Rate","Manner","Relay","Buyer","Means","Time","Money"}, <"Relational_quantity"> {"Mass","Denoted_quantity","Reference_quantity","Individuals"}, <"Cardinal_numbers"> {"Precision","Number","Multiplier","Entity"}, <"Substance"> {"Source","Type","Use","Descriptor","Substance","Constituents"}, <"Using"> {"Duration","Depictive","Purpose","Means","Role","Circumstances","Agent","Manner","Explanation","Outcome","Instrument","Time","Period_of_iterations","Containing_event","Degree","Place","Frequency","Group"}, <"Manufacturing"> {"Purpose","Circumstances","Time","Manufacturer","Instrument","Place","Frequency","Resource","Means","Locus","Consumer","Depictive","Factory","Product","Manner"}, <"Stimulus_focus"> {"Stimulus","Parameter","Circumstances","Property","Experiencer","Comparison_set","Degree"}, <"Active_substance"> {"Name","Type","Substance","Descriptor","Effect"}, <"Be_in_control"> {"Time","Dependent_entity","Controlling_entity"}, <"Substance"> {"Source","Type","Use","Descriptor","Substance","Constituents"};
set Spans := {"-1_-1","0_0","0_10","0_30","10_10","11_11","12_12","13_13","14_14","14_18","14_29","15_15","15_16","16_16","17_17","18_18","19_19","19_29","1_1","1_10","20_20","20_29","21_21","21_29","22_22","22_23","22_29","23_23","23_29","24_24","24_25","24_29","25_25","26_26","27_27","28_28","29_29","2_2","30_30","3_10","3_3","3_4","4_10","4_4","5_10","5_5","6_10","6_6","7_7","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Attributed_information"]] binary;
var z1[Assignment["Measure_mass"]] binary;
var z2[Assignment["Attempt_suasion"]] binary;
var z3[Assignment["Text"]] binary;
var z4[Assignment["Adducing"]] binary;
var z5[Assignment["Occupy_rank"]] binary;
var z6[Assignment["Secrecy_status"]] binary;
var z7[Assignment["Text"]] binary;
var z8[Assignment["Commerce_sell"]] binary;
var z9[Assignment["Relational_quantity"]] binary;
var z10[Assignment["Cardinal_numbers"]] binary;
var z11[Assignment["Substance"]] binary;
var z12[Assignment["Using"]] binary;
var z13[Assignment["Manufacturing"]] binary;
var z14[Assignment["Stimulus_focus"]] binary;
var z15[Assignment["Active_substance"]] binary;
var z16[Assignment["Be_in_control"]] binary;
var z17[Assignment["Substance"]] binary;
param probabilities0[Assignment["Attributed_information"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Measure_mass"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Attempt_suasion"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Text"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Adducing"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Occupy_rank"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Secrecy_status"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Text"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Commerce_sell"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Relational_quantity"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Cardinal_numbers"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;
param probabilities11[Assignment["Substance"]] := read "../frameData/frame11.txt" as "<1s,2s> 3n" skip 2;
param probabilities12[Assignment["Using"]] := read "../frameData/frame12.txt" as "<1s,2s> 3n" skip 2;
param probabilities13[Assignment["Manufacturing"]] := read "../frameData/frame13.txt" as "<1s,2s> 3n" skip 2;
param probabilities14[Assignment["Stimulus_focus"]] := read "../frameData/frame14.txt" as "<1s,2s> 3n" skip 2;
param probabilities15[Assignment["Active_substance"]] := read "../frameData/frame15.txt" as "<1s,2s> 3n" skip 2;
param probabilities16[Assignment["Be_in_control"]] := read "../frameData/frame16.txt" as "<1s,2s> 3n" skip 2;
param probabilities17[Assignment["Substance"]] := read "../frameData/frame17.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Attributed_information"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Measure_mass"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Attempt_suasion"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Text"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Adducing"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Occupy_rank"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Secrecy_status"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Text"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Commerce_sell"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Relational_quantity"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Cardinal_numbers"] : probabilities10[r,s] * z10[r,s])+(sum <r,s> in Assignment["Substance"] : probabilities11[r,s] * z11[r,s])+(sum <r,s> in Assignment["Using"] : probabilities12[r,s] * z12[r,s])+(sum <r,s> in Assignment["Manufacturing"] : probabilities13[r,s] * z13[r,s])+(sum <r,s> in Assignment["Stimulus_focus"] : probabilities14[r,s] * z14[r,s])+(sum <r,s> in Assignment["Active_substance"] : probabilities15[r,s] * z15[r,s])+(sum <r,s> in Assignment["Be_in_control"] : probabilities16[r,s] * z16[r,s])+(sum <r,s> in Assignment["Substance"] : probabilities17[r,s] * z17[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 30};
set G[I] := <0> {"0_0","0_10","0_30"}, <1> {"0_10","0_30","1_1","1_10"}, <2> {"0_10","0_30","1_10","2_2"}, <3> {"0_10","0_30","1_10","3_10","3_3","3_4"}, <4> {"0_10","0_30","1_10","3_10","3_4","4_10","4_4"}, <5> {"0_10","0_30","1_10","3_10","4_10","5_10","5_5"}, <6> {"0_10","0_30","1_10","3_10","4_10","5_10","6_10","6_6"}, <7> {"0_10","0_30","1_10","3_10","4_10","5_10","6_10","7_7"}, <8> {"0_10","0_30","1_10","3_10","4_10","5_10","6_10","8_8"}, <9> {"0_10","0_30","1_10","3_10","4_10","5_10","6_10","9_9"}, <10> {"0_10","0_30","10_10","1_10","3_10","4_10","5_10","6_10"}, <11> {"0_30","11_11"}, <12> {"0_30","12_12"}, <13> {"0_30","13_13"}, <14> {"0_30","14_14","14_18","14_29"}, <15> {"0_30","14_18","14_29","15_15","15_16"}, <16> {"0_30","14_18","14_29","15_16","16_16"}, <17> {"0_30","14_18","14_29","17_17"}, <18> {"0_30","14_18","14_29","18_18"}, <19> {"0_30","14_29","19_19","19_29"}, <20> {"0_30","14_29","19_29","20_20","20_29"}, <21> {"0_30","14_29","19_29","20_29","21_21","21_29"}, <22> {"0_30","14_29","19_29","20_29","21_29","22_22","22_23","22_29"}, <23> {"0_30","14_29","19_29","20_29","21_29","22_23","22_29","23_23","23_29"}, <24> {"0_30","14_29","19_29","20_29","21_29","22_29","23_29","24_24","24_25","24_29"}, <25> {"0_30","14_29","19_29","20_29","21_29","22_29","23_29","24_25","24_29","25_25"}, <26> {"0_30","14_29","19_29","20_29","21_29","22_29","23_29","24_29","26_26"}, <27> {"0_30","14_29","19_29","20_29","21_29","22_29","23_29","24_29","27_27"}, <28> {"0_30","14_29","19_29","20_29","21_29","22_29","23_29","24_29","28_28"}, <29> {"0_30","14_29","19_29","20_29","21_29","22_29","23_29","24_29","29_29"}, <30> {"0_30","30_30"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Attributed_information"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Measure_mass"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Attempt_suasion"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Text"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Adducing"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Occupy_rank"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Secrecy_status"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Text"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Commerce_sell"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Relational_quantity"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Cardinal_numbers"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
subto overlap11: forall <i> in I do 
 sum <r> in Roles["Substance"] do 
 sum <s> in G[i] do z11[r,s] <= 1;
subto overlap12: forall <i> in I do 
 sum <r> in Roles["Using"] do 
 sum <s> in G[i] do z12[r,s] <= 1;
subto overlap13: forall <i> in I do 
 sum <r> in Roles["Manufacturing"] do 
 sum <s> in G[i] do z13[r,s] <= 1;
subto overlap14: forall <i> in I do 
 sum <r> in Roles["Stimulus_focus"] do 
 sum <s> in G[i] do z14[r,s] <= 1;
subto overlap15: forall <i> in I do 
 sum <r> in Roles["Active_substance"] do 
 sum <s> in G[i] do z15[r,s] <= 1;
subto overlap16: forall <i> in I do 
 sum <r> in Roles["Be_in_control"] do 
 sum <s> in G[i] do z16[r,s] <= 1;
subto overlap17: forall <i> in I do 
 sum <r> in Roles["Substance"] do 
 sum <s> in G[i] do z17[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Attributed_information"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Measure_mass"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Attempt_suasion"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Text"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Adducing"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Occupy_rank"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Secrecy_status"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Text"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Commerce_sell"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Relational_quantity"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Cardinal_numbers"] do sum <s> in Spans : z10[r,s] == 1;
subto unique11: forall <r> in Roles["Substance"] do sum <s> in Spans : z11[r,s] == 1;
subto unique12: forall <r> in Roles["Using"] do sum <s> in Spans : z12[r,s] == 1;
subto unique13: forall <r> in Roles["Manufacturing"] do sum <s> in Spans : z13[r,s] == 1;
subto unique14: forall <r> in Roles["Stimulus_focus"] do sum <s> in Spans : z14[r,s] == 1;
subto unique15: forall <r> in Roles["Active_substance"] do sum <s> in Spans : z15[r,s] == 1;
subto unique16: forall <r> in Roles["Be_in_control"] do sum <s> in Spans : z16[r,s] == 1;
subto unique17: forall <r> in Roles["Substance"] do sum <s> in Spans : z17[r,s] == 1;
#pairwise exclusion constraint
#pairwise requirement constraint
