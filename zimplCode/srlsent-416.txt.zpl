# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Leadership","Statement","Statement","Origin","Collaboration","Make_agreement_on_action","Weapon","Artifact"};
set Roles[Frames] :=  <"Leadership"> {"Domain","Leader","Type","Depictive","Descriptor","Degree","Means","Role","Activity","Duration","Governed","Manner","Time"}, <"Statement"> {"Message","Medium","Place","Iteration","Means","Depictive","Manner","Epistemic_stance","Speaker","Event_description","Addressee","Time","Containing_event","Degree","Occasion","Group","Frequency","Particular_iteration","Internal_cause","Topic"}, <"Statement"> {"Message","Medium","Place","Iteration","Means","Depictive","Manner","Epistemic_stance","Speaker","Event_description","Addressee","Time","Containing_event","Degree","Occasion","Group","Frequency","Particular_iteration","Internal_cause","Topic"}, <"Origin"> {"Entity","Origin"}, <"Collaboration"> {"Duration","Place","Undertaking","Partner_2","Partner_1","Time","Partners","Manner","Degree"}, <"Make_agreement_on_action"> {"Place","Party_2","Party_1","Medium","Topic","Manner","Time","Parties","Obligation","Descriptor"}, <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Artifact"> {"Creator","Type","Use","Material","Time_of_creation","Name","Artifact"};
set Spans := {"-1_-1","0_0","0_18","0_5","10_10","10_11","11_11","12_12","13_13","14_14","15_15","15_17","16_16","16_17","17_17","18_18","1_1","2_2","3_3","4_4","5_5","6_18","6_6","7_17","7_7","8_17","8_8","9_14","9_17","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Leadership"]] binary;
var z1[Assignment["Statement"]] binary;
var z2[Assignment["Statement"]] binary;
var z3[Assignment["Origin"]] binary;
var z4[Assignment["Collaboration"]] binary;
var z5[Assignment["Make_agreement_on_action"]] binary;
var z6[Assignment["Weapon"]] binary;
var z7[Assignment["Artifact"]] binary;
param probabilities0[Assignment["Leadership"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Statement"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Statement"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Origin"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Collaboration"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Make_agreement_on_action"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Weapon"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Artifact"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Leadership"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Statement"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Statement"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Origin"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Collaboration"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Make_agreement_on_action"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Weapon"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Artifact"] : probabilities7[r,s] * z7[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 18};
set G[I] := <0> {"0_0","0_18","0_5"}, <1> {"0_18","0_5","1_1"}, <2> {"0_18","0_5","2_2"}, <3> {"0_18","0_5","3_3"}, <4> {"0_18","0_5","4_4"}, <5> {"0_18","0_5","5_5"}, <6> {"0_18","6_18","6_6"}, <7> {"0_18","6_18","7_17","7_7"}, <8> {"0_18","6_18","7_17","8_17","8_8"}, <9> {"0_18","6_18","7_17","8_17","9_14","9_17","9_9"}, <10> {"0_18","10_10","10_11","6_18","7_17","8_17","9_14","9_17"}, <11> {"0_18","10_11","11_11","6_18","7_17","8_17","9_14","9_17"}, <12> {"0_18","12_12","6_18","7_17","8_17","9_14","9_17"}, <13> {"0_18","13_13","6_18","7_17","8_17","9_14","9_17"}, <14> {"0_18","14_14","6_18","7_17","8_17","9_14","9_17"}, <15> {"0_18","15_15","15_17","6_18","7_17","8_17","9_17"}, <16> {"0_18","15_17","16_16","16_17","6_18","7_17","8_17","9_17"}, <17> {"0_18","15_17","16_17","17_17","6_18","7_17","8_17","9_17"}, <18> {"0_18","18_18","6_18"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Leadership"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Statement"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Statement"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Origin"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Collaboration"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Make_agreement_on_action"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Artifact"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Leadership"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Statement"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Statement"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Origin"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Collaboration"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Make_agreement_on_action"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Weapon"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Artifact"] do sum <s> in Spans : z7[r,s] == 1;
#pairwise exclusion constraint
set Exc4 := {<"Partner_2","Partners">,<"Partner_1","Partners">};
subto exclusion4: forall <ri,rj> in Exc4 do z4[ri,"-1_-1"] + z4[rj,"-1_-1"] >= 1;
set Exc5 := {<"Parties","Party_2">,<"Parties","Party_1">};
subto exclusion5: forall <ri,rj> in Exc5 do z5[ri,"-1_-1"] + z5[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
set Reqr4 := {<"Partner_1","Partner_2">};
subto require4: forall <ri,rj> in Reqr4 do z4[ri,"-1_-1"] - z4[rj,"-1_-1"] == 0;
