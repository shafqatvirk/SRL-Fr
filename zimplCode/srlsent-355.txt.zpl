# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Proliferating_in_number","Part_orientational","Weapon","Weapon","Project","Resolve_problem","Verification","Emptying","Intentionally_act","Getting","Political_locales","Judgment_communication","Destroying","Political_locales","Capability","Verification","Evaluative_comparison","Quantity","Certainty"};
set Roles[Frames] :=  <"Proliferating_in_number"> {"Difference","Circumstances","Final_number","Time","Final_state","Place","Degree","Set","Final_correlate","Duration","Attribute","Initial_correlate","Initial_number","Manner","Speed"}, <"Part_orientational"> {"Part_Prop","Part","Whole"}, <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Project"> {"Salient_entity","Duration","Agent","Goal","Manner","Name","Project","Field","Descriptor","Activity"}, <"Resolve_problem"> {"Duration","Medium","Role","Means","Problem","Circumstances","Agent","Manner","Resultant_Situation","Outcome","Instrument","Cause","Time","Beneficiary","Degree","Place","Frequency","Containing_Event","Co_participant"}, <"Verification"> {"Purpose","Inspector","Time","Descriptor","Place","Degree","Means","Unconfirmed_content","Condition","Epistemic_stance","Manner","Explanation","Medium"}, <"Emptying"> {"Theme","Means","Depictive","Circumstances","Agent","Manner","Result","Explanation","Instrument","Cause","Time","Source","Containing_event","Degree","Place","Goal","Purpose","Path"}, <"Intentionally_act"> {"Purpose","Result","Time","Place","Frequency","Means","Event_dscription","Period_of_iterations","Domain","Act","Particular_iteration","Manner","Explanation","Agent"}, <"Getting"> {"Recipient","Result","Time","Place","Purpose","Means","Source","Theme","Reason","Beneficiary","Manner","Concessive"}, <"Political_locales"> {"Relative_location","Constituent_parts","Container_possessor","Descriptor","Name","Population","Locale"}, <"Judgment_communication"> {"Topic","Extent_of_acclaim","Place","Addressee","Degree","Grounds","Communicator","Means","Role","Evaluee","Expressor","Reason","Depictive","Frequency","Manner","Time","Medium"}, <"Destroying"> {"Purpose","Result","Undergoer","Depictive","Containing_event","Instrument","Place","Frequency","Degree","Destroyer","Means","Cause","Reason","Manner","Explanation","Time"}, <"Political_locales"> {"Relative_location","Constituent_parts","Container_possessor","Descriptor","Name","Population","Locale"}, <"Capability"> {"Degree","Status","Entity","Relevant_feature","Circumstances","Role","Event","Cause"}, <"Verification"> {"Purpose","Inspector","Time","Descriptor","Place","Degree","Means","Unconfirmed_content","Condition","Epistemic_stance","Manner","Explanation","Medium"}, <"Evaluative_comparison"> {"Attribute","Place","Degree","Standard_item","Profiled_item","Profiled_attribute","Comparison_set","Standard_attribute"}, <"Quantity"> {"Mass","Q_Prop","Degree","Quantity","Individuals"}, <"Certainty"> {"Cognizer","Topic","Content","Manner","Explanation","Degree","Expressor","Concessive"};
set Spans := {"-1_-1","0_0","0_22","0_40","10_10","11_11","12_12","12_22","13_13","13_14","13_22","14_14","14_22","15_15","15_22","16_16","16_18","16_22","17_17","18_18","19_19","19_22","1_1","1_11","1_12","1_22","1_3","20_20","20_22","21_21","21_22","22_22","23_23","24_24","24_30","25_25","25_30","26_26","26_28","26_30","27_27","28_28","29_29","2_2","30_30","31_31","32_32","33_33","33_39","34_34","34_39","35_35","35_37","35_39","36_36","37_37","38_38","38_39","39_39","3_3","40_40","4_11","4_4","5_11","5_5","5_7","6_6","7_7","8_10","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Proliferating_in_number"]] binary;
var z1[Assignment["Part_orientational"]] binary;
var z2[Assignment["Weapon"]] binary;
var z3[Assignment["Weapon"]] binary;
var z4[Assignment["Project"]] binary;
var z5[Assignment["Resolve_problem"]] binary;
var z6[Assignment["Verification"]] binary;
var z7[Assignment["Emptying"]] binary;
var z8[Assignment["Intentionally_act"]] binary;
var z9[Assignment["Getting"]] binary;
var z10[Assignment["Political_locales"]] binary;
var z11[Assignment["Judgment_communication"]] binary;
var z12[Assignment["Destroying"]] binary;
var z13[Assignment["Political_locales"]] binary;
var z14[Assignment["Capability"]] binary;
var z15[Assignment["Verification"]] binary;
var z16[Assignment["Evaluative_comparison"]] binary;
var z17[Assignment["Quantity"]] binary;
var z18[Assignment["Certainty"]] binary;
param probabilities0[Assignment["Proliferating_in_number"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Part_orientational"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Weapon"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Weapon"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Project"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Resolve_problem"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Verification"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Emptying"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Intentionally_act"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Getting"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Political_locales"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;
param probabilities11[Assignment["Judgment_communication"]] := read "../frameData/frame11.txt" as "<1s,2s> 3n" skip 2;
param probabilities12[Assignment["Destroying"]] := read "../frameData/frame12.txt" as "<1s,2s> 3n" skip 2;
param probabilities13[Assignment["Political_locales"]] := read "../frameData/frame13.txt" as "<1s,2s> 3n" skip 2;
param probabilities14[Assignment["Capability"]] := read "../frameData/frame14.txt" as "<1s,2s> 3n" skip 2;
param probabilities15[Assignment["Verification"]] := read "../frameData/frame15.txt" as "<1s,2s> 3n" skip 2;
param probabilities16[Assignment["Evaluative_comparison"]] := read "../frameData/frame16.txt" as "<1s,2s> 3n" skip 2;
param probabilities17[Assignment["Quantity"]] := read "../frameData/frame17.txt" as "<1s,2s> 3n" skip 2;
param probabilities18[Assignment["Certainty"]] := read "../frameData/frame18.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Proliferating_in_number"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Part_orientational"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Weapon"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Weapon"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Project"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Resolve_problem"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Verification"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Emptying"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Intentionally_act"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Getting"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Political_locales"] : probabilities10[r,s] * z10[r,s])+(sum <r,s> in Assignment["Judgment_communication"] : probabilities11[r,s] * z11[r,s])+(sum <r,s> in Assignment["Destroying"] : probabilities12[r,s] * z12[r,s])+(sum <r,s> in Assignment["Political_locales"] : probabilities13[r,s] * z13[r,s])+(sum <r,s> in Assignment["Capability"] : probabilities14[r,s] * z14[r,s])+(sum <r,s> in Assignment["Verification"] : probabilities15[r,s] * z15[r,s])+(sum <r,s> in Assignment["Evaluative_comparison"] : probabilities16[r,s] * z16[r,s])+(sum <r,s> in Assignment["Quantity"] : probabilities17[r,s] * z17[r,s])+(sum <r,s> in Assignment["Certainty"] : probabilities18[r,s] * z18[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 40};
set G[I] := <0> {"0_0","0_22","0_40"}, <1> {"0_22","0_40","1_1","1_11","1_12","1_22","1_3"}, <2> {"0_22","0_40","1_11","1_12","1_22","1_3","2_2"}, <3> {"0_22","0_40","1_11","1_12","1_22","1_3","3_3"}, <4> {"0_22","0_40","1_11","1_12","1_22","4_11","4_4"}, <5> {"0_22","0_40","1_11","1_12","1_22","4_11","5_11","5_5","5_7"}, <6> {"0_22","0_40","1_11","1_12","1_22","4_11","5_11","5_7","6_6"}, <7> {"0_22","0_40","1_11","1_12","1_22","4_11","5_11","5_7","7_7"}, <8> {"0_22","0_40","1_11","1_12","1_22","4_11","5_11","8_10","8_8"}, <9> {"0_22","0_40","1_11","1_12","1_22","4_11","5_11","8_10","9_9"}, <10> {"0_22","0_40","10_10","1_11","1_12","1_22","4_11","5_11","8_10"}, <11> {"0_22","0_40","11_11","1_11","1_12","1_22","4_11","5_11"}, <12> {"0_22","0_40","12_12","12_22","1_12","1_22"}, <13> {"0_22","0_40","12_22","13_13","13_14","13_22","1_22"}, <14> {"0_22","0_40","12_22","13_14","13_22","14_14","14_22","1_22"}, <15> {"0_22","0_40","12_22","13_22","14_22","15_15","15_22","1_22"}, <16> {"0_22","0_40","12_22","13_22","14_22","15_22","16_16","16_18","16_22","1_22"}, <17> {"0_22","0_40","12_22","13_22","14_22","15_22","16_18","16_22","17_17","1_22"}, <18> {"0_22","0_40","12_22","13_22","14_22","15_22","16_18","16_22","18_18","1_22"}, <19> {"0_22","0_40","12_22","13_22","14_22","15_22","16_22","19_19","19_22","1_22"}, <20> {"0_22","0_40","12_22","13_22","14_22","15_22","16_22","19_22","1_22","20_20","20_22"}, <21> {"0_22","0_40","12_22","13_22","14_22","15_22","16_22","19_22","1_22","20_22","21_21","21_22"}, <22> {"0_22","0_40","12_22","13_22","14_22","15_22","16_22","19_22","1_22","20_22","21_22","22_22"}, <23> {"0_40","23_23"}, <24> {"0_40","24_24","24_30"}, <25> {"0_40","24_30","25_25","25_30"}, <26> {"0_40","24_30","25_30","26_26","26_28","26_30"}, <27> {"0_40","24_30","25_30","26_28","26_30","27_27"}, <28> {"0_40","24_30","25_30","26_28","26_30","28_28"}, <29> {"0_40","24_30","25_30","26_30","29_29"}, <30> {"0_40","24_30","25_30","26_30","30_30"}, <31> {"0_40","31_31"}, <32> {"0_40","32_32"}, <33> {"0_40","33_33","33_39"}, <34> {"0_40","33_39","34_34","34_39"}, <35> {"0_40","33_39","34_39","35_35","35_37","35_39"}, <36> {"0_40","33_39","34_39","35_37","35_39","36_36"}, <37> {"0_40","33_39","34_39","35_37","35_39","37_37"}, <38> {"0_40","33_39","34_39","35_39","38_38","38_39"}, <39> {"0_40","33_39","34_39","35_39","38_39","39_39"}, <40> {"0_40","40_40"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Proliferating_in_number"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Part_orientational"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Project"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Resolve_problem"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Verification"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Emptying"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Intentionally_act"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Getting"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Political_locales"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
subto overlap11: forall <i> in I do 
 sum <r> in Roles["Judgment_communication"] do 
 sum <s> in G[i] do z11[r,s] <= 1;
subto overlap12: forall <i> in I do 
 sum <r> in Roles["Destroying"] do 
 sum <s> in G[i] do z12[r,s] <= 1;
subto overlap13: forall <i> in I do 
 sum <r> in Roles["Political_locales"] do 
 sum <s> in G[i] do z13[r,s] <= 1;
subto overlap14: forall <i> in I do 
 sum <r> in Roles["Capability"] do 
 sum <s> in G[i] do z14[r,s] <= 1;
subto overlap15: forall <i> in I do 
 sum <r> in Roles["Verification"] do 
 sum <s> in G[i] do z15[r,s] <= 1;
subto overlap16: forall <i> in I do 
 sum <r> in Roles["Evaluative_comparison"] do 
 sum <s> in G[i] do z16[r,s] <= 1;
subto overlap17: forall <i> in I do 
 sum <r> in Roles["Quantity"] do 
 sum <s> in G[i] do z17[r,s] <= 1;
subto overlap18: forall <i> in I do 
 sum <r> in Roles["Certainty"] do 
 sum <s> in G[i] do z18[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Proliferating_in_number"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Part_orientational"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Weapon"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Weapon"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Project"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Resolve_problem"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Verification"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Emptying"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Intentionally_act"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Getting"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Political_locales"] do sum <s> in Spans : z10[r,s] == 1;
subto unique11: forall <r> in Roles["Judgment_communication"] do sum <s> in Spans : z11[r,s] == 1;
subto unique12: forall <r> in Roles["Destroying"] do sum <s> in Spans : z12[r,s] == 1;
subto unique13: forall <r> in Roles["Political_locales"] do sum <s> in Spans : z13[r,s] == 1;
subto unique14: forall <r> in Roles["Capability"] do sum <s> in Spans : z14[r,s] == 1;
subto unique15: forall <r> in Roles["Verification"] do sum <s> in Spans : z15[r,s] == 1;
subto unique16: forall <r> in Roles["Evaluative_comparison"] do sum <s> in Spans : z16[r,s] == 1;
subto unique17: forall <r> in Roles["Quantity"] do sum <s> in Spans : z17[r,s] == 1;
subto unique18: forall <r> in Roles["Certainty"] do sum <s> in Spans : z18[r,s] == 1;
#pairwise exclusion constraint
set Exc4 := {<"Activity","Salient_entity">};
subto exclusion4: forall <ri,rj> in Exc4 do z4[ri,"-1_-1"] + z4[rj,"-1_-1"] >= 1;
set Exc5 := {<"Agent","Cause">};
subto exclusion5: forall <ri,rj> in Exc5 do z5[ri,"-1_-1"] + z5[rj,"-1_-1"] >= 1;
set Exc7 := {<"Agent","Cause">};
subto exclusion7: forall <ri,rj> in Exc7 do z7[ri,"-1_-1"] + z7[rj,"-1_-1"] >= 1;
set Exc11 := {<"Communicator","Expressor">};
subto exclusion11: forall <ri,rj> in Exc11 do z11[ri,"-1_-1"] + z11[rj,"-1_-1"] >= 1;
set Exc12 := {<"Cause","Destroyer">,<"Cause","Means">};
subto exclusion12: forall <ri,rj> in Exc12 do z12[ri,"-1_-1"] + z12[rj,"-1_-1"] >= 1;
set Exc16 := {<"Attribute","Profiled_attribute">,<"Attribute","Standard_attribute">};
subto exclusion16: forall <ri,rj> in Exc16 do z16[ri,"-1_-1"] + z16[rj,"-1_-1"] >= 1;
set Exc17 := {<"Individuals","Mass">};
subto exclusion17: forall <ri,rj> in Exc17 do z17[ri,"-1_-1"] + z17[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
