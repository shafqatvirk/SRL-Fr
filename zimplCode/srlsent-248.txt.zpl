# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Fields","Research","Intentionally_create","Manufacturing","Toxic_substance","Cause_to_make_progress","Weapon","Locale_by_use","Coming_up_with","Familiarity","Cause_to_make_progress","Means","Cause_fluidic_motion","Dispersal","Research","Objective_influence","Indigenous_origin","Locale_by_use","Diversity","Medical_conditions","Preventing","Manufacturing","Aggregate","Intentionally_create","Locale_by_use","Businesses","Manufacturing","Fields"};
set Roles[Frames] :=  <"Fields"> {"Practitioner","Time","Type","Work","Place","Salient_entity","Activity"}, <"Research"> {"Type","Question","Place","Topic","Manner","Field","Time","Means","Purpose","Researcher","Population"}, <"Intentionally_create"> {"Created_entity","Place","Role","Manner","Components","Creator","Time","Means","Purpose","Co_participant"}, <"Manufacturing"> {"Purpose","Circumstances","Time","Manufacturer","Instrument","Place","Frequency","Resource","Means","Locus","Consumer","Depictive","Factory","Product","Manner"}, <"Toxic_substance"> {"Duration","Victim","Circumstances","Toxic_substance","Body_part","Toxin_source","Degree"}, <"Cause_to_make_progress"> {"Purpose","Time","Place","Degree","Rate","Means","Domain","Duration","Particular_iteration","Project","Post_state","Manner","Explanation","Agent","Prior_state"}, <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Locale_by_use"> {"Formational_cause","Use","Locale","Relative_location","Name","Container_possessor","Constituent_parts","Descriptor"}, <"Coming_up_with"> {"Place","Cognizer","Result","Location_of_appearance","Idea","Manner","Means","Material","Purpose","Amount_of_progress"}, <"Familiarity"> {"Entity","Role","Depictive","Context","Degree","Cognizer"}, <"Cause_to_make_progress"> {"Purpose","Time","Place","Degree","Rate","Means","Domain","Duration","Particular_iteration","Project","Post_state","Manner","Explanation","Agent","Prior_state"}, <"Means"> {"Agent","Purpose","Descriptor","Time","Means"}, <"Cause_fluidic_motion"> {"Agent","Goal","Result","Fluid","Path","Manner","Area","Time","Source","Reason","Cause"}, <"Dispersal"> {"Place","Agent","Result","Goal_area","Path","Manner","Individuals","Time","Reason","Means","Cause"}, <"Research"> {"Type","Question","Place","Topic","Manner","Field","Time","Means","Purpose","Researcher","Population"}, <"Objective_influence"> {"Dependent_variable","Influencing_entity","Degree","Dependent_situation","Manner","Dependent_entity","Time","Circumstances","Influencing_situation","Influencing_variable"}, <"Indigenous_origin"> {"Entity","Origin"}, <"Locale_by_use"> {"Formational_cause","Use","Locale","Relative_location","Name","Container_possessor","Constituent_parts","Descriptor"}, <"Diversity"> {"Depictive","Group","Degree","Place","Dimension"}, <"Medical_conditions"> {"Place","Symptom","Body_Part","Degree","Patient","Name","Ailment","Cause"}, <"Preventing"> {"Degree","Place","Time","Event","Preventing_cause","Agent"}, <"Manufacturing"> {"Purpose","Circumstances","Time","Manufacturer","Instrument","Place","Frequency","Resource","Means","Locus","Consumer","Depictive","Factory","Product","Manner"}, <"Aggregate"> {"Individuals","AggregateProperty","Aggregate","Name","Domain","Container_possessor"}, <"Intentionally_create"> {"Created_entity","Place","Role","Manner","Components","Creator","Time","Means","Purpose","Co_participant"}, <"Locale_by_use"> {"Formational_cause","Use","Locale","Relative_location","Name","Container_possessor","Constituent_parts","Descriptor"}, <"Businesses"> {"Descriptor","Business_Name","Service_provider","Business","Place","Product","Proprietor"}, <"Manufacturing"> {"Purpose","Circumstances","Time","Manufacturer","Instrument","Place","Frequency","Resource","Means","Locus","Consumer","Depictive","Factory","Product","Manner"}, <"Fields"> {"Practitioner","Time","Type","Work","Place","Salient_entity","Activity"};
set Spans := {"-1_-1","0_0","0_17","0_2","0_7","0_91","10_10","10_17","11_11","11_17","12_12","12_17","13_13","13_17","14_14","14_17","15_15","15_17","16_16","16_17","17_17","18_18","18_24","19_19","19_24","1_1","1_2","20_20","20_22","20_24","21_21","22_22","23_23","23_24","24_24","25_25","25_28","26_26","26_28","27_27","27_28","28_28","29_29","2_2","30_30","30_31","30_37","31_31","31_37","32_32","32_37","33_33","33_37","34_34","35_35","35_36","36_36","37_37","38_38","38_46","39_39","39_46","3_3","40_40","40_41","40_45","41_41","42_42","42_45","43_43","43_45","44_44","45_45","46_46","47_47","47_48","47_55","48_48","48_55","49_49","49_55","4_4","4_5","4_6","50_50","50_55","51_51","51_55","52_52","52_55","53_53","54_54","55_55","56_56","56_63","57_57","57_63","58_58","58_63","59_59","5_5","60_60","60_61","61_61","62_62","62_63","63_63","64_64","65_65","65_67","65_71","65_75","66_66","67_67","68_68","69_69","6_6","70_70","71_71","72_72","72_75","73_73","73_75","74_74","75_75","76_76","77_77","78_78","78_79","78_81","78_85","79_79","7_7","80_80","81_81","82_82","82_83","82_85","83_83","83_85","84_84","84_85","85_85","86_86","87_87","87_88","87_90","88_88","89_89","8_17","8_8","90_90","91_91","9_17","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Fields"]] binary;
var z1[Assignment["Research"]] binary;
var z2[Assignment["Intentionally_create"]] binary;
var z3[Assignment["Manufacturing"]] binary;
var z4[Assignment["Toxic_substance"]] binary;
var z5[Assignment["Cause_to_make_progress"]] binary;
var z6[Assignment["Weapon"]] binary;
var z7[Assignment["Locale_by_use"]] binary;
var z8[Assignment["Coming_up_with"]] binary;
var z9[Assignment["Familiarity"]] binary;
var z10[Assignment["Cause_to_make_progress"]] binary;
var z11[Assignment["Means"]] binary;
var z12[Assignment["Cause_fluidic_motion"]] binary;
var z13[Assignment["Dispersal"]] binary;
var z14[Assignment["Research"]] binary;
var z15[Assignment["Objective_influence"]] binary;
var z16[Assignment["Indigenous_origin"]] binary;
var z17[Assignment["Locale_by_use"]] binary;
var z18[Assignment["Diversity"]] binary;
var z19[Assignment["Medical_conditions"]] binary;
var z20[Assignment["Preventing"]] binary;
var z21[Assignment["Manufacturing"]] binary;
var z22[Assignment["Aggregate"]] binary;
var z23[Assignment["Intentionally_create"]] binary;
var z24[Assignment["Locale_by_use"]] binary;
var z25[Assignment["Businesses"]] binary;
var z26[Assignment["Manufacturing"]] binary;
var z27[Assignment["Fields"]] binary;
param probabilities0[Assignment["Fields"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Research"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Intentionally_create"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Manufacturing"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Toxic_substance"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Cause_to_make_progress"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Weapon"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Locale_by_use"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Coming_up_with"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Familiarity"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Cause_to_make_progress"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;
param probabilities11[Assignment["Means"]] := read "../frameData/frame11.txt" as "<1s,2s> 3n" skip 2;
param probabilities12[Assignment["Cause_fluidic_motion"]] := read "../frameData/frame12.txt" as "<1s,2s> 3n" skip 2;
param probabilities13[Assignment["Dispersal"]] := read "../frameData/frame13.txt" as "<1s,2s> 3n" skip 2;
param probabilities14[Assignment["Research"]] := read "../frameData/frame14.txt" as "<1s,2s> 3n" skip 2;
param probabilities15[Assignment["Objective_influence"]] := read "../frameData/frame15.txt" as "<1s,2s> 3n" skip 2;
param probabilities16[Assignment["Indigenous_origin"]] := read "../frameData/frame16.txt" as "<1s,2s> 3n" skip 2;
param probabilities17[Assignment["Locale_by_use"]] := read "../frameData/frame17.txt" as "<1s,2s> 3n" skip 2;
param probabilities18[Assignment["Diversity"]] := read "../frameData/frame18.txt" as "<1s,2s> 3n" skip 2;
param probabilities19[Assignment["Medical_conditions"]] := read "../frameData/frame19.txt" as "<1s,2s> 3n" skip 2;
param probabilities20[Assignment["Preventing"]] := read "../frameData/frame20.txt" as "<1s,2s> 3n" skip 2;
param probabilities21[Assignment["Manufacturing"]] := read "../frameData/frame21.txt" as "<1s,2s> 3n" skip 2;
param probabilities22[Assignment["Aggregate"]] := read "../frameData/frame22.txt" as "<1s,2s> 3n" skip 2;
param probabilities23[Assignment["Intentionally_create"]] := read "../frameData/frame23.txt" as "<1s,2s> 3n" skip 2;
param probabilities24[Assignment["Locale_by_use"]] := read "../frameData/frame24.txt" as "<1s,2s> 3n" skip 2;
param probabilities25[Assignment["Businesses"]] := read "../frameData/frame25.txt" as "<1s,2s> 3n" skip 2;
param probabilities26[Assignment["Manufacturing"]] := read "../frameData/frame26.txt" as "<1s,2s> 3n" skip 2;
param probabilities27[Assignment["Fields"]] := read "../frameData/frame27.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Fields"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Research"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Intentionally_create"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Manufacturing"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Toxic_substance"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Cause_to_make_progress"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Weapon"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Locale_by_use"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Coming_up_with"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Familiarity"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Cause_to_make_progress"] : probabilities10[r,s] * z10[r,s])+(sum <r,s> in Assignment["Means"] : probabilities11[r,s] * z11[r,s])+(sum <r,s> in Assignment["Cause_fluidic_motion"] : probabilities12[r,s] * z12[r,s])+(sum <r,s> in Assignment["Dispersal"] : probabilities13[r,s] * z13[r,s])+(sum <r,s> in Assignment["Research"] : probabilities14[r,s] * z14[r,s])+(sum <r,s> in Assignment["Objective_influence"] : probabilities15[r,s] * z15[r,s])+(sum <r,s> in Assignment["Indigenous_origin"] : probabilities16[r,s] * z16[r,s])+(sum <r,s> in Assignment["Locale_by_use"] : probabilities17[r,s] * z17[r,s])+(sum <r,s> in Assignment["Diversity"] : probabilities18[r,s] * z18[r,s])+(sum <r,s> in Assignment["Medical_conditions"] : probabilities19[r,s] * z19[r,s])+(sum <r,s> in Assignment["Preventing"] : probabilities20[r,s] * z20[r,s])+(sum <r,s> in Assignment["Manufacturing"] : probabilities21[r,s] * z21[r,s])+(sum <r,s> in Assignment["Aggregate"] : probabilities22[r,s] * z22[r,s])+(sum <r,s> in Assignment["Intentionally_create"] : probabilities23[r,s] * z23[r,s])+(sum <r,s> in Assignment["Locale_by_use"] : probabilities24[r,s] * z24[r,s])+(sum <r,s> in Assignment["Businesses"] : probabilities25[r,s] * z25[r,s])+(sum <r,s> in Assignment["Manufacturing"] : probabilities26[r,s] * z26[r,s])+(sum <r,s> in Assignment["Fields"] : probabilities27[r,s] * z27[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 91};
set G[I] := <0> {"0_0","0_17","0_2","0_7","0_91"}, <1> {"0_17","0_2","0_7","0_91","1_1","1_2"}, <2> {"0_17","0_2","0_7","0_91","1_2","2_2"}, <3> {"0_17","0_7","0_91","3_3"}, <4> {"0_17","0_7","0_91","4_4","4_5","4_6"}, <5> {"0_17","0_7","0_91","4_5","4_6","5_5"}, <6> {"0_17","0_7","0_91","4_6","6_6"}, <7> {"0_17","0_7","0_91","7_7"}, <8> {"0_17","0_91","8_17","8_8"}, <9> {"0_17","0_91","8_17","9_17","9_9"}, <10> {"0_17","0_91","10_10","10_17","8_17","9_17"}, <11> {"0_17","0_91","10_17","11_11","11_17","8_17","9_17"}, <12> {"0_17","0_91","10_17","11_17","12_12","12_17","8_17","9_17"}, <13> {"0_17","0_91","10_17","11_17","12_17","13_13","13_17","8_17","9_17"}, <14> {"0_17","0_91","10_17","11_17","12_17","13_17","14_14","14_17","8_17","9_17"}, <15> {"0_17","0_91","10_17","11_17","12_17","13_17","14_17","15_15","15_17","8_17","9_17"}, <16> {"0_17","0_91","10_17","11_17","12_17","13_17","14_17","15_17","16_16","16_17","8_17","9_17"}, <17> {"0_17","0_91","10_17","11_17","12_17","13_17","14_17","15_17","16_17","17_17","8_17","9_17"}, <18> {"0_91","18_18","18_24"}, <19> {"0_91","18_24","19_19","19_24"}, <20> {"0_91","18_24","19_24","20_20","20_22","20_24"}, <21> {"0_91","18_24","19_24","20_22","20_24","21_21"}, <22> {"0_91","18_24","19_24","20_22","20_24","22_22"}, <23> {"0_91","18_24","19_24","20_24","23_23","23_24"}, <24> {"0_91","18_24","19_24","20_24","23_24","24_24"}, <25> {"0_91","25_25","25_28"}, <26> {"0_91","25_28","26_26","26_28"}, <27> {"0_91","25_28","26_28","27_27","27_28"}, <28> {"0_91","25_28","26_28","27_28","28_28"}, <29> {"0_91","29_29"}, <30> {"0_91","30_30","30_31","30_37"}, <31> {"0_91","30_31","30_37","31_31","31_37"}, <32> {"0_91","30_37","31_37","32_32","32_37"}, <33> {"0_91","30_37","31_37","32_37","33_33","33_37"}, <34> {"0_91","30_37","31_37","32_37","33_37","34_34"}, <35> {"0_91","30_37","31_37","32_37","33_37","35_35","35_36"}, <36> {"0_91","30_37","31_37","32_37","33_37","35_36","36_36"}, <37> {"0_91","30_37","31_37","32_37","33_37","37_37"}, <38> {"0_91","38_38","38_46"}, <39> {"0_91","38_46","39_39","39_46"}, <40> {"0_91","38_46","39_46","40_40","40_41","40_45"}, <41> {"0_91","38_46","39_46","40_41","40_45","41_41"}, <42> {"0_91","38_46","39_46","40_45","42_42","42_45"}, <43> {"0_91","38_46","39_46","40_45","42_45","43_43","43_45"}, <44> {"0_91","38_46","39_46","40_45","42_45","43_45","44_44"}, <45> {"0_91","38_46","39_46","40_45","42_45","43_45","45_45"}, <46> {"0_91","38_46","39_46","46_46"}, <47> {"0_91","47_47","47_48","47_55"}, <48> {"0_91","47_48","47_55","48_48","48_55"}, <49> {"0_91","47_55","48_55","49_49","49_55"}, <50> {"0_91","47_55","48_55","49_55","50_50","50_55"}, <51> {"0_91","47_55","48_55","49_55","50_55","51_51","51_55"}, <52> {"0_91","47_55","48_55","49_55","50_55","51_55","52_52","52_55"}, <53> {"0_91","47_55","48_55","49_55","50_55","51_55","52_55","53_53"}, <54> {"0_91","47_55","48_55","49_55","50_55","51_55","52_55","54_54"}, <55> {"0_91","47_55","48_55","49_55","50_55","51_55","52_55","55_55"}, <56> {"0_91","56_56","56_63"}, <57> {"0_91","56_63","57_57","57_63"}, <58> {"0_91","56_63","57_63","58_58","58_63"}, <59> {"0_91","56_63","57_63","58_63","59_59"}, <60> {"0_91","56_63","57_63","58_63","60_60","60_61"}, <61> {"0_91","56_63","57_63","58_63","60_61","61_61"}, <62> {"0_91","56_63","57_63","58_63","62_62","62_63"}, <63> {"0_91","56_63","57_63","58_63","62_63","63_63"}, <64> {"0_91","64_64"}, <65> {"0_91","65_65","65_67","65_71","65_75"}, <66> {"0_91","65_67","65_71","65_75","66_66"}, <67> {"0_91","65_67","65_71","65_75","67_67"}, <68> {"0_91","65_71","65_75","68_68"}, <69> {"0_91","65_71","65_75","69_69"}, <70> {"0_91","65_71","65_75","70_70"}, <71> {"0_91","65_71","65_75","71_71"}, <72> {"0_91","65_75","72_72","72_75"}, <73> {"0_91","65_75","72_75","73_73","73_75"}, <74> {"0_91","65_75","72_75","73_75","74_74"}, <75> {"0_91","65_75","72_75","73_75","75_75"}, <76> {"0_91","76_76"}, <77> {"0_91","77_77"}, <78> {"0_91","78_78","78_79","78_81","78_85"}, <79> {"0_91","78_79","78_81","78_85","79_79"}, <80> {"0_91","78_81","78_85","80_80"}, <81> {"0_91","78_81","78_85","81_81"}, <82> {"0_91","78_85","82_82","82_83","82_85"}, <83> {"0_91","78_85","82_83","82_85","83_83","83_85"}, <84> {"0_91","78_85","82_85","83_85","84_84","84_85"}, <85> {"0_91","78_85","82_85","83_85","84_85","85_85"}, <86> {"0_91","86_86"}, <87> {"0_91","87_87","87_88","87_90"}, <88> {"0_91","87_88","87_90","88_88"}, <89> {"0_91","87_90","89_89"}, <90> {"0_91","87_90","90_90"}, <91> {"0_91","91_91"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Fields"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Research"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Intentionally_create"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Manufacturing"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Toxic_substance"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Cause_to_make_progress"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Locale_by_use"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Coming_up_with"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Familiarity"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Cause_to_make_progress"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
subto overlap11: forall <i> in I do 
 sum <r> in Roles["Means"] do 
 sum <s> in G[i] do z11[r,s] <= 1;
subto overlap12: forall <i> in I do 
 sum <r> in Roles["Cause_fluidic_motion"] do 
 sum <s> in G[i] do z12[r,s] <= 1;
subto overlap13: forall <i> in I do 
 sum <r> in Roles["Dispersal"] do 
 sum <s> in G[i] do z13[r,s] <= 1;
subto overlap14: forall <i> in I do 
 sum <r> in Roles["Research"] do 
 sum <s> in G[i] do z14[r,s] <= 1;
subto overlap15: forall <i> in I do 
 sum <r> in Roles["Objective_influence"] do 
 sum <s> in G[i] do z15[r,s] <= 1;
subto overlap16: forall <i> in I do 
 sum <r> in Roles["Indigenous_origin"] do 
 sum <s> in G[i] do z16[r,s] <= 1;
subto overlap17: forall <i> in I do 
 sum <r> in Roles["Locale_by_use"] do 
 sum <s> in G[i] do z17[r,s] <= 1;
subto overlap18: forall <i> in I do 
 sum <r> in Roles["Diversity"] do 
 sum <s> in G[i] do z18[r,s] <= 1;
subto overlap19: forall <i> in I do 
 sum <r> in Roles["Medical_conditions"] do 
 sum <s> in G[i] do z19[r,s] <= 1;
subto overlap20: forall <i> in I do 
 sum <r> in Roles["Preventing"] do 
 sum <s> in G[i] do z20[r,s] <= 1;
subto overlap21: forall <i> in I do 
 sum <r> in Roles["Manufacturing"] do 
 sum <s> in G[i] do z21[r,s] <= 1;
subto overlap22: forall <i> in I do 
 sum <r> in Roles["Aggregate"] do 
 sum <s> in G[i] do z22[r,s] <= 1;
subto overlap23: forall <i> in I do 
 sum <r> in Roles["Intentionally_create"] do 
 sum <s> in G[i] do z23[r,s] <= 1;
subto overlap24: forall <i> in I do 
 sum <r> in Roles["Locale_by_use"] do 
 sum <s> in G[i] do z24[r,s] <= 1;
subto overlap25: forall <i> in I do 
 sum <r> in Roles["Businesses"] do 
 sum <s> in G[i] do z25[r,s] <= 1;
subto overlap26: forall <i> in I do 
 sum <r> in Roles["Manufacturing"] do 
 sum <s> in G[i] do z26[r,s] <= 1;
subto overlap27: forall <i> in I do 
 sum <r> in Roles["Fields"] do 
 sum <s> in G[i] do z27[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Fields"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Research"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Intentionally_create"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Manufacturing"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Toxic_substance"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Cause_to_make_progress"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Weapon"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Locale_by_use"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Coming_up_with"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Familiarity"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Cause_to_make_progress"] do sum <s> in Spans : z10[r,s] == 1;
subto unique11: forall <r> in Roles["Means"] do sum <s> in Spans : z11[r,s] == 1;
subto unique12: forall <r> in Roles["Cause_fluidic_motion"] do sum <s> in Spans : z12[r,s] == 1;
subto unique13: forall <r> in Roles["Dispersal"] do sum <s> in Spans : z13[r,s] == 1;
subto unique14: forall <r> in Roles["Research"] do sum <s> in Spans : z14[r,s] == 1;
subto unique15: forall <r> in Roles["Objective_influence"] do sum <s> in Spans : z15[r,s] == 1;
subto unique16: forall <r> in Roles["Indigenous_origin"] do sum <s> in Spans : z16[r,s] == 1;
subto unique17: forall <r> in Roles["Locale_by_use"] do sum <s> in Spans : z17[r,s] == 1;
subto unique18: forall <r> in Roles["Diversity"] do sum <s> in Spans : z18[r,s] == 1;
subto unique19: forall <r> in Roles["Medical_conditions"] do sum <s> in Spans : z19[r,s] == 1;
subto unique20: forall <r> in Roles["Preventing"] do sum <s> in Spans : z20[r,s] == 1;
subto unique21: forall <r> in Roles["Manufacturing"] do sum <s> in Spans : z21[r,s] == 1;
subto unique22: forall <r> in Roles["Aggregate"] do sum <s> in Spans : z22[r,s] == 1;
subto unique23: forall <r> in Roles["Intentionally_create"] do sum <s> in Spans : z23[r,s] == 1;
subto unique24: forall <r> in Roles["Locale_by_use"] do sum <s> in Spans : z24[r,s] == 1;
subto unique25: forall <r> in Roles["Businesses"] do sum <s> in Spans : z25[r,s] == 1;
subto unique26: forall <r> in Roles["Manufacturing"] do sum <s> in Spans : z26[r,s] == 1;
subto unique27: forall <r> in Roles["Fields"] do sum <s> in Spans : z27[r,s] == 1;
#pairwise exclusion constraint
set Exc12 := {<"Area","Result">,<"Agent","Cause">,<"Area","Goal">,<"Area","Path">,<"Area","Source">};
subto exclusion12: forall <ri,rj> in Exc12 do z12[ri,"-1_-1"] + z12[rj,"-1_-1"] >= 1;
set Exc13 := {<"Agent","Cause">};
subto exclusion13: forall <ri,rj> in Exc13 do z13[ri,"-1_-1"] + z13[rj,"-1_-1"] >= 1;
set Exc15 := {<"Influencing_entity","Influencing_variable">,<"Influencing_entity","Influencing_situation">,<"Influencing_situation","Influencing_variable">,<"Dependent_entity","Dependent_variable">,<"Dependent_situation","Dependent_variable">,<"Dependent_entity","Dependent_situation">};
subto exclusion15: forall <ri,rj> in Exc15 do z15[ri,"-1_-1"] + z15[rj,"-1_-1"] >= 1;
set Exc20 := {<"Agent","Preventing_cause">};
subto exclusion20: forall <ri,rj> in Exc20 do z20[ri,"-1_-1"] + z20[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
