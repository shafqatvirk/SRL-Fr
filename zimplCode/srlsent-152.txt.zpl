# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Buildings","Cardinal_numbers","Degree","Quantity","Leadership","Arriving","Natural_features","Hostile_encounter","Board_vehicle","Calendric_unit","Travel","Origin","Relational_political_locales"};
set Roles[Frames] :=  <"Buildings"> {"Type","Place","Function","Time_of_creation","Relative_location","Name","Building","Descriptor","Material","Builder"}, <"Cardinal_numbers"> {"Precision","Number","Multiplier","Entity"}, <"Degree"> {"Gradable_attribute"}, <"Quantity"> {"Mass","Q_Prop","Degree","Quantity","Individuals"}, <"Leadership"> {"Domain","Leader","Type","Depictive","Descriptor","Degree","Means","Role","Activity","Duration","Governed","Manner","Time"}, <"Arriving"> {"Theme","Cotheme","Means","Depictive","Circumstances","Manner","Time","Source","Period_of_iterations","Degree","Event_description","Re_encoding","Goal","Purpose","Goal_conditions","Path","Frequency","Mode_of_transportation"}, <"Natural_features"> {"Type","Locale","Relative_location","Name","Formational_cause","Container_possessor","Constituent_parts","Descriptor"}, <"Hostile_encounter"> {"Purpose","Result","Depictive","Instrument","Place","Degree","Means","Internal_cause","Reason","Particular_iteration","Duration","Sides","Issue","Side_2","Side_1","Manner","Time"}, <"Board_vehicle"> {"Place","Traveller","Vehicle","Path","Time","Circumstances","Duration_of_final_state","Depictive","Cotheme"}, <"Calendric_unit"> {"Relative_time","Unit","Count","Name","Salient_event","Whole"}, <"Travel"> {"Mode_of_transportation","Area","Time","Path","Reason","Depictive","Traveler","Means","Frequency","Place","Manner","Co_participant","Source","Distance","Descriptor","Speed","Purpose","Travel_means","Duration","Goal","Baggage","Period_of_Iterations","Direction","Iterations"}, <"Origin"> {"Entity","Origin"}, <"Relational_political_locales"> {"Relative_location","Container_possessor","Descriptor","Name","Population","Locale"};
set Spans := {"-1_-1","0_0","0_22","0_38","0_6","10_10","11_11","12_12","12_22","13_13","13_22","14_14","15_15","15_22","16_16","16_22","17_17","18_18","19_19","1_1","20_20","20_21","21_21","22_22","23_23","23_38","24_24","24_37","25_25","25_26","25_37","26_26","26_37","27_27","27_31","27_37","28_28","29_29","2_2","2_4","30_30","31_31","32_32","32_37","33_33","33_35","33_37","34_34","35_35","36_36","37_37","38_38","3_3","4_4","5_5","6_6","7_22","7_7","8_11","8_22","8_8","8_9","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Buildings"]] binary;
var z1[Assignment["Cardinal_numbers"]] binary;
var z2[Assignment["Degree"]] binary;
var z3[Assignment["Quantity"]] binary;
var z4[Assignment["Leadership"]] binary;
var z5[Assignment["Arriving"]] binary;
var z6[Assignment["Natural_features"]] binary;
var z7[Assignment["Hostile_encounter"]] binary;
var z8[Assignment["Board_vehicle"]] binary;
var z9[Assignment["Calendric_unit"]] binary;
var z10[Assignment["Travel"]] binary;
var z11[Assignment["Origin"]] binary;
var z12[Assignment["Relational_political_locales"]] binary;
param probabilities0[Assignment["Buildings"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Cardinal_numbers"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Degree"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Quantity"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Leadership"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Arriving"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Natural_features"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Hostile_encounter"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Board_vehicle"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Calendric_unit"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Travel"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;
param probabilities11[Assignment["Origin"]] := read "../frameData/frame11.txt" as "<1s,2s> 3n" skip 2;
param probabilities12[Assignment["Relational_political_locales"]] := read "../frameData/frame12.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Buildings"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Cardinal_numbers"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Degree"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Quantity"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Leadership"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Arriving"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Natural_features"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Hostile_encounter"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Board_vehicle"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Calendric_unit"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Travel"] : probabilities10[r,s] * z10[r,s])+(sum <r,s> in Assignment["Origin"] : probabilities11[r,s] * z11[r,s])+(sum <r,s> in Assignment["Relational_political_locales"] : probabilities12[r,s] * z12[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 38};
set G[I] := <0> {"0_0","0_22","0_38","0_6"}, <1> {"0_22","0_38","0_6","1_1"}, <2> {"0_22","0_38","0_6","2_2","2_4"}, <3> {"0_22","0_38","0_6","2_4","3_3"}, <4> {"0_22","0_38","0_6","2_4","4_4"}, <5> {"0_22","0_38","0_6","5_5"}, <6> {"0_22","0_38","0_6","6_6"}, <7> {"0_22","0_38","7_22","7_7"}, <8> {"0_22","0_38","7_22","8_11","8_22","8_8","8_9"}, <9> {"0_22","0_38","7_22","8_11","8_22","8_9","9_9"}, <10> {"0_22","0_38","10_10","7_22","8_11","8_22"}, <11> {"0_22","0_38","11_11","7_22","8_11","8_22"}, <12> {"0_22","0_38","12_12","12_22","7_22","8_22"}, <13> {"0_22","0_38","12_22","13_13","13_22","7_22","8_22"}, <14> {"0_22","0_38","12_22","13_22","14_14","7_22","8_22"}, <15> {"0_22","0_38","12_22","13_22","15_15","15_22","7_22","8_22"}, <16> {"0_22","0_38","12_22","13_22","15_22","16_16","16_22","7_22","8_22"}, <17> {"0_22","0_38","12_22","13_22","15_22","16_22","17_17","7_22","8_22"}, <18> {"0_22","0_38","12_22","13_22","15_22","16_22","18_18","7_22","8_22"}, <19> {"0_22","0_38","12_22","13_22","15_22","16_22","19_19","7_22","8_22"}, <20> {"0_22","0_38","12_22","13_22","15_22","16_22","20_20","20_21","7_22","8_22"}, <21> {"0_22","0_38","12_22","13_22","15_22","16_22","20_21","21_21","7_22","8_22"}, <22> {"0_22","0_38","12_22","13_22","15_22","16_22","22_22","7_22","8_22"}, <23> {"0_38","23_23","23_38"}, <24> {"0_38","23_38","24_24","24_37"}, <25> {"0_38","23_38","24_37","25_25","25_26","25_37"}, <26> {"0_38","23_38","24_37","25_26","25_37","26_26","26_37"}, <27> {"0_38","23_38","24_37","25_37","26_37","27_27","27_31","27_37"}, <28> {"0_38","23_38","24_37","25_37","26_37","27_31","27_37","28_28"}, <29> {"0_38","23_38","24_37","25_37","26_37","27_31","27_37","29_29"}, <30> {"0_38","23_38","24_37","25_37","26_37","27_31","27_37","30_30"}, <31> {"0_38","23_38","24_37","25_37","26_37","27_31","27_37","31_31"}, <32> {"0_38","23_38","24_37","25_37","26_37","27_37","32_32","32_37"}, <33> {"0_38","23_38","24_37","25_37","26_37","27_37","32_37","33_33","33_35","33_37"}, <34> {"0_38","23_38","24_37","25_37","26_37","27_37","32_37","33_35","33_37","34_34"}, <35> {"0_38","23_38","24_37","25_37","26_37","27_37","32_37","33_35","33_37","35_35"}, <36> {"0_38","23_38","24_37","25_37","26_37","27_37","32_37","33_37","36_36"}, <37> {"0_38","23_38","24_37","25_37","26_37","27_37","32_37","33_37","37_37"}, <38> {"0_38","23_38","38_38"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Buildings"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Cardinal_numbers"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Degree"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Quantity"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Leadership"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Arriving"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Natural_features"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Hostile_encounter"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Board_vehicle"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Calendric_unit"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Travel"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
subto overlap11: forall <i> in I do 
 sum <r> in Roles["Origin"] do 
 sum <s> in G[i] do z11[r,s] <= 1;
subto overlap12: forall <i> in I do 
 sum <r> in Roles["Relational_political_locales"] do 
 sum <s> in G[i] do z12[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Buildings"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Cardinal_numbers"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Degree"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Quantity"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Leadership"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Arriving"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Natural_features"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Hostile_encounter"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Board_vehicle"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Calendric_unit"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Travel"] do sum <s> in Spans : z10[r,s] == 1;
subto unique11: forall <r> in Roles["Origin"] do sum <s> in Spans : z11[r,s] == 1;
subto unique12: forall <r> in Roles["Relational_political_locales"] do sum <s> in Spans : z12[r,s] == 1;
#pairwise exclusion constraint
set Exc3 := {<"Individuals","Mass">};
subto exclusion3: forall <ri,rj> in Exc3 do z3[ri,"-1_-1"] + z3[rj,"-1_-1"] >= 1;
set Exc7 := {<"Side_1","Sides">,<"Side_2","Sides">};
subto exclusion7: forall <ri,rj> in Exc7 do z7[ri,"-1_-1"] + z7[rj,"-1_-1"] >= 1;
set Exc10 := {<"Area","Direction">,<"Area","Goal">,<"Area","Path">,<"Area","Source">};
subto exclusion10: forall <ri,rj> in Exc10 do z10[ri,"-1_-1"] + z10[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
set Reqr7 := {<"Side_1","Side_2">};
subto require7: forall <ri,rj> in Reqr7 do z7[ri,"-1_-1"] - z7[rj,"-1_-1"] == 0;
