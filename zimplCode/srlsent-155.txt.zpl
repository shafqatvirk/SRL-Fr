# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Statement","Increment","Cardinal_numbers","People","People_by_age","People_by_age","Death","Cure","Medical_conditions","Measurable_attributes","Possibilities","Revenge"};
set Roles[Frames] :=  <"Statement"> {"Message","Medium","Place","Iteration","Means","Depictive","Manner","Epistemic_stance","Speaker","Event_description","Addressee","Time","Containing_event","Degree","Occasion","Group","Frequency","Particular_iteration","Internal_cause","Topic"}, <"Increment"> {"Initial_set","Class","Increment","Added_set"}, <"Cardinal_numbers"> {"Precision","Number","Multiplier","Entity"}, <"People"> {"Person","Ethnicity","Persistent_characteristic","Context_of_acquaintance","Descriptor","Age","Origin"}, <"People_by_age"> {"Person","Ethnicity","Persistent_characteristic","Context_of_acquaintance","Descriptor","Age","Origin"}, <"People_by_age"> {"Person","Ethnicity","Persistent_characteristic","Context_of_acquaintance","Descriptor","Age","Origin"}, <"Death"> {"Place","Sub_event","Result","Degree","Manner","Time","Protagonist","Reason","Depictive","Cause"}, <"Cure"> {"Duration","Place","Degree","Patient","Manner","Treatment","Healer","Time","Medication","Body_part","Affliction"}, <"Medical_conditions"> {"Place","Symptom","Body_Part","Degree","Patient","Name","Ailment","Cause"}, <"Measurable_attributes"> {"Circumstances","Attribute","Degree","Dimension","Entity"}, <"Possibilities"> {"Purpose","Event","Salient_entity","Agent","Number_of_possibilities"}, <"Revenge"> {"Purpose","Avenger","Depictive","Offender","Instrument","Place","Degree","Injury","Duration","Punishment","Injured_Party","Manner","Time"};
set Spans := {"-1_-1","0_0","0_1","0_27","0_8","10_10","10_14","11_11","12_12","13_13","14_14","15_15","16_16","17_17","17_26","18_18","18_26","19_19","19_20","19_26","1_1","1_8","20_20","21_21","21_26","22_22","22_26","23_23","23_26","24_24","25_25","26_26","27_27","2_2","2_8","3_3","3_8","4_4","4_7","4_8","5_5","5_7","6_6","7_7","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Statement"]] binary;
var z1[Assignment["Increment"]] binary;
var z2[Assignment["Cardinal_numbers"]] binary;
var z3[Assignment["People"]] binary;
var z4[Assignment["People_by_age"]] binary;
var z5[Assignment["People_by_age"]] binary;
var z6[Assignment["Death"]] binary;
var z7[Assignment["Cure"]] binary;
var z8[Assignment["Medical_conditions"]] binary;
var z9[Assignment["Measurable_attributes"]] binary;
var z10[Assignment["Possibilities"]] binary;
var z11[Assignment["Revenge"]] binary;
param probabilities0[Assignment["Statement"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Increment"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Cardinal_numbers"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["People"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["People_by_age"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["People_by_age"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Death"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Cure"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Medical_conditions"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Measurable_attributes"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Possibilities"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;
param probabilities11[Assignment["Revenge"]] := read "../frameData/frame11.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Statement"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Increment"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Cardinal_numbers"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["People"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["People_by_age"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["People_by_age"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Death"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Cure"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Medical_conditions"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Measurable_attributes"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Possibilities"] : probabilities10[r,s] * z10[r,s])+(sum <r,s> in Assignment["Revenge"] : probabilities11[r,s] * z11[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 27};
set G[I] := <0> {"0_0","0_1","0_27","0_8"}, <1> {"0_1","0_27","0_8","1_1","1_8"}, <2> {"0_27","0_8","1_8","2_2","2_8"}, <3> {"0_27","0_8","1_8","2_8","3_3","3_8"}, <4> {"0_27","0_8","1_8","2_8","3_8","4_4","4_7","4_8"}, <5> {"0_27","0_8","1_8","2_8","3_8","4_7","4_8","5_5","5_7"}, <6> {"0_27","0_8","1_8","2_8","3_8","4_7","4_8","5_7","6_6"}, <7> {"0_27","0_8","1_8","2_8","3_8","4_7","4_8","5_7","7_7"}, <8> {"0_27","0_8","1_8","2_8","3_8","4_8","8_8"}, <9> {"0_27","9_9"}, <10> {"0_27","10_10","10_14"}, <11> {"0_27","10_14","11_11"}, <12> {"0_27","10_14","12_12"}, <13> {"0_27","10_14","13_13"}, <14> {"0_27","10_14","14_14"}, <15> {"0_27","15_15"}, <16> {"0_27","16_16"}, <17> {"0_27","17_17","17_26"}, <18> {"0_27","17_26","18_18","18_26"}, <19> {"0_27","17_26","18_26","19_19","19_20","19_26"}, <20> {"0_27","17_26","18_26","19_20","19_26","20_20"}, <21> {"0_27","17_26","18_26","19_26","21_21","21_26"}, <22> {"0_27","17_26","18_26","19_26","21_26","22_22","22_26"}, <23> {"0_27","17_26","18_26","19_26","21_26","22_26","23_23","23_26"}, <24> {"0_27","17_26","18_26","19_26","21_26","22_26","23_26","24_24"}, <25> {"0_27","17_26","18_26","19_26","21_26","22_26","23_26","25_25"}, <26> {"0_27","17_26","18_26","19_26","21_26","22_26","23_26","26_26"}, <27> {"0_27","27_27"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Statement"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Increment"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Cardinal_numbers"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["People"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["People_by_age"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["People_by_age"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Death"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Cure"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Medical_conditions"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Measurable_attributes"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Possibilities"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
subto overlap11: forall <i> in I do 
 sum <r> in Roles["Revenge"] do 
 sum <s> in G[i] do z11[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Statement"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Increment"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Cardinal_numbers"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["People"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["People_by_age"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["People_by_age"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Death"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Cure"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Medical_conditions"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Measurable_attributes"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Possibilities"] do sum <s> in Spans : z10[r,s] == 1;
subto unique11: forall <r> in Roles["Revenge"] do sum <s> in Spans : z11[r,s] == 1;
#pairwise exclusion constraint
#pairwise requirement constraint
