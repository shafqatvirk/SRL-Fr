# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Locale_by_use","Locale_by_use","Buildings","Locale_by_use","Supply","Place_weight_on","Locative_relation","Roadways","Roadways"};
set Roles[Frames] :=  <"Locale_by_use"> {"Formational_cause","Use","Locale","Relative_location","Name","Container_possessor","Constituent_parts","Descriptor"}, <"Locale_by_use"> {"Formational_cause","Use","Locale","Relative_location","Name","Container_possessor","Constituent_parts","Descriptor"}, <"Buildings"> {"Type","Place","Function","Time_of_creation","Relative_location","Name","Building","Descriptor","Material","Builder"}, <"Locale_by_use"> {"Formational_cause","Use","Locale","Relative_location","Name","Container_possessor","Constituent_parts","Descriptor"}, <"Supply"> {"Recipient","Circumstances","Time","Supplier","Place","Co_theme","Purpose","Period_of_iterations","Means","Source","Theme","Purpose_of_recipient","Manner"}, <"Place_weight_on"> {"Purpose","Competing_consideration","Time","Undertaking","Place","Frequency","Degree","Artifact","Consideration","Manner","Action","Agent"}, <"Locative_relation"> {"Time","Distance","Figure","Ground","Direction","Figures"}, <"Roadways"> {"Characteristic","Length","Use","Frequency_of_use","Goal","Relative_location","Endpoints","Direction","Source","Material","Path","Roadway","Name","Abundant_entities"}, <"Roadways"> {"Characteristic","Length","Use","Frequency_of_use","Goal","Relative_location","Endpoints","Direction","Source","Material","Path","Roadway","Name","Abundant_entities"};
set Spans := {"-1_-1","0_0","0_1","0_20","0_8","10_10","10_12","11_11","12_12","13_13","13_19","14_14","15_15","15_19","16_16","16_19","17_17","18_18","19_19","1_1","20_20","2_2","3_3","4_4","5_5","5_7","6_6","6_7","7_7","8_8","9_20","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Locale_by_use"]] binary;
var z1[Assignment["Locale_by_use"]] binary;
var z2[Assignment["Buildings"]] binary;
var z3[Assignment["Locale_by_use"]] binary;
var z4[Assignment["Supply"]] binary;
var z5[Assignment["Place_weight_on"]] binary;
var z6[Assignment["Locative_relation"]] binary;
var z7[Assignment["Roadways"]] binary;
var z8[Assignment["Roadways"]] binary;
param probabilities0[Assignment["Locale_by_use"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Locale_by_use"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Buildings"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Locale_by_use"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Supply"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Place_weight_on"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Locative_relation"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Roadways"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Roadways"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Locale_by_use"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Locale_by_use"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Buildings"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Locale_by_use"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Supply"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Place_weight_on"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Locative_relation"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Roadways"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Roadways"] : probabilities8[r,s] * z8[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 20};
set G[I] := <0> {"0_0","0_1","0_20","0_8"}, <1> {"0_1","0_20","0_8","1_1"}, <2> {"0_20","0_8","2_2"}, <3> {"0_20","0_8","3_3"}, <4> {"0_20","0_8","4_4"}, <5> {"0_20","0_8","5_5","5_7"}, <6> {"0_20","0_8","5_7","6_6","6_7"}, <7> {"0_20","0_8","5_7","6_7","7_7"}, <8> {"0_20","0_8","8_8"}, <9> {"0_20","9_20","9_9"}, <10> {"0_20","10_10","10_12","9_20"}, <11> {"0_20","10_12","11_11","9_20"}, <12> {"0_20","10_12","12_12","9_20"}, <13> {"0_20","13_13","13_19","9_20"}, <14> {"0_20","13_19","14_14","9_20"}, <15> {"0_20","13_19","15_15","15_19","9_20"}, <16> {"0_20","13_19","15_19","16_16","16_19","9_20"}, <17> {"0_20","13_19","15_19","16_19","17_17","9_20"}, <18> {"0_20","13_19","15_19","16_19","18_18","9_20"}, <19> {"0_20","13_19","15_19","16_19","19_19","9_20"}, <20> {"0_20","20_20","9_20"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Locale_by_use"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Locale_by_use"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Buildings"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Locale_by_use"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Supply"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Place_weight_on"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Locative_relation"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Roadways"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Roadways"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Locale_by_use"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Locale_by_use"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Buildings"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Locale_by_use"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Supply"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Place_weight_on"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Locative_relation"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Roadways"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Roadways"] do sum <s> in Spans : z8[r,s] == 1;
#pairwise exclusion constraint
set Exc5 := {<"Agent","Artifact">,<"Action","Agent">};
subto exclusion5: forall <ri,rj> in Exc5 do z5[ri,"-1_-1"] + z5[rj,"-1_-1"] >= 1;
set Exc6 := {<"Figure","Figures">,<"Figures","Ground">};
subto exclusion6: forall <ri,rj> in Exc6 do z6[ri,"-1_-1"] + z6[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
