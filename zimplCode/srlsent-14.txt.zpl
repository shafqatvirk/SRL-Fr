# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Locale_by_use","Building","Quantity","Natural_features","Roadways","Gizmo","Cause_expansion","Cause_to_make_progress"};
set Roles[Frames] :=  <"Locale_by_use"> {"Formational_cause","Use","Locale","Relative_location","Name","Container_possessor","Constituent_parts","Descriptor"}, <"Building"> {"Purpose","Result","Components","Time","Descriptor","Instrument","Place","Created_entity","Means","Period_of_iterations","Particular_iteration","Duration","Beneficiary","Manner","Agent"}, <"Quantity"> {"Mass","Q_Prop","Degree","Quantity","Individuals"}, <"Natural_features"> {"Type","Locale","Relative_location","Name","Formational_cause","Container_possessor","Constituent_parts","Descriptor"}, <"Roadways"> {"Characteristic","Length","Use","Frequency_of_use","Goal","Relative_location","Endpoints","Direction","Source","Material","Path","Roadway","Name","Abundant_entities"}, <"Gizmo"> {"Descriptor","Power_source","Gizmo","Use","User"}, <"Cause_expansion"> {"Purpose","Size_change","Time","Instrument","Co_Variable","Initial_size","Group","Dimension","Means","Rate","Cause","Place","Item","Elapsed_time","Manner","Result_size","Agent"}, <"Cause_to_make_progress"> {"Purpose","Time","Place","Degree","Rate","Means","Domain","Duration","Particular_iteration","Project","Post_state","Manner","Explanation","Agent","Prior_state"};
set Spans := {"-1_-1","0_0","0_1","0_19","0_9","10_10","11_11","12_12","12_13","13_13","14_14","15_15","15_18","16_16","16_18","17_17","18_18","19_19","1_1","1_9","2_2","2_9","3_3","3_9","4_4","4_9","5_5","5_6","5_9","6_6","7_7","7_9","8_8","8_9","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Locale_by_use"]] binary;
var z1[Assignment["Building"]] binary;
var z2[Assignment["Quantity"]] binary;
var z3[Assignment["Natural_features"]] binary;
var z4[Assignment["Roadways"]] binary;
var z5[Assignment["Gizmo"]] binary;
var z6[Assignment["Cause_expansion"]] binary;
var z7[Assignment["Cause_to_make_progress"]] binary;
param probabilities0[Assignment["Locale_by_use"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Building"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Quantity"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Natural_features"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Roadways"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Gizmo"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Cause_expansion"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Cause_to_make_progress"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Locale_by_use"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Building"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Quantity"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Natural_features"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Roadways"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Gizmo"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Cause_expansion"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Cause_to_make_progress"] : probabilities7[r,s] * z7[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 19};
set G[I] := <0> {"0_0","0_1","0_19","0_9"}, <1> {"0_1","0_19","0_9","1_1","1_9"}, <2> {"0_19","0_9","1_9","2_2","2_9"}, <3> {"0_19","0_9","1_9","2_9","3_3","3_9"}, <4> {"0_19","0_9","1_9","2_9","3_9","4_4","4_9"}, <5> {"0_19","0_9","1_9","2_9","3_9","4_9","5_5","5_6","5_9"}, <6> {"0_19","0_9","1_9","2_9","3_9","4_9","5_6","5_9","6_6"}, <7> {"0_19","0_9","1_9","2_9","3_9","4_9","5_9","7_7","7_9"}, <8> {"0_19","0_9","1_9","2_9","3_9","4_9","5_9","7_9","8_8","8_9"}, <9> {"0_19","0_9","1_9","2_9","3_9","4_9","5_9","7_9","8_9","9_9"}, <10> {"0_19","10_10"}, <11> {"0_19","11_11"}, <12> {"0_19","12_12","12_13"}, <13> {"0_19","12_13","13_13"}, <14> {"0_19","14_14"}, <15> {"0_19","15_15","15_18"}, <16> {"0_19","15_18","16_16","16_18"}, <17> {"0_19","15_18","16_18","17_17"}, <18> {"0_19","15_18","16_18","18_18"}, <19> {"0_19","19_19"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Locale_by_use"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Building"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Quantity"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Natural_features"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Roadways"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Gizmo"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Cause_expansion"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Cause_to_make_progress"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Locale_by_use"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Building"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Quantity"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Natural_features"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Roadways"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Gizmo"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Cause_expansion"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Cause_to_make_progress"] do sum <s> in Spans : z7[r,s] == 1;
#pairwise exclusion constraint
set Exc2 := {<"Individuals","Mass">};
subto exclusion2: forall <ri,rj> in Exc2 do z2[ri,"-1_-1"] + z2[rj,"-1_-1"] >= 1;
set Exc6 := {<"Agent","Cause">};
subto exclusion6: forall <ri,rj> in Exc6 do z6[ri,"-1_-1"] + z6[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
