# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Weapon","Leadership","Estimating","Cardinal_numbers","Cardinal_numbers","Calendric_unit","Statement","Seeking_to_achieve","Dimension","Range","Artifact"};
set Roles[Frames] :=  <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Leadership"> {"Domain","Leader","Type","Depictive","Descriptor","Degree","Means","Role","Activity","Duration","Governed","Manner","Time"}, <"Estimating"> {"Result","Circumstances","Value","Time","Place","Frequency","Means","Cognizer","Estimation","Evidence","Feature","Question","Item","Manner","Explanation"}, <"Cardinal_numbers"> {"Precision","Number","Multiplier","Entity"}, <"Cardinal_numbers"> {"Precision","Number","Multiplier","Entity"}, <"Calendric_unit"> {"Relative_time","Unit","Count","Name","Salient_event","Whole"}, <"Statement"> {"Message","Medium","Place","Iteration","Means","Depictive","Manner","Epistemic_stance","Speaker","Event_description","Addressee","Time","Containing_event","Degree","Occasion","Group","Frequency","Particular_iteration","Internal_cause","Topic"}, <"Seeking_to_achieve"> {"Purpose","Circumstances","State_of_affairs","Degree","Means","Source","Sought_entity","Depictive","Duration","Time","Beneficiary","Manner","Explanation","Agent"}, <"Dimension"> {"Object","Domain","Measurement","Dimension","Location"}, <"Range"> {"Instrument","Event","Participant","Distance"}, <"Artifact"> {"Creator","Type","Use","Material","Time_of_creation","Name","Artifact"};
set Spans := {"-1_-1","0_0","0_1","0_2","0_25","0_6","10_10","10_11","10_24","11_11","11_24","12_12","12_24","13_13","13_15","13_24","14_14","15_15","16_16","16_24","17_17","17_19","17_24","18_18","19_19","1_1","20_20","20_23","20_24","21_21","22_22","23_23","24_24","25_25","2_2","2_6","3_3","3_5","3_6","4_4","5_5","6_6","7_7","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Weapon"]] binary;
var z1[Assignment["Leadership"]] binary;
var z2[Assignment["Estimating"]] binary;
var z3[Assignment["Cardinal_numbers"]] binary;
var z4[Assignment["Cardinal_numbers"]] binary;
var z5[Assignment["Calendric_unit"]] binary;
var z6[Assignment["Statement"]] binary;
var z7[Assignment["Seeking_to_achieve"]] binary;
var z8[Assignment["Dimension"]] binary;
var z9[Assignment["Range"]] binary;
var z10[Assignment["Artifact"]] binary;
param probabilities0[Assignment["Weapon"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Leadership"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Estimating"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Cardinal_numbers"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Cardinal_numbers"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Calendric_unit"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Statement"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Seeking_to_achieve"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Dimension"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Range"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Artifact"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Weapon"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Leadership"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Estimating"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Cardinal_numbers"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Cardinal_numbers"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Calendric_unit"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Statement"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Seeking_to_achieve"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Dimension"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Range"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Artifact"] : probabilities10[r,s] * z10[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 25};
set G[I] := <0> {"0_0","0_1","0_2","0_25","0_6"}, <1> {"0_1","0_2","0_25","0_6","1_1"}, <2> {"0_2","0_25","0_6","2_2","2_6"}, <3> {"0_25","0_6","2_6","3_3","3_5","3_6"}, <4> {"0_25","0_6","2_6","3_5","3_6","4_4"}, <5> {"0_25","0_6","2_6","3_5","3_6","5_5"}, <6> {"0_25","0_6","2_6","3_6","6_6"}, <7> {"0_25","7_7"}, <8> {"0_25","8_8"}, <9> {"0_25","9_9"}, <10> {"0_25","10_10","10_11","10_24"}, <11> {"0_25","10_11","10_24","11_11","11_24"}, <12> {"0_25","10_24","11_24","12_12","12_24"}, <13> {"0_25","10_24","11_24","12_24","13_13","13_15","13_24"}, <14> {"0_25","10_24","11_24","12_24","13_15","13_24","14_14"}, <15> {"0_25","10_24","11_24","12_24","13_15","13_24","15_15"}, <16> {"0_25","10_24","11_24","12_24","13_24","16_16","16_24"}, <17> {"0_25","10_24","11_24","12_24","13_24","16_24","17_17","17_19","17_24"}, <18> {"0_25","10_24","11_24","12_24","13_24","16_24","17_19","17_24","18_18"}, <19> {"0_25","10_24","11_24","12_24","13_24","16_24","17_19","17_24","19_19"}, <20> {"0_25","10_24","11_24","12_24","13_24","16_24","17_24","20_20","20_23","20_24"}, <21> {"0_25","10_24","11_24","12_24","13_24","16_24","17_24","20_23","20_24","21_21"}, <22> {"0_25","10_24","11_24","12_24","13_24","16_24","17_24","20_23","20_24","22_22"}, <23> {"0_25","10_24","11_24","12_24","13_24","16_24","17_24","20_23","20_24","23_23"}, <24> {"0_25","10_24","11_24","12_24","13_24","16_24","17_24","20_24","24_24"}, <25> {"0_25","25_25"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Leadership"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Estimating"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Cardinal_numbers"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Cardinal_numbers"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Calendric_unit"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Statement"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Seeking_to_achieve"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Dimension"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Range"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Artifact"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Weapon"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Leadership"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Estimating"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Cardinal_numbers"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Cardinal_numbers"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Calendric_unit"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Statement"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Seeking_to_achieve"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Dimension"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Range"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Artifact"] do sum <s> in Spans : z10[r,s] == 1;
#pairwise exclusion constraint
set Exc2 := {<"Estimation","Value">};
subto exclusion2: forall <ri,rj> in Exc2 do z2[ri,"-1_-1"] + z2[rj,"-1_-1"] >= 1;
set Exc7 := {<"Sought_entity","State_of_affairs">};
subto exclusion7: forall <ri,rj> in Exc7 do z7[ri,"-1_-1"] + z7[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
set Reqr2 := {<"Feature","Item">,<"Item","Value">,<"Question","Value">};
subto require2: forall <ri,rj> in Reqr2 do z2[ri,"-1_-1"] - z2[rj,"-1_-1"] == 0;
