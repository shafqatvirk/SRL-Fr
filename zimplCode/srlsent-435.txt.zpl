# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Weapon","Leadership","Likelihood","Being_employed","Statement","Statement","Likelihood","Receiving","Artifact"};
set Roles[Frames] :=  <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Leadership"> {"Domain","Leader","Type","Depictive","Descriptor","Degree","Means","Role","Activity","Duration","Governed","Manner","Time"}, <"Likelihood"> {"Time","Place","Circumstances","Reason","Hypothetical_event","Degree"}, <"Being_employed"> {"Type","Rank","Time","Place","Field","Employer","Place_of_employment","Amount_of_work","Compensation","Event_description","Duration","Frequency","Task","Employee","Contract_basis","Manner","Position"}, <"Statement"> {"Message","Medium","Place","Iteration","Means","Depictive","Manner","Epistemic_stance","Speaker","Event_description","Addressee","Time","Containing_event","Degree","Occasion","Group","Frequency","Particular_iteration","Internal_cause","Topic"}, <"Statement"> {"Message","Medium","Place","Iteration","Means","Depictive","Manner","Epistemic_stance","Speaker","Event_description","Addressee","Time","Containing_event","Degree","Occasion","Group","Frequency","Particular_iteration","Internal_cause","Topic"}, <"Likelihood"> {"Time","Place","Circumstances","Reason","Hypothetical_event","Degree"}, <"Receiving"> {"Mode_of_transfer","Place","Theme","Path","Manner","Donor","Means","Time","Purpose_of_theme","Countertransfer","Recipient"}, <"Artifact"> {"Creator","Type","Use","Material","Time_of_creation","Name","Artifact"};
set Spans := {"-1_-1","0_0","0_26","0_4","0_5","0_9","10_10","11_11","12_12","12_13","13_13","14_14","15_15","15_16","15_25","16_16","16_25","17_17","17_25","18_18","18_20","19_19","1_1","20_20","21_21","21_25","22_22","22_24","22_25","23_23","24_24","25_25","26_26","2_2","3_3","4_4","5_5","5_9","6_6","6_9","7_7","7_9","8_8","8_9","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Weapon"]] binary;
var z1[Assignment["Leadership"]] binary;
var z2[Assignment["Likelihood"]] binary;
var z3[Assignment["Being_employed"]] binary;
var z4[Assignment["Statement"]] binary;
var z5[Assignment["Statement"]] binary;
var z6[Assignment["Likelihood"]] binary;
var z7[Assignment["Receiving"]] binary;
var z8[Assignment["Artifact"]] binary;
param probabilities0[Assignment["Weapon"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Leadership"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Likelihood"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Being_employed"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Statement"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Statement"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Likelihood"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Receiving"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Artifact"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Weapon"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Leadership"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Likelihood"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Being_employed"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Statement"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Statement"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Likelihood"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Receiving"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Artifact"] : probabilities8[r,s] * z8[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 26};
set G[I] := <0> {"0_0","0_26","0_4","0_5","0_9"}, <1> {"0_26","0_4","0_5","0_9","1_1"}, <2> {"0_26","0_4","0_5","0_9","2_2"}, <3> {"0_26","0_4","0_5","0_9","3_3"}, <4> {"0_26","0_4","0_5","0_9","4_4"}, <5> {"0_26","0_5","0_9","5_5","5_9"}, <6> {"0_26","0_9","5_9","6_6","6_9"}, <7> {"0_26","0_9","5_9","6_9","7_7","7_9"}, <8> {"0_26","0_9","5_9","6_9","7_9","8_8","8_9"}, <9> {"0_26","0_9","5_9","6_9","7_9","8_9","9_9"}, <10> {"0_26","10_10"}, <11> {"0_26","11_11"}, <12> {"0_26","12_12","12_13"}, <13> {"0_26","12_13","13_13"}, <14> {"0_26","14_14"}, <15> {"0_26","15_15","15_16","15_25"}, <16> {"0_26","15_16","15_25","16_16","16_25"}, <17> {"0_26","15_25","16_25","17_17","17_25"}, <18> {"0_26","15_25","16_25","17_25","18_18","18_20"}, <19> {"0_26","15_25","16_25","17_25","18_20","19_19"}, <20> {"0_26","15_25","16_25","17_25","18_20","20_20"}, <21> {"0_26","15_25","16_25","17_25","21_21","21_25"}, <22> {"0_26","15_25","16_25","17_25","21_25","22_22","22_24","22_25"}, <23> {"0_26","15_25","16_25","17_25","21_25","22_24","22_25","23_23"}, <24> {"0_26","15_25","16_25","17_25","21_25","22_24","22_25","24_24"}, <25> {"0_26","15_25","16_25","17_25","21_25","22_25","25_25"}, <26> {"0_26","26_26"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Leadership"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Likelihood"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Being_employed"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Statement"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Statement"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Likelihood"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Receiving"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Artifact"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Weapon"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Leadership"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Likelihood"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Being_employed"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Statement"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Statement"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Likelihood"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Receiving"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Artifact"] do sum <s> in Spans : z8[r,s] == 1;
#pairwise exclusion constraint
#pairwise requirement constraint
