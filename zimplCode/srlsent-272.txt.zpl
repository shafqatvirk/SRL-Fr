# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Quantity","Political_locales","Getting","Change_position_on_a_scale","Military","Assistance","Make_agreement_on_action","Commerce_sell","Origin","Weapon","Intentionally_act","Weapon","Artifact","Discussion"};
set Roles[Frames] :=  <"Quantity"> {"Mass","Q_Prop","Degree","Quantity","Individuals"}, <"Political_locales"> {"Relative_location","Constituent_parts","Container_possessor","Descriptor","Name","Population","Locale"}, <"Getting"> {"Recipient","Result","Time","Place","Purpose","Means","Source","Theme","Reason","Beneficiary","Manner","Concessive"}, <"Change_position_on_a_scale"> {"Speed","Duration","Item","Value_range","Attribute","Correlate","Initial_value","Circumstances","Difference","Manner","Result","Final_state","Time","Period_of_iterations","Degree","Group","Final_correlate","Initial_correlate","Initial_state","Particular_iteration","Path","Final_value","Place"}, <"Military"> {"Members","Descriptor","Possessor","Goal","Domain","Force"}, <"Assistance"> {"Purpose","Time","Goal","Place","Frequency","Degree","Helper","Means","Benefited_party","Domain","Duration","Focal_entity","Manner","Explanation"}, <"Make_agreement_on_action"> {"Place","Party_2","Party_1","Medium","Topic","Manner","Time","Parties","Obligation","Descriptor"}, <"Commerce_sell"> {"Purpose","Result","Unit","Purpose_of_Goods","Goods","Place","Seller","Rate","Manner","Relay","Buyer","Means","Time","Money"}, <"Origin"> {"Entity","Origin"}, <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Intentionally_act"> {"Purpose","Result","Time","Place","Frequency","Means","Event_dscription","Period_of_iterations","Domain","Act","Particular_iteration","Manner","Explanation","Agent"}, <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Artifact"> {"Creator","Type","Use","Material","Time_of_creation","Name","Artifact"}, <"Discussion"> {"Purpose","Topic","Depictive","Containing_event","Amount_of_discussion","Frequency","Means","Interlocutor_2","Interlocutor_1","Period_of_iterations","Means_of_communication","Domain","Duration","Place","Manner","Interlocutors","Time"};
set Spans := {"-1_-1","0_0","0_2","0_24","10_10","11_11","12_12","13_13","13_23","14_14","14_23","15_15","15_16","16_16","17_17","18_18","18_23","19_19","19_23","1_1","1_2","20_20","20_23","21_21","22_22","23_23","24_24","2_2","3_3","4_4","4_6","5_5","6_6","7_7","8_12","8_23","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Quantity"]] binary;
var z1[Assignment["Political_locales"]] binary;
var z2[Assignment["Getting"]] binary;
var z3[Assignment["Change_position_on_a_scale"]] binary;
var z4[Assignment["Military"]] binary;
var z5[Assignment["Assistance"]] binary;
var z6[Assignment["Make_agreement_on_action"]] binary;
var z7[Assignment["Commerce_sell"]] binary;
var z8[Assignment["Origin"]] binary;
var z9[Assignment["Weapon"]] binary;
var z10[Assignment["Intentionally_act"]] binary;
var z11[Assignment["Weapon"]] binary;
var z12[Assignment["Artifact"]] binary;
var z13[Assignment["Discussion"]] binary;
param probabilities0[Assignment["Quantity"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Political_locales"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Getting"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Change_position_on_a_scale"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Military"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Assistance"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Make_agreement_on_action"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Commerce_sell"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Origin"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Weapon"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Intentionally_act"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;
param probabilities11[Assignment["Weapon"]] := read "../frameData/frame11.txt" as "<1s,2s> 3n" skip 2;
param probabilities12[Assignment["Artifact"]] := read "../frameData/frame12.txt" as "<1s,2s> 3n" skip 2;
param probabilities13[Assignment["Discussion"]] := read "../frameData/frame13.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Quantity"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Political_locales"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Getting"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Change_position_on_a_scale"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Military"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Assistance"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Make_agreement_on_action"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Commerce_sell"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Origin"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Weapon"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Intentionally_act"] : probabilities10[r,s] * z10[r,s])+(sum <r,s> in Assignment["Weapon"] : probabilities11[r,s] * z11[r,s])+(sum <r,s> in Assignment["Artifact"] : probabilities12[r,s] * z12[r,s])+(sum <r,s> in Assignment["Discussion"] : probabilities13[r,s] * z13[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 24};
set G[I] := <0> {"0_0","0_2","0_24"}, <1> {"0_2","0_24","1_1","1_2"}, <2> {"0_2","0_24","1_2","2_2"}, <3> {"0_24","3_3"}, <4> {"0_24","4_4","4_6"}, <5> {"0_24","4_6","5_5"}, <6> {"0_24","4_6","6_6"}, <7> {"0_24","7_7"}, <8> {"0_24","8_12","8_23","8_8"}, <9> {"0_24","8_12","8_23","9_9"}, <10> {"0_24","10_10","8_12","8_23"}, <11> {"0_24","11_11","8_12","8_23"}, <12> {"0_24","12_12","8_12","8_23"}, <13> {"0_24","13_13","13_23","8_23"}, <14> {"0_24","13_23","14_14","14_23","8_23"}, <15> {"0_24","13_23","14_23","15_15","15_16","8_23"}, <16> {"0_24","13_23","14_23","15_16","16_16","8_23"}, <17> {"0_24","13_23","14_23","17_17","8_23"}, <18> {"0_24","13_23","14_23","18_18","18_23","8_23"}, <19> {"0_24","13_23","14_23","18_23","19_19","19_23","8_23"}, <20> {"0_24","13_23","14_23","18_23","19_23","20_20","20_23","8_23"}, <21> {"0_24","13_23","14_23","18_23","19_23","20_23","21_21","8_23"}, <22> {"0_24","13_23","14_23","18_23","19_23","20_23","22_22","8_23"}, <23> {"0_24","13_23","14_23","18_23","19_23","20_23","23_23","8_23"}, <24> {"0_24","24_24"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Quantity"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Political_locales"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Getting"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Change_position_on_a_scale"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Military"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Assistance"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Make_agreement_on_action"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Commerce_sell"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Origin"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Intentionally_act"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
subto overlap11: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z11[r,s] <= 1;
subto overlap12: forall <i> in I do 
 sum <r> in Roles["Artifact"] do 
 sum <s> in G[i] do z12[r,s] <= 1;
subto overlap13: forall <i> in I do 
 sum <r> in Roles["Discussion"] do 
 sum <s> in G[i] do z13[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Quantity"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Political_locales"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Getting"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Change_position_on_a_scale"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Military"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Assistance"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Make_agreement_on_action"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Commerce_sell"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Origin"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Weapon"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Intentionally_act"] do sum <s> in Spans : z10[r,s] == 1;
subto unique11: forall <r> in Roles["Weapon"] do sum <s> in Spans : z11[r,s] == 1;
subto unique12: forall <r> in Roles["Artifact"] do sum <s> in Spans : z12[r,s] == 1;
subto unique13: forall <r> in Roles["Discussion"] do sum <s> in Spans : z13[r,s] == 1;
#pairwise exclusion constraint
set Exc0 := {<"Individuals","Mass">};
subto exclusion0: forall <ri,rj> in Exc0 do z0[ri,"-1_-1"] + z0[rj,"-1_-1"] >= 1;
set Exc3 := {<"Initial_state","Value_range">,<"Final_value","Value_range">,<"Initial_value","Value_range">,<"Final_state","Value_range">};
subto exclusion3: forall <ri,rj> in Exc3 do z3[ri,"-1_-1"] + z3[rj,"-1_-1"] >= 1;
set Exc6 := {<"Parties","Party_2">,<"Parties","Party_1">};
subto exclusion6: forall <ri,rj> in Exc6 do z6[ri,"-1_-1"] + z6[rj,"-1_-1"] >= 1;
set Exc13 := {<"Interlocutor_1","Interlocutors">,<"Interlocutor_2","Interlocutors">};
subto exclusion13: forall <ri,rj> in Exc13 do z13[ri,"-1_-1"] + z13[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
set Reqr13 := {<"Interlocutor_1","Interlocutor_2">};
subto require13: forall <ri,rj> in Reqr13 do z13[ri,"-1_-1"] - z13[rj,"-1_-1"] == 0;
