# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Existence","Weapon","Statement","Communication_manner","Request","Artifact","Relative_time","Ordinal_numbers","Weapon","Operational_testing","Calendric_unit","Leadership","Agree_or_refuse_to_act"};
set Roles[Frames] :=  <"Existence"> {"Place","Duration","Inherent_purpose","Entity","Point_of_view","Time","Circumstances","State","Cause"}, <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Statement"> {"Message","Medium","Place","Iteration","Means","Depictive","Manner","Epistemic_stance","Speaker","Event_description","Addressee","Time","Containing_event","Degree","Occasion","Group","Frequency","Particular_iteration","Internal_cause","Topic"}, <"Communication_manner"> {"Result","Topic","Time","Place","Addressee","Degree","Depictive","Duration","Reversive","Manner","Message","Speaker","Medium"}, <"Request"> {"Addressee","Containing_event","Medium","Topic","Speaker","Time","Message","Iteration","Means","Manner","Depictive"}, <"Artifact"> {"Creator","Type","Use","Material","Time_of_creation","Name","Artifact"}, <"Relative_time"> {"Focal_participant","Interval","Degree","Focal_occasion","Landmark_occasion"}, <"Ordinal_numbers"> {"Type","Item","Starting_point","Comparison_set","Basis_of_order"}, <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Operational_testing"> {"Purpose","Result","Circumstances","Desired_state","Time","Tester","Place","Degree","Unwanted_characteristics","Tested_property","Means","Period_of_iterations","Duration","Product","Manner"}, <"Calendric_unit"> {"Relative_time","Unit","Count","Name","Salient_event","Whole"}, <"Leadership"> {"Domain","Leader","Type","Depictive","Descriptor","Degree","Means","Role","Activity","Duration","Governed","Manner","Time"}, <"Agree_or_refuse_to_act"> {"Proposed_action","Particular_iteration","Frequency","Manner","Explanation","Time","Speaker","Depictive","Subevent","Purpose","Interlocutor"};
set Spans := {"-1_-1","0_0","0_31","10_10","11_11","11_12","11_16","12_12","12_16","13_13","13_16","14_14","15_15","16_16","17_17","17_25","18_18","18_19","18_22","18_25","19_19","1_1","20_20","21_21","22_22","23_23","23_25","24_24","24_25","25_25","26_26","27_27","28_28","28_29","29_29","2_2","30_30","31_31","3_3","4_30","4_4","5_30","5_5","6_25","6_30","6_6","6_8","7_7","8_8","9_25","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Existence"]] binary;
var z1[Assignment["Weapon"]] binary;
var z2[Assignment["Statement"]] binary;
var z3[Assignment["Communication_manner"]] binary;
var z4[Assignment["Request"]] binary;
var z5[Assignment["Artifact"]] binary;
var z6[Assignment["Relative_time"]] binary;
var z7[Assignment["Ordinal_numbers"]] binary;
var z8[Assignment["Weapon"]] binary;
var z9[Assignment["Operational_testing"]] binary;
var z10[Assignment["Calendric_unit"]] binary;
var z11[Assignment["Leadership"]] binary;
var z12[Assignment["Agree_or_refuse_to_act"]] binary;
param probabilities0[Assignment["Existence"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Weapon"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Statement"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Communication_manner"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Request"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Artifact"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Relative_time"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Ordinal_numbers"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Weapon"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Operational_testing"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Calendric_unit"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;
param probabilities11[Assignment["Leadership"]] := read "../frameData/frame11.txt" as "<1s,2s> 3n" skip 2;
param probabilities12[Assignment["Agree_or_refuse_to_act"]] := read "../frameData/frame12.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Existence"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Weapon"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Statement"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Communication_manner"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Request"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Artifact"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Relative_time"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Ordinal_numbers"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Weapon"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Operational_testing"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Calendric_unit"] : probabilities10[r,s] * z10[r,s])+(sum <r,s> in Assignment["Leadership"] : probabilities11[r,s] * z11[r,s])+(sum <r,s> in Assignment["Agree_or_refuse_to_act"] : probabilities12[r,s] * z12[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 31};
set G[I] := <0> {"0_0","0_31"}, <1> {"0_31","1_1"}, <2> {"0_31","2_2"}, <3> {"0_31","3_3"}, <4> {"0_31","4_30","4_4"}, <5> {"0_31","4_30","5_30","5_5"}, <6> {"0_31","4_30","5_30","6_25","6_30","6_6","6_8"}, <7> {"0_31","4_30","5_30","6_25","6_30","6_8","7_7"}, <8> {"0_31","4_30","5_30","6_25","6_30","6_8","8_8"}, <9> {"0_31","4_30","5_30","6_25","6_30","9_25","9_9"}, <10> {"0_31","10_10","4_30","5_30","6_25","6_30","9_25"}, <11> {"0_31","11_11","11_12","11_16","4_30","5_30","6_25","6_30","9_25"}, <12> {"0_31","11_12","11_16","12_12","12_16","4_30","5_30","6_25","6_30","9_25"}, <13> {"0_31","11_16","12_16","13_13","13_16","4_30","5_30","6_25","6_30","9_25"}, <14> {"0_31","11_16","12_16","13_16","14_14","4_30","5_30","6_25","6_30","9_25"}, <15> {"0_31","11_16","12_16","13_16","15_15","4_30","5_30","6_25","6_30","9_25"}, <16> {"0_31","11_16","12_16","13_16","16_16","4_30","5_30","6_25","6_30","9_25"}, <17> {"0_31","17_17","17_25","4_30","5_30","6_25","6_30","9_25"}, <18> {"0_31","17_25","18_18","18_19","18_22","18_25","4_30","5_30","6_25","6_30","9_25"}, <19> {"0_31","17_25","18_19","18_22","18_25","19_19","4_30","5_30","6_25","6_30","9_25"}, <20> {"0_31","17_25","18_22","18_25","20_20","4_30","5_30","6_25","6_30","9_25"}, <21> {"0_31","17_25","18_22","18_25","21_21","4_30","5_30","6_25","6_30","9_25"}, <22> {"0_31","17_25","18_22","18_25","22_22","4_30","5_30","6_25","6_30","9_25"}, <23> {"0_31","17_25","18_25","23_23","23_25","4_30","5_30","6_25","6_30","9_25"}, <24> {"0_31","17_25","18_25","23_25","24_24","24_25","4_30","5_30","6_25","6_30","9_25"}, <25> {"0_31","17_25","18_25","23_25","24_25","25_25","4_30","5_30","6_25","6_30","9_25"}, <26> {"0_31","26_26","4_30","5_30","6_30"}, <27> {"0_31","27_27","4_30","5_30","6_30"}, <28> {"0_31","28_28","28_29","4_30","5_30","6_30"}, <29> {"0_31","28_29","29_29","4_30","5_30","6_30"}, <30> {"0_31","30_30","4_30","5_30","6_30"}, <31> {"0_31","31_31"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Existence"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Statement"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Communication_manner"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Request"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Artifact"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Relative_time"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Ordinal_numbers"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Operational_testing"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Calendric_unit"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
subto overlap11: forall <i> in I do 
 sum <r> in Roles["Leadership"] do 
 sum <s> in G[i] do z11[r,s] <= 1;
subto overlap12: forall <i> in I do 
 sum <r> in Roles["Agree_or_refuse_to_act"] do 
 sum <s> in G[i] do z12[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Existence"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Weapon"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Statement"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Communication_manner"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Request"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Artifact"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Relative_time"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Ordinal_numbers"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Weapon"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Operational_testing"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Calendric_unit"] do sum <s> in Spans : z10[r,s] == 1;
subto unique11: forall <r> in Roles["Leadership"] do sum <s> in Spans : z11[r,s] == 1;
subto unique12: forall <r> in Roles["Agree_or_refuse_to_act"] do sum <s> in Spans : z12[r,s] == 1;
#pairwise exclusion constraint
set Exc7 := {<"Basis_of_order","Starting_point">};
subto exclusion7: forall <ri,rj> in Exc7 do z7[ri,"-1_-1"] + z7[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
