# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Terms_of_agreement","Make_agreement_on_action","Part_orientational","Supply","Version_sequence","Statement","Weapon","Locale_by_use","Ingredients","Supply","Having_or_lacking_access","Scrutiny","Verification","Completeness","Correctness","Version_sequence","Statement"};
set Roles[Frames] :=  <"Terms_of_agreement"> {"Descriptor","Requirements","Desired_state_of_affairs","Agreement"}, <"Make_agreement_on_action"> {"Place","Party_2","Party_1","Medium","Topic","Manner","Time","Parties","Obligation","Descriptor"}, <"Part_orientational"> {"Part_Prop","Part","Whole"}, <"Supply"> {"Recipient","Circumstances","Time","Supplier","Place","Co_theme","Purpose","Period_of_iterations","Means","Source","Theme","Purpose_of_recipient","Manner"}, <"Version_sequence"> {"Degree","Item"}, <"Statement"> {"Message","Medium","Place","Iteration","Means","Depictive","Manner","Epistemic_stance","Speaker","Event_description","Addressee","Time","Containing_event","Degree","Occasion","Group","Frequency","Particular_iteration","Internal_cause","Topic"}, <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Locale_by_use"> {"Formational_cause","Use","Locale","Relative_location","Name","Container_possessor","Constituent_parts","Descriptor"}, <"Ingredients"> {"Source","Type","Use","Material","Product","Descriptor"}, <"Supply"> {"Recipient","Circumstances","Time","Supplier","Place","Co_theme","Purpose","Period_of_iterations","Means","Source","Theme","Purpose_of_recipient","Manner"}, <"Having_or_lacking_access"> {"Useful_location","Circumstances","Theme","Degree"}, <"Scrutiny"> {"Instrument","Cognizer","Phenomenon","Degree","Manner","Ground","Time","Means","Medium","Purpose","Direction"}, <"Verification"> {"Purpose","Inspector","Time","Descriptor","Place","Degree","Means","Unconfirmed_content","Condition","Epistemic_stance","Manner","Explanation","Medium"}, <"Completeness"> {"Degree","Whole","Time"}, <"Correctness"> {"Domain","Result","Circumstances","Parameter","Time","Frequency","Degree","Communicative_act","Source","Information","Topic","Epistemic_stance","Manner","Medium"}, <"Version_sequence"> {"Degree","Item"}, <"Statement"> {"Message","Medium","Place","Iteration","Means","Depictive","Manner","Epistemic_stance","Speaker","Event_description","Addressee","Time","Containing_event","Degree","Occasion","Group","Frequency","Particular_iteration","Internal_cause","Topic"};
set Spans := {"-1_-1","0_0","0_37","0_5","10_10","10_20","11_11","12_12","13_13","14_14","15_15","15_20","16_16","16_20","17_17","18_18","19_19","1_1","1_2","1_5","20_20","21_21","22_22","22_36","23_23","23_36","24_24","24_36","25_25","25_26","25_36","26_26","26_36","27_27","27_28","27_36","28_28","28_36","29_29","29_32","29_36","2_2","30_30","31_31","32_32","33_33","33_36","34_34","34_36","35_35","36_36","37_37","3_3","3_5","4_4","4_5","5_5","6_6","7_7","7_8","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Terms_of_agreement"]] binary;
var z1[Assignment["Make_agreement_on_action"]] binary;
var z2[Assignment["Part_orientational"]] binary;
var z3[Assignment["Supply"]] binary;
var z4[Assignment["Version_sequence"]] binary;
var z5[Assignment["Statement"]] binary;
var z6[Assignment["Weapon"]] binary;
var z7[Assignment["Locale_by_use"]] binary;
var z8[Assignment["Ingredients"]] binary;
var z9[Assignment["Supply"]] binary;
var z10[Assignment["Having_or_lacking_access"]] binary;
var z11[Assignment["Scrutiny"]] binary;
var z12[Assignment["Verification"]] binary;
var z13[Assignment["Completeness"]] binary;
var z14[Assignment["Correctness"]] binary;
var z15[Assignment["Version_sequence"]] binary;
var z16[Assignment["Statement"]] binary;
param probabilities0[Assignment["Terms_of_agreement"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Make_agreement_on_action"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Part_orientational"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Supply"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Version_sequence"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Statement"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Weapon"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Locale_by_use"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Ingredients"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Supply"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Having_or_lacking_access"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;
param probabilities11[Assignment["Scrutiny"]] := read "../frameData/frame11.txt" as "<1s,2s> 3n" skip 2;
param probabilities12[Assignment["Verification"]] := read "../frameData/frame12.txt" as "<1s,2s> 3n" skip 2;
param probabilities13[Assignment["Completeness"]] := read "../frameData/frame13.txt" as "<1s,2s> 3n" skip 2;
param probabilities14[Assignment["Correctness"]] := read "../frameData/frame14.txt" as "<1s,2s> 3n" skip 2;
param probabilities15[Assignment["Version_sequence"]] := read "../frameData/frame15.txt" as "<1s,2s> 3n" skip 2;
param probabilities16[Assignment["Statement"]] := read "../frameData/frame16.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Terms_of_agreement"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Make_agreement_on_action"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Part_orientational"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Supply"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Version_sequence"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Statement"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Weapon"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Locale_by_use"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Ingredients"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Supply"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Having_or_lacking_access"] : probabilities10[r,s] * z10[r,s])+(sum <r,s> in Assignment["Scrutiny"] : probabilities11[r,s] * z11[r,s])+(sum <r,s> in Assignment["Verification"] : probabilities12[r,s] * z12[r,s])+(sum <r,s> in Assignment["Completeness"] : probabilities13[r,s] * z13[r,s])+(sum <r,s> in Assignment["Correctness"] : probabilities14[r,s] * z14[r,s])+(sum <r,s> in Assignment["Version_sequence"] : probabilities15[r,s] * z15[r,s])+(sum <r,s> in Assignment["Statement"] : probabilities16[r,s] * z16[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 37};
set G[I] := <0> {"0_0","0_37","0_5"}, <1> {"0_37","0_5","1_1","1_2","1_5"}, <2> {"0_37","0_5","1_2","1_5","2_2"}, <3> {"0_37","0_5","1_5","3_3","3_5"}, <4> {"0_37","0_5","1_5","3_5","4_4","4_5"}, <5> {"0_37","0_5","1_5","3_5","4_5","5_5"}, <6> {"0_37","6_6"}, <7> {"0_37","7_7","7_8"}, <8> {"0_37","7_8","8_8"}, <9> {"0_37","9_9"}, <10> {"0_37","10_10","10_20"}, <11> {"0_37","10_20","11_11"}, <12> {"0_37","10_20","12_12"}, <13> {"0_37","10_20","13_13"}, <14> {"0_37","10_20","14_14"}, <15> {"0_37","10_20","15_15","15_20"}, <16> {"0_37","10_20","15_20","16_16","16_20"}, <17> {"0_37","10_20","15_20","16_20","17_17"}, <18> {"0_37","10_20","15_20","16_20","18_18"}, <19> {"0_37","10_20","15_20","16_20","19_19"}, <20> {"0_37","10_20","15_20","16_20","20_20"}, <21> {"0_37","21_21"}, <22> {"0_37","22_22","22_36"}, <23> {"0_37","22_36","23_23","23_36"}, <24> {"0_37","22_36","23_36","24_24","24_36"}, <25> {"0_37","22_36","23_36","24_36","25_25","25_26","25_36"}, <26> {"0_37","22_36","23_36","24_36","25_26","25_36","26_26","26_36"}, <27> {"0_37","22_36","23_36","24_36","25_36","26_36","27_27","27_28","27_36"}, <28> {"0_37","22_36","23_36","24_36","25_36","26_36","27_28","27_36","28_28","28_36"}, <29> {"0_37","22_36","23_36","24_36","25_36","26_36","27_36","28_36","29_29","29_32","29_36"}, <30> {"0_37","22_36","23_36","24_36","25_36","26_36","27_36","28_36","29_32","29_36","30_30"}, <31> {"0_37","22_36","23_36","24_36","25_36","26_36","27_36","28_36","29_32","29_36","31_31"}, <32> {"0_37","22_36","23_36","24_36","25_36","26_36","27_36","28_36","29_32","29_36","32_32"}, <33> {"0_37","22_36","23_36","24_36","25_36","26_36","27_36","28_36","29_36","33_33","33_36"}, <34> {"0_37","22_36","23_36","24_36","25_36","26_36","27_36","28_36","29_36","33_36","34_34","34_36"}, <35> {"0_37","22_36","23_36","24_36","25_36","26_36","27_36","28_36","29_36","33_36","34_36","35_35"}, <36> {"0_37","22_36","23_36","24_36","25_36","26_36","27_36","28_36","29_36","33_36","34_36","36_36"}, <37> {"0_37","37_37"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Terms_of_agreement"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Make_agreement_on_action"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Part_orientational"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Supply"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Version_sequence"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Statement"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Locale_by_use"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Ingredients"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Supply"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Having_or_lacking_access"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
subto overlap11: forall <i> in I do 
 sum <r> in Roles["Scrutiny"] do 
 sum <s> in G[i] do z11[r,s] <= 1;
subto overlap12: forall <i> in I do 
 sum <r> in Roles["Verification"] do 
 sum <s> in G[i] do z12[r,s] <= 1;
subto overlap13: forall <i> in I do 
 sum <r> in Roles["Completeness"] do 
 sum <s> in G[i] do z13[r,s] <= 1;
subto overlap14: forall <i> in I do 
 sum <r> in Roles["Correctness"] do 
 sum <s> in G[i] do z14[r,s] <= 1;
subto overlap15: forall <i> in I do 
 sum <r> in Roles["Version_sequence"] do 
 sum <s> in G[i] do z15[r,s] <= 1;
subto overlap16: forall <i> in I do 
 sum <r> in Roles["Statement"] do 
 sum <s> in G[i] do z16[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Terms_of_agreement"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Make_agreement_on_action"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Part_orientational"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Supply"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Version_sequence"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Statement"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Weapon"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Locale_by_use"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Ingredients"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Supply"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Having_or_lacking_access"] do sum <s> in Spans : z10[r,s] == 1;
subto unique11: forall <r> in Roles["Scrutiny"] do sum <s> in Spans : z11[r,s] == 1;
subto unique12: forall <r> in Roles["Verification"] do sum <s> in Spans : z12[r,s] == 1;
subto unique13: forall <r> in Roles["Completeness"] do sum <s> in Spans : z13[r,s] == 1;
subto unique14: forall <r> in Roles["Correctness"] do sum <s> in Spans : z14[r,s] == 1;
subto unique15: forall <r> in Roles["Version_sequence"] do sum <s> in Spans : z15[r,s] == 1;
subto unique16: forall <r> in Roles["Statement"] do sum <s> in Spans : z16[r,s] == 1;
#pairwise exclusion constraint
set Exc1 := {<"Parties","Party_2">,<"Parties","Party_1">};
subto exclusion1: forall <ri,rj> in Exc1 do z1[ri,"-1_-1"] + z1[rj,"-1_-1"] >= 1;
set Exc14 := {<"Source","Topic">};
subto exclusion14: forall <ri,rj> in Exc14 do z14[ri,"-1_-1"] + z14[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
