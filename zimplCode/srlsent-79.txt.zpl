# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Unattributed_information","Hospitality","Social_interaction_evaluation","Continued_state_of_affairs","Locative_relation"};
set Roles[Frames] :=  <"Unattributed_information"> {"Reported_fact","Time","Explanation","Duration"}, <"Hospitality"> {"Manner","Host","Guest","Degree","Behavior"}, <"Social_interaction_evaluation"> {"Affected_party","Topic","Manner","Behavior","Degree","Expressor","Evaluee"}, <"Continued_state_of_affairs"> {"State_of_affairs","Circumstances","Reference_occasion"}, <"Locative_relation"> {"Time","Distance","Figure","Ground","Direction","Figures"};
set Spans := {"-1_-1","0_0","0_2","0_5","0_9","1_1","2_2","3_3","4_4","5_5","6_6","6_9","7_7","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Unattributed_information"]] binary;
var z1[Assignment["Hospitality"]] binary;
var z2[Assignment["Social_interaction_evaluation"]] binary;
var z3[Assignment["Continued_state_of_affairs"]] binary;
var z4[Assignment["Locative_relation"]] binary;
param probabilities0[Assignment["Unattributed_information"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Hospitality"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Social_interaction_evaluation"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Continued_state_of_affairs"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Locative_relation"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Unattributed_information"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Hospitality"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Social_interaction_evaluation"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Continued_state_of_affairs"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Locative_relation"] : probabilities4[r,s] * z4[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 9};
set G[I] := <0> {"0_0","0_2","0_5","0_9"}, <1> {"0_2","0_5","0_9","1_1"}, <2> {"0_2","0_5","0_9","2_2"}, <3> {"0_5","0_9","3_3"}, <4> {"0_5","0_9","4_4"}, <5> {"0_5","0_9","5_5"}, <6> {"0_9","6_6","6_9"}, <7> {"0_9","6_9","7_7"}, <8> {"0_9","6_9","8_8"}, <9> {"0_9","6_9","9_9"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Unattributed_information"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Hospitality"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Social_interaction_evaluation"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Continued_state_of_affairs"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Locative_relation"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Unattributed_information"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Hospitality"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Social_interaction_evaluation"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Continued_state_of_affairs"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Locative_relation"] do sum <s> in Spans : z4[r,s] == 1;
#pairwise exclusion constraint
set Exc2 := {<"Behavior","Topic">};
subto exclusion2: forall <ri,rj> in Exc2 do z2[ri,"-1_-1"] + z2[rj,"-1_-1"] >= 1;
set Exc4 := {<"Figure","Figures">,<"Figures","Ground">};
subto exclusion4: forall <ri,rj> in Exc4 do z4[ri,"-1_-1"] + z4[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
