# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Sound_level","People_by_origin","Gesture","Observable_body_parts","Cogitation","Social_event","Relation","Intentionally_act","Locative_relation"};
set Roles[Frames] :=  <"Sound_level"> {"Attribute","Place","Degree","Entity","Explanation","Time","Circumstances","Volume"}, <"People_by_origin"> {"Person","Ethnicity","Persistent_characteristic","Context_of_acquaintance","Descriptor","Age","Origin"}, <"Gesture"> {"Place","Addressee","Indicated_entity","Manner","Communicator","Message","Instrument","Body_part"}, <"Observable_body_parts"> {"Attachment","Descriptor","Possessor","Body_part","Subregion","Orientational_Location"}, <"Cogitation"> {"Time","Medium","Topic","Manner","Depictive","Degree","Cognizer"}, <"Social_event"> {"Honoree","Time","Descriptor","Occasion","Place","Frequency","Degree","Refreshment","Period_of_iterations","Attendee","Duration","Host","Social_event","Name","Style"}, <"Relation"> {"Relation_type","Entity1","Entity2","Entities"}, <"Intentionally_act"> {"Purpose","Result","Time","Place","Frequency","Means","Event_dscription","Period_of_iterations","Domain","Act","Particular_iteration","Manner","Explanation","Agent"}, <"Locative_relation"> {"Time","Distance","Figure","Ground","Direction","Figures"};
set Spans := {"-1_-1","0_0","0_1","0_21","10_10","11_11","12_12","12_13","12_20","13_13","14_14","14_20","15_15","16_16","16_17","16_18","16_20","17_17","18_18","18_20","19_19","19_20","1_1","20_20","21_21","2_2","3_3","3_6","4_4","5_5","6_6","7_7","8_10","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Sound_level"]] binary;
var z1[Assignment["People_by_origin"]] binary;
var z2[Assignment["Gesture"]] binary;
var z3[Assignment["Observable_body_parts"]] binary;
var z4[Assignment["Cogitation"]] binary;
var z5[Assignment["Social_event"]] binary;
var z6[Assignment["Relation"]] binary;
var z7[Assignment["Intentionally_act"]] binary;
var z8[Assignment["Locative_relation"]] binary;
param probabilities0[Assignment["Sound_level"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["People_by_origin"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Gesture"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Observable_body_parts"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Cogitation"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Social_event"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Relation"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Intentionally_act"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Locative_relation"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Sound_level"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["People_by_origin"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Gesture"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Observable_body_parts"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Cogitation"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Social_event"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Relation"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Intentionally_act"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Locative_relation"] : probabilities8[r,s] * z8[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 21};
set G[I] := <0> {"0_0","0_1","0_21"}, <1> {"0_1","0_21","1_1"}, <2> {"0_21","2_2"}, <3> {"0_21","3_3","3_6"}, <4> {"0_21","3_6","4_4"}, <5> {"0_21","3_6","5_5"}, <6> {"0_21","3_6","6_6"}, <7> {"0_21","7_7"}, <8> {"0_21","8_10","8_8"}, <9> {"0_21","8_10","9_9"}, <10> {"0_21","10_10","8_10"}, <11> {"0_21","11_11"}, <12> {"0_21","12_12","12_13","12_20"}, <13> {"0_21","12_13","12_20","13_13"}, <14> {"0_21","12_20","14_14","14_20"}, <15> {"0_21","12_20","14_20","15_15"}, <16> {"0_21","12_20","14_20","16_16","16_17","16_18","16_20"}, <17> {"0_21","12_20","14_20","16_17","16_18","16_20","17_17"}, <18> {"0_21","12_20","14_20","16_18","16_20","18_18","18_20"}, <19> {"0_21","12_20","14_20","16_20","18_20","19_19","19_20"}, <20> {"0_21","12_20","14_20","16_20","18_20","19_20","20_20"}, <21> {"0_21","21_21"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Sound_level"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["People_by_origin"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Gesture"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Observable_body_parts"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Cogitation"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Social_event"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Relation"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Intentionally_act"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Locative_relation"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Sound_level"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["People_by_origin"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Gesture"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Observable_body_parts"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Cogitation"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Social_event"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Relation"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Intentionally_act"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Locative_relation"] do sum <s> in Spans : z8[r,s] == 1;
#pairwise exclusion constraint
set Exc6 := {<"Entities","Entity2">,<"Entities","Entity1">};
subto exclusion6: forall <ri,rj> in Exc6 do z6[ri,"-1_-1"] + z6[rj,"-1_-1"] >= 1;
set Exc8 := {<"Figure","Figures">,<"Figures","Ground">};
subto exclusion8: forall <ri,rj> in Exc8 do z8[ri,"-1_-1"] + z8[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
set Reqr6 := {<"Entity1","Entity2">};
subto require6: forall <ri,rj> in Reqr6 do z6[ri,"-1_-1"] - z6[rj,"-1_-1"] == 0;
