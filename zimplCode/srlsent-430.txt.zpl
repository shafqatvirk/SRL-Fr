# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Existence","Existence","Statement","Getting","Degree_of_processing","Substance","Organization","Statement","Quantity","Evidence","Receiving","Ingredients"};
set Roles[Frames] :=  <"Existence"> {"Place","Duration","Inherent_purpose","Entity","Point_of_view","Time","Circumstances","State","Cause"}, <"Existence"> {"Place","Duration","Inherent_purpose","Entity","Point_of_view","Time","Circumstances","State","Cause"}, <"Statement"> {"Message","Medium","Place","Iteration","Means","Depictive","Manner","Epistemic_stance","Speaker","Event_description","Addressee","Time","Containing_event","Degree","Occasion","Group","Frequency","Particular_iteration","Internal_cause","Topic"}, <"Getting"> {"Recipient","Result","Time","Place","Purpose","Means","Source","Theme","Reason","Beneficiary","Manner","Concessive"}, <"Degree_of_processing"> {"Degree","Material"}, <"Substance"> {"Source","Type","Use","Descriptor","Substance","Constituents"}, <"Organization"> {"Period_of_existence","Members","Place","Name","Container_possessor","Organization","Purpose","Descriptor"}, <"Statement"> {"Message","Medium","Place","Iteration","Means","Depictive","Manner","Epistemic_stance","Speaker","Event_description","Addressee","Time","Containing_event","Degree","Occasion","Group","Frequency","Particular_iteration","Internal_cause","Topic"}, <"Quantity"> {"Mass","Q_Prop","Degree","Quantity","Individuals"}, <"Evidence"> {"Domain_of_Relevance","Support","Manner","Depictive","Proposition","Degree","Cognizer"}, <"Receiving"> {"Mode_of_transfer","Place","Theme","Path","Manner","Donor","Means","Time","Purpose_of_theme","Countertransfer","Recipient"}, <"Ingredients"> {"Source","Type","Use","Material","Product","Descriptor"};
set Spans := {"-1_-1","0_0","0_1","0_10","0_27","10_10","11_11","12_12","13_13","13_14","14_14","15_15","16_16","16_17","16_26","17_17","17_26","18_18","18_19","18_26","19_19","1_1","1_10","20_20","20_26","21_21","21_26","22_22","22_26","23_23","24_24","24_26","25_25","25_26","26_26","27_27","2_10","2_2","3_10","3_3","4_10","4_4","5_10","5_5","5_6","6_10","6_6","7_10","7_7","8_10","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Existence"]] binary;
var z1[Assignment["Existence"]] binary;
var z2[Assignment["Statement"]] binary;
var z3[Assignment["Getting"]] binary;
var z4[Assignment["Degree_of_processing"]] binary;
var z5[Assignment["Substance"]] binary;
var z6[Assignment["Organization"]] binary;
var z7[Assignment["Statement"]] binary;
var z8[Assignment["Quantity"]] binary;
var z9[Assignment["Evidence"]] binary;
var z10[Assignment["Receiving"]] binary;
var z11[Assignment["Ingredients"]] binary;
param probabilities0[Assignment["Existence"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Existence"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Statement"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Getting"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Degree_of_processing"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Substance"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Organization"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Statement"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Quantity"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Evidence"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Receiving"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;
param probabilities11[Assignment["Ingredients"]] := read "../frameData/frame11.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Existence"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Existence"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Statement"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Getting"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Degree_of_processing"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Substance"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Organization"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Statement"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Quantity"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Evidence"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Receiving"] : probabilities10[r,s] * z10[r,s])+(sum <r,s> in Assignment["Ingredients"] : probabilities11[r,s] * z11[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 27};
set G[I] := <0> {"0_0","0_1","0_10","0_27"}, <1> {"0_1","0_10","0_27","1_1","1_10"}, <2> {"0_10","0_27","1_10","2_10","2_2"}, <3> {"0_10","0_27","1_10","2_10","3_10","3_3"}, <4> {"0_10","0_27","1_10","2_10","3_10","4_10","4_4"}, <5> {"0_10","0_27","1_10","2_10","3_10","4_10","5_10","5_5","5_6"}, <6> {"0_10","0_27","1_10","2_10","3_10","4_10","5_10","5_6","6_10","6_6"}, <7> {"0_10","0_27","1_10","2_10","3_10","4_10","5_10","6_10","7_10","7_7"}, <8> {"0_10","0_27","1_10","2_10","3_10","4_10","5_10","6_10","7_10","8_10","8_8"}, <9> {"0_10","0_27","1_10","2_10","3_10","4_10","5_10","6_10","7_10","8_10","9_9"}, <10> {"0_10","0_27","10_10","1_10","2_10","3_10","4_10","5_10","6_10","7_10","8_10"}, <11> {"0_27","11_11"}, <12> {"0_27","12_12"}, <13> {"0_27","13_13","13_14"}, <14> {"0_27","13_14","14_14"}, <15> {"0_27","15_15"}, <16> {"0_27","16_16","16_17","16_26"}, <17> {"0_27","16_17","16_26","17_17","17_26"}, <18> {"0_27","16_26","17_26","18_18","18_19","18_26"}, <19> {"0_27","16_26","17_26","18_19","18_26","19_19"}, <20> {"0_27","16_26","17_26","18_26","20_20","20_26"}, <21> {"0_27","16_26","17_26","18_26","20_26","21_21","21_26"}, <22> {"0_27","16_26","17_26","18_26","20_26","21_26","22_22","22_26"}, <23> {"0_27","16_26","17_26","18_26","20_26","21_26","22_26","23_23"}, <24> {"0_27","16_26","17_26","18_26","20_26","21_26","22_26","24_24","24_26"}, <25> {"0_27","16_26","17_26","18_26","20_26","21_26","22_26","24_26","25_25","25_26"}, <26> {"0_27","16_26","17_26","18_26","20_26","21_26","22_26","24_26","25_26","26_26"}, <27> {"0_27","27_27"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Existence"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Existence"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Statement"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Getting"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Degree_of_processing"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Substance"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Organization"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Statement"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Quantity"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Evidence"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Receiving"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
subto overlap11: forall <i> in I do 
 sum <r> in Roles["Ingredients"] do 
 sum <s> in G[i] do z11[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Existence"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Existence"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Statement"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Getting"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Degree_of_processing"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Substance"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Organization"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Statement"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Quantity"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Evidence"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Receiving"] do sum <s> in Spans : z10[r,s] == 1;
subto unique11: forall <r> in Roles["Ingredients"] do sum <s> in Spans : z11[r,s] == 1;
#pairwise exclusion constraint
set Exc8 := {<"Individuals","Mass">};
subto exclusion8: forall <ri,rj> in Exc8 do z8[ri,"-1_-1"] + z8[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
