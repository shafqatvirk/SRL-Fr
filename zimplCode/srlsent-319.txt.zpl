# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Political_locales","Likelihood","Seeking_to_achieve","Cause_to_make_progress","Quantity","Capability","Political_locales","Indigenous_origin","Body_decoration","Capability","Frequency","Intentionally_act","Seeking_to_achieve","Relational_quantity","Foreign_or_domestic_country","Source_of_getting"};
set Roles[Frames] :=  <"Political_locales"> {"Relative_location","Constituent_parts","Container_possessor","Descriptor","Name","Population","Locale"}, <"Likelihood"> {"Time","Place","Circumstances","Reason","Hypothetical_event","Degree"}, <"Seeking_to_achieve"> {"Purpose","Circumstances","State_of_affairs","Degree","Means","Source","Sought_entity","Depictive","Duration","Time","Beneficiary","Manner","Explanation","Agent"}, <"Cause_to_make_progress"> {"Purpose","Time","Place","Degree","Rate","Means","Domain","Duration","Particular_iteration","Project","Post_state","Manner","Explanation","Agent","Prior_state"}, <"Quantity"> {"Mass","Q_Prop","Degree","Quantity","Individuals"}, <"Capability"> {"Degree","Status","Entity","Relevant_feature","Circumstances","Role","Event","Cause"}, <"Political_locales"> {"Relative_location","Constituent_parts","Container_possessor","Descriptor","Name","Population","Locale"}, <"Indigenous_origin"> {"Entity","Origin"}, <"Body_decoration"> {"Picture","Decorated_individual","Type","Use","Body_location","Decoration","Decoration_desriptor"}, <"Capability"> {"Degree","Status","Entity","Relevant_feature","Circumstances","Role","Event","Cause"}, <"Frequency"> {"Time_span","Attribute","Degree","Time","Event","Interval","Rate","Salient_entity"}, <"Intentionally_act"> {"Purpose","Result","Time","Place","Frequency","Means","Event_dscription","Period_of_iterations","Domain","Act","Particular_iteration","Manner","Explanation","Agent"}, <"Seeking_to_achieve"> {"Purpose","Circumstances","State_of_affairs","Degree","Means","Source","Sought_entity","Depictive","Duration","Time","Beneficiary","Manner","Explanation","Agent"}, <"Relational_quantity"> {"Mass","Denoted_quantity","Reference_quantity","Individuals"}, <"Foreign_or_domestic_country"> {"Relative_location","Name","Descriptor","Current_country","Population","Discourse_salient_country"}, <"Source_of_getting"> {"Goal","Theme","Descriptor","Source"};
set Spans := {"-1_-1","0_0","0_15","0_18","0_28","10_10","10_15","11_11","11_15","12_12","13_13","14_14","15_15","16_16","17_17","18_18","19_19","1_1","1_15","1_2","20_20","21_21","22_22","22_27","23_23","23_24","23_27","24_24","25_25","25_27","26_26","26_27","27_27","28_28","2_15","2_2","3_15","3_3","4_15","4_4","4_5","5_15","5_5","6_15","6_6","7_15","7_7","8_15","8_8","8_9","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Political_locales"]] binary;
var z1[Assignment["Likelihood"]] binary;
var z2[Assignment["Seeking_to_achieve"]] binary;
var z3[Assignment["Cause_to_make_progress"]] binary;
var z4[Assignment["Quantity"]] binary;
var z5[Assignment["Capability"]] binary;
var z6[Assignment["Political_locales"]] binary;
var z7[Assignment["Indigenous_origin"]] binary;
var z8[Assignment["Body_decoration"]] binary;
var z9[Assignment["Capability"]] binary;
var z10[Assignment["Frequency"]] binary;
var z11[Assignment["Intentionally_act"]] binary;
var z12[Assignment["Seeking_to_achieve"]] binary;
var z13[Assignment["Relational_quantity"]] binary;
var z14[Assignment["Foreign_or_domestic_country"]] binary;
var z15[Assignment["Source_of_getting"]] binary;
param probabilities0[Assignment["Political_locales"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Likelihood"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Seeking_to_achieve"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Cause_to_make_progress"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Quantity"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Capability"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Political_locales"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Indigenous_origin"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Body_decoration"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Capability"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Frequency"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;
param probabilities11[Assignment["Intentionally_act"]] := read "../frameData/frame11.txt" as "<1s,2s> 3n" skip 2;
param probabilities12[Assignment["Seeking_to_achieve"]] := read "../frameData/frame12.txt" as "<1s,2s> 3n" skip 2;
param probabilities13[Assignment["Relational_quantity"]] := read "../frameData/frame13.txt" as "<1s,2s> 3n" skip 2;
param probabilities14[Assignment["Foreign_or_domestic_country"]] := read "../frameData/frame14.txt" as "<1s,2s> 3n" skip 2;
param probabilities15[Assignment["Source_of_getting"]] := read "../frameData/frame15.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Political_locales"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Likelihood"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Seeking_to_achieve"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Cause_to_make_progress"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Quantity"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Capability"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Political_locales"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Indigenous_origin"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Body_decoration"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Capability"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Frequency"] : probabilities10[r,s] * z10[r,s])+(sum <r,s> in Assignment["Intentionally_act"] : probabilities11[r,s] * z11[r,s])+(sum <r,s> in Assignment["Seeking_to_achieve"] : probabilities12[r,s] * z12[r,s])+(sum <r,s> in Assignment["Relational_quantity"] : probabilities13[r,s] * z13[r,s])+(sum <r,s> in Assignment["Foreign_or_domestic_country"] : probabilities14[r,s] * z14[r,s])+(sum <r,s> in Assignment["Source_of_getting"] : probabilities15[r,s] * z15[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 28};
set G[I] := <0> {"0_0","0_15","0_18","0_28"}, <1> {"0_15","0_18","0_28","1_1","1_15","1_2"}, <2> {"0_15","0_18","0_28","1_15","1_2","2_15","2_2"}, <3> {"0_15","0_18","0_28","1_15","2_15","3_15","3_3"}, <4> {"0_15","0_18","0_28","1_15","2_15","3_15","4_15","4_4","4_5"}, <5> {"0_15","0_18","0_28","1_15","2_15","3_15","4_15","4_5","5_15","5_5"}, <6> {"0_15","0_18","0_28","1_15","2_15","3_15","4_15","5_15","6_15","6_6"}, <7> {"0_15","0_18","0_28","1_15","2_15","3_15","4_15","5_15","6_15","7_15","7_7"}, <8> {"0_15","0_18","0_28","1_15","2_15","3_15","4_15","5_15","6_15","7_15","8_15","8_8","8_9"}, <9> {"0_15","0_18","0_28","1_15","2_15","3_15","4_15","5_15","6_15","7_15","8_15","8_9","9_9"}, <10> {"0_15","0_18","0_28","10_10","10_15","1_15","2_15","3_15","4_15","5_15","6_15","7_15","8_15"}, <11> {"0_15","0_18","0_28","10_15","11_11","11_15","1_15","2_15","3_15","4_15","5_15","6_15","7_15","8_15"}, <12> {"0_15","0_18","0_28","10_15","11_15","12_12","1_15","2_15","3_15","4_15","5_15","6_15","7_15","8_15"}, <13> {"0_15","0_18","0_28","10_15","11_15","13_13","1_15","2_15","3_15","4_15","5_15","6_15","7_15","8_15"}, <14> {"0_15","0_18","0_28","10_15","11_15","14_14","1_15","2_15","3_15","4_15","5_15","6_15","7_15","8_15"}, <15> {"0_15","0_18","0_28","10_15","11_15","15_15","1_15","2_15","3_15","4_15","5_15","6_15","7_15","8_15"}, <16> {"0_18","0_28","16_16"}, <17> {"0_18","0_28","17_17"}, <18> {"0_18","0_28","18_18"}, <19> {"0_28","19_19"}, <20> {"0_28","20_20"}, <21> {"0_28","21_21"}, <22> {"0_28","22_22","22_27"}, <23> {"0_28","22_27","23_23","23_24","23_27"}, <24> {"0_28","22_27","23_24","23_27","24_24"}, <25> {"0_28","22_27","23_27","25_25","25_27"}, <26> {"0_28","22_27","23_27","25_27","26_26","26_27"}, <27> {"0_28","22_27","23_27","25_27","26_27","27_27"}, <28> {"0_28","28_28"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Political_locales"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Likelihood"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Seeking_to_achieve"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Cause_to_make_progress"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Quantity"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Capability"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Political_locales"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Indigenous_origin"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Body_decoration"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Capability"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Frequency"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
subto overlap11: forall <i> in I do 
 sum <r> in Roles["Intentionally_act"] do 
 sum <s> in G[i] do z11[r,s] <= 1;
subto overlap12: forall <i> in I do 
 sum <r> in Roles["Seeking_to_achieve"] do 
 sum <s> in G[i] do z12[r,s] <= 1;
subto overlap13: forall <i> in I do 
 sum <r> in Roles["Relational_quantity"] do 
 sum <s> in G[i] do z13[r,s] <= 1;
subto overlap14: forall <i> in I do 
 sum <r> in Roles["Foreign_or_domestic_country"] do 
 sum <s> in G[i] do z14[r,s] <= 1;
subto overlap15: forall <i> in I do 
 sum <r> in Roles["Source_of_getting"] do 
 sum <s> in G[i] do z15[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Political_locales"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Likelihood"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Seeking_to_achieve"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Cause_to_make_progress"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Quantity"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Capability"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Political_locales"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Indigenous_origin"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Body_decoration"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Capability"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Frequency"] do sum <s> in Spans : z10[r,s] == 1;
subto unique11: forall <r> in Roles["Intentionally_act"] do sum <s> in Spans : z11[r,s] == 1;
subto unique12: forall <r> in Roles["Seeking_to_achieve"] do sum <s> in Spans : z12[r,s] == 1;
subto unique13: forall <r> in Roles["Relational_quantity"] do sum <s> in Spans : z13[r,s] == 1;
subto unique14: forall <r> in Roles["Foreign_or_domestic_country"] do sum <s> in Spans : z14[r,s] == 1;
subto unique15: forall <r> in Roles["Source_of_getting"] do sum <s> in Spans : z15[r,s] == 1;
#pairwise exclusion constraint
set Exc2 := {<"Sought_entity","State_of_affairs">};
subto exclusion2: forall <ri,rj> in Exc2 do z2[ri,"-1_-1"] + z2[rj,"-1_-1"] >= 1;
set Exc4 := {<"Individuals","Mass">};
subto exclusion4: forall <ri,rj> in Exc4 do z4[ri,"-1_-1"] + z4[rj,"-1_-1"] >= 1;
set Exc10 := {<"Degree","Rate">,<"Interval","Salient_entity">,<"Event","Salient_entity">};
subto exclusion10: forall <ri,rj> in Exc10 do z10[ri,"-1_-1"] + z10[rj,"-1_-1"] >= 1;
set Exc12 := {<"Sought_entity","State_of_affairs">};
subto exclusion12: forall <ri,rj> in Exc12 do z12[ri,"-1_-1"] + z12[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
