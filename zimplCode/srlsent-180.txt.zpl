# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Desiring","Experiencer_focus","Temporary_stay","Locative_relation"};
set Roles[Frames] :=  <"Desiring"> {"Time","Place","Degree","Experiencer","Purpose_of_Event","Event","Role_of_focal_participant","Focal_participant","Cause","Reason","Location_of_Event","Duration","Manner","Time_of_Event"}, <"Experiencer_focus"> {"Topic","Circumstances","Parameter","Time","Degree","Experiencer","Event","Expressor","Reason","State","Content","Manner"}, <"Temporary_stay"> {"Purpose","Descriptor","Time","Containing_event","Place","Guest","Co-guest","Location","Duration","Host","Frequency","Explanation"}, <"Locative_relation"> {"Time","Distance","Figure","Ground","Direction","Figures"};
set Spans := {"-1_-1","0_0","0_1","0_8","1_1","1_8","2_2","2_8","3_3","3_8","4_4","4_7","5_5","5_6","6_6","7_7","8_8"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Desiring"]] binary;
var z1[Assignment["Experiencer_focus"]] binary;
var z2[Assignment["Temporary_stay"]] binary;
var z3[Assignment["Locative_relation"]] binary;
param probabilities0[Assignment["Desiring"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Experiencer_focus"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Temporary_stay"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Locative_relation"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Desiring"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Experiencer_focus"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Temporary_stay"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Locative_relation"] : probabilities3[r,s] * z3[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 8};
set G[I] := <0> {"0_0","0_1","0_8"}, <1> {"0_1","0_8","1_1","1_8"}, <2> {"0_8","1_8","2_2","2_8"}, <3> {"0_8","1_8","2_8","3_3","3_8"}, <4> {"0_8","1_8","2_8","3_8","4_4","4_7"}, <5> {"0_8","1_8","2_8","3_8","4_7","5_5","5_6"}, <6> {"0_8","1_8","2_8","3_8","4_7","5_6","6_6"}, <7> {"0_8","1_8","2_8","3_8","4_7","7_7"}, <8> {"0_8","1_8","2_8","3_8","8_8"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Desiring"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Experiencer_focus"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Temporary_stay"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Locative_relation"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Desiring"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Experiencer_focus"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Temporary_stay"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Locative_relation"] do sum <s> in Spans : z3[r,s] == 1;
#pairwise exclusion constraint
set Exc3 := {<"Figure","Figures">,<"Figures","Ground">};
subto exclusion3: forall <ri,rj> in Exc3 do z3[ri,"-1_-1"] + z3[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
