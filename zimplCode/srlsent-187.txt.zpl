# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Quantity","Quantity","Awareness","People","People_by_jurisdiction","People","Secrecy_status","Medical_conditions","Aggregate"};
set Roles[Frames] :=  <"Quantity"> {"Mass","Q_Prop","Degree","Quantity","Individuals"}, <"Quantity"> {"Mass","Q_Prop","Degree","Quantity","Individuals"}, <"Awareness"> {"Cognizer","Topic","Degree","Role","Manner","Evidence","Explanation","Time","Content","Expressor","Paradigm"}, <"People"> {"Person","Ethnicity","Persistent_characteristic","Context_of_acquaintance","Descriptor","Age","Origin"}, <"People_by_jurisdiction"> {"Person","Descriptor","Jurisdiction","Ethnicity"}, <"People"> {"Person","Ethnicity","Persistent_characteristic","Context_of_acquaintance","Descriptor","Age","Origin"}, <"Secrecy_status"> {"Time","Phenomenon","Degree","Epistemic_stance","Cognizer"}, <"Medical_conditions"> {"Place","Symptom","Body_Part","Degree","Patient","Name","Ailment","Cause"}, <"Aggregate"> {"Individuals","AggregateProperty","Aggregate","Name","Domain","Container_possessor"};
set Spans := {"-1_-1","0_0","0_29","10_10","10_28","11_11","11_13","12_12","12_13","13_13","14_14","14_28","15_15","15_28","16_16","16_19","16_26","17_17","18_18","19_19","1_1","20_20","20_26","21_21","21_26","22_22","22_26","23_23","23_26","24_24","25_25","26_26","27_27","27_28","28_28","29_29","2_2","3_28","3_3","3_4","4_4","5_28","5_5","6_28","6_6","7_28","7_7","7_8","8_8","9_28","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Quantity"]] binary;
var z1[Assignment["Quantity"]] binary;
var z2[Assignment["Awareness"]] binary;
var z3[Assignment["People"]] binary;
var z4[Assignment["People_by_jurisdiction"]] binary;
var z5[Assignment["People"]] binary;
var z6[Assignment["Secrecy_status"]] binary;
var z7[Assignment["Medical_conditions"]] binary;
var z8[Assignment["Aggregate"]] binary;
param probabilities0[Assignment["Quantity"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Quantity"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Awareness"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["People"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["People_by_jurisdiction"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["People"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Secrecy_status"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Medical_conditions"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Aggregate"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Quantity"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Quantity"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Awareness"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["People"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["People_by_jurisdiction"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["People"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Secrecy_status"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Medical_conditions"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Aggregate"] : probabilities8[r,s] * z8[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 29};
set G[I] := <0> {"0_0","0_29"}, <1> {"0_29","1_1"}, <2> {"0_29","2_2"}, <3> {"0_29","3_28","3_3","3_4"}, <4> {"0_29","3_28","3_4","4_4"}, <5> {"0_29","3_28","5_28","5_5"}, <6> {"0_29","3_28","5_28","6_28","6_6"}, <7> {"0_29","3_28","5_28","6_28","7_28","7_7","7_8"}, <8> {"0_29","3_28","5_28","6_28","7_28","7_8","8_8"}, <9> {"0_29","3_28","5_28","6_28","7_28","9_28","9_9"}, <10> {"0_29","10_10","10_28","3_28","5_28","6_28","7_28","9_28"}, <11> {"0_29","10_28","11_11","11_13","3_28","5_28","6_28","7_28","9_28"}, <12> {"0_29","10_28","11_13","12_12","12_13","3_28","5_28","6_28","7_28","9_28"}, <13> {"0_29","10_28","11_13","12_13","13_13","3_28","5_28","6_28","7_28","9_28"}, <14> {"0_29","10_28","14_14","14_28","3_28","5_28","6_28","7_28","9_28"}, <15> {"0_29","10_28","14_28","15_15","15_28","3_28","5_28","6_28","7_28","9_28"}, <16> {"0_29","10_28","14_28","15_28","16_16","16_19","16_26","3_28","5_28","6_28","7_28","9_28"}, <17> {"0_29","10_28","14_28","15_28","16_19","16_26","17_17","3_28","5_28","6_28","7_28","9_28"}, <18> {"0_29","10_28","14_28","15_28","16_19","16_26","18_18","3_28","5_28","6_28","7_28","9_28"}, <19> {"0_29","10_28","14_28","15_28","16_19","16_26","19_19","3_28","5_28","6_28","7_28","9_28"}, <20> {"0_29","10_28","14_28","15_28","16_26","20_20","20_26","3_28","5_28","6_28","7_28","9_28"}, <21> {"0_29","10_28","14_28","15_28","16_26","20_26","21_21","21_26","3_28","5_28","6_28","7_28","9_28"}, <22> {"0_29","10_28","14_28","15_28","16_26","20_26","21_26","22_22","22_26","3_28","5_28","6_28","7_28","9_28"}, <23> {"0_29","10_28","14_28","15_28","16_26","20_26","21_26","22_26","23_23","23_26","3_28","5_28","6_28","7_28","9_28"}, <24> {"0_29","10_28","14_28","15_28","16_26","20_26","21_26","22_26","23_26","24_24","3_28","5_28","6_28","7_28","9_28"}, <25> {"0_29","10_28","14_28","15_28","16_26","20_26","21_26","22_26","23_26","25_25","3_28","5_28","6_28","7_28","9_28"}, <26> {"0_29","10_28","14_28","15_28","16_26","20_26","21_26","22_26","23_26","26_26","3_28","5_28","6_28","7_28","9_28"}, <27> {"0_29","10_28","14_28","15_28","27_27","27_28","3_28","5_28","6_28","7_28","9_28"}, <28> {"0_29","10_28","14_28","15_28","27_28","28_28","3_28","5_28","6_28","7_28","9_28"}, <29> {"0_29","29_29"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Quantity"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Quantity"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Awareness"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["People"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["People_by_jurisdiction"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["People"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Secrecy_status"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Medical_conditions"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Aggregate"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Quantity"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Quantity"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Awareness"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["People"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["People_by_jurisdiction"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["People"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Secrecy_status"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Medical_conditions"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Aggregate"] do sum <s> in Spans : z8[r,s] == 1;
#pairwise exclusion constraint
set Exc0 := {<"Individuals","Mass">};
subto exclusion0: forall <ri,rj> in Exc0 do z0[ri,"-1_-1"] + z0[rj,"-1_-1"] >= 1;
set Exc1 := {<"Individuals","Mass">};
subto exclusion1: forall <ri,rj> in Exc1 do z1[ri,"-1_-1"] + z1[rj,"-1_-1"] >= 1;
set Exc2 := {<"Cognizer","Expressor">};
subto exclusion2: forall <ri,rj> in Exc2 do z2[ri,"-1_-1"] + z2[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
