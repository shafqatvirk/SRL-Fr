# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Capability","Hunting_success_or_failure","Cardinal_numbers","Historic_event","Vehicle","Roadways","Ride_vehicle","Natural_features","Reference_text","Containers","Contacting"};
set Roles[Frames] :=  <"Capability"> {"Degree","Status","Entity","Relevant_feature","Circumstances","Role","Event","Cause"}, <"Hunting_success_or_failure"> {"Food","Hunter"}, <"Cardinal_numbers"> {"Precision","Number","Multiplier","Entity"}, <"Historic_event"> {"Time","Entity","Place","Reason","Event","Degree"}, <"Vehicle"> {"Itinerary","Possessor","Descriptor","Vehicle","Use"}, <"Roadways"> {"Characteristic","Length","Use","Frequency_of_use","Goal","Relative_location","Endpoints","Direction","Source","Material","Path","Roadway","Name","Abundant_entities"}, <"Ride_vehicle"> {"Duration","Goal","Theme","Source","Path","Manner","Area","Time","Vehicle","Purpose","Cotheme"}, <"Natural_features"> {"Type","Locale","Relative_location","Name","Formational_cause","Container_possessor","Constituent_parts","Descriptor"}, <"Reference_text"> {"Information","Source_of_information"}, <"Containers"> {"Type","Use","Container","Material","Relative_location","Part","Construction","Owner","Descriptor","Contents"}, <"Contacting"> {"Depictive","Topic","Time","Place","Addressee","Communicator","Communication","Reason","Intermediary","Location_of_communicator","Address","Frequency","Medium"};
set Spans := {"-1_-1","0_0","0_28","10_10","10_13","11_11","11_13","12_12","13_13","14_14","15_15","16_16","16_17","17_17","18_18","18_20","19_19","19_20","1_1","1_28","20_20","21_21","21_27","22_22","22_27","23_23","23_25","23_26","24_24","25_25","26_26","27_27","28_28","2_2","2_27","3_13","3_15","3_3","4_13","4_4","5_13","5_5","5_7","5_9","6_6","7_7","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Capability"]] binary;
var z1[Assignment["Hunting_success_or_failure"]] binary;
var z2[Assignment["Cardinal_numbers"]] binary;
var z3[Assignment["Historic_event"]] binary;
var z4[Assignment["Vehicle"]] binary;
var z5[Assignment["Roadways"]] binary;
var z6[Assignment["Ride_vehicle"]] binary;
var z7[Assignment["Natural_features"]] binary;
var z8[Assignment["Reference_text"]] binary;
var z9[Assignment["Containers"]] binary;
var z10[Assignment["Contacting"]] binary;
param probabilities0[Assignment["Capability"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Hunting_success_or_failure"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Cardinal_numbers"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Historic_event"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Vehicle"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Roadways"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Ride_vehicle"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Natural_features"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Reference_text"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Containers"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Contacting"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Capability"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Hunting_success_or_failure"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Cardinal_numbers"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Historic_event"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Vehicle"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Roadways"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Ride_vehicle"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Natural_features"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Reference_text"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Containers"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Contacting"] : probabilities10[r,s] * z10[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 28};
set G[I] := <0> {"0_0","0_28"}, <1> {"0_28","1_1","1_28"}, <2> {"0_28","1_28","2_2","2_27"}, <3> {"0_28","1_28","2_27","3_13","3_15","3_3"}, <4> {"0_28","1_28","2_27","3_13","3_15","4_13","4_4"}, <5> {"0_28","1_28","2_27","3_13","3_15","4_13","5_13","5_5","5_7","5_9"}, <6> {"0_28","1_28","2_27","3_13","3_15","4_13","5_13","5_7","5_9","6_6"}, <7> {"0_28","1_28","2_27","3_13","3_15","4_13","5_13","5_7","5_9","7_7"}, <8> {"0_28","1_28","2_27","3_13","3_15","4_13","5_13","5_9","8_8"}, <9> {"0_28","1_28","2_27","3_13","3_15","4_13","5_13","5_9","9_9"}, <10> {"0_28","10_10","10_13","1_28","2_27","3_13","3_15","4_13","5_13"}, <11> {"0_28","10_13","11_11","11_13","1_28","2_27","3_13","3_15","4_13","5_13"}, <12> {"0_28","10_13","11_13","12_12","1_28","2_27","3_13","3_15","4_13","5_13"}, <13> {"0_28","10_13","11_13","13_13","1_28","2_27","3_13","3_15","4_13","5_13"}, <14> {"0_28","14_14","1_28","2_27","3_15"}, <15> {"0_28","15_15","1_28","2_27","3_15"}, <16> {"0_28","16_16","16_17","1_28","2_27"}, <17> {"0_28","16_17","17_17","1_28","2_27"}, <18> {"0_28","18_18","18_20","1_28","2_27"}, <19> {"0_28","18_20","19_19","19_20","1_28","2_27"}, <20> {"0_28","18_20","19_20","1_28","20_20","2_27"}, <21> {"0_28","1_28","21_21","21_27","2_27"}, <22> {"0_28","1_28","21_27","22_22","22_27","2_27"}, <23> {"0_28","1_28","21_27","22_27","23_23","23_25","23_26","2_27"}, <24> {"0_28","1_28","21_27","22_27","23_25","23_26","24_24","2_27"}, <25> {"0_28","1_28","21_27","22_27","23_25","23_26","25_25","2_27"}, <26> {"0_28","1_28","21_27","22_27","23_26","26_26","2_27"}, <27> {"0_28","1_28","21_27","22_27","27_27","2_27"}, <28> {"0_28","1_28","28_28"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Capability"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Hunting_success_or_failure"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Cardinal_numbers"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Historic_event"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Vehicle"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Roadways"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Ride_vehicle"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Natural_features"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Reference_text"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Containers"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Contacting"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Capability"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Hunting_success_or_failure"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Cardinal_numbers"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Historic_event"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Vehicle"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Roadways"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Ride_vehicle"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Natural_features"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Reference_text"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Containers"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Contacting"] do sum <s> in Spans : z10[r,s] == 1;
#pairwise exclusion constraint
set Exc6 := {<"Area","Source">,<"Area","Goal">,<"Area","Path">};
subto exclusion6: forall <ri,rj> in Exc6 do z6[ri,"-1_-1"] + z6[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
