# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Weapon","Communication_manner","Statement","Request","Increment","Cause_to_make_progress","Substance","Fields","Supporting","Manufacturing","Being_necessary","Organization","Temporal_collocation","Weapon","Weapon","Defend","Intentionally_create","Measure_duration"};
set Roles[Frames] :=  <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Communication_manner"> {"Result","Topic","Time","Place","Addressee","Degree","Depictive","Duration","Reversive","Manner","Message","Speaker","Medium"}, <"Statement"> {"Message","Medium","Place","Iteration","Means","Depictive","Manner","Epistemic_stance","Speaker","Event_description","Addressee","Time","Containing_event","Degree","Occasion","Group","Frequency","Particular_iteration","Internal_cause","Topic"}, <"Request"> {"Addressee","Containing_event","Medium","Topic","Speaker","Time","Message","Iteration","Means","Manner","Depictive"}, <"Increment"> {"Initial_set","Class","Increment","Added_set"}, <"Cause_to_make_progress"> {"Purpose","Time","Place","Degree","Rate","Means","Domain","Duration","Particular_iteration","Project","Post_state","Manner","Explanation","Agent","Prior_state"}, <"Substance"> {"Source","Type","Use","Descriptor","Substance","Constituents"}, <"Fields"> {"Practitioner","Time","Type","Work","Place","Salient_entity","Activity"}, <"Supporting"> {"Event_description","Place","Supported","Degree","Manner","Time","Supporter","Means"}, <"Manufacturing"> {"Purpose","Circumstances","Time","Manufacturer","Instrument","Place","Frequency","Resource","Means","Locus","Consumer","Depictive","Factory","Product","Manner"}, <"Being_necessary"> {"Dependent","Requirement","Degree","Domain","Condition","Time","Required_entity","Reason","Descriptor","Dependent_individual"}, <"Organization"> {"Period_of_existence","Members","Place","Name","Container_possessor","Organization","Purpose","Descriptor"}, <"Temporal_collocation"> {"Event_description","Landmark_period","Trajector_entity","Landmark_entity","Landmark_event","Trajector_period","Trajector_event"}, <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Defend"> {"Defender","Place","Instrument","Manner","Victim","Assailant","Means","Purpose","Depictive","Reason"}, <"Intentionally_create"> {"Created_entity","Place","Role","Manner","Components","Creator","Time","Means","Purpose","Co_participant"}, <"Measure_duration"> {"Agent","Count","Unit","Process"};
set Spans := {"-1_-1","0_0","0_10","0_11","0_24","0_3","0_47","10_10","11_11","11_24","12_12","12_24","13_13","13_15","13_24","14_14","15_15","16_16","16_24","17_17","17_19","17_24","18_18","19_19","1_1","20_20","20_21","20_24","21_21","21_24","22_22","22_24","23_23","24_24","25_25","26_26","27_27","27_29","27_40","28_28","29_29","2_2","30_30","30_40","31_31","31_37","31_40","32_32","33_33","34_34","35_35","36_36","37_37","38_38","38_39","38_40","39_39","39_40","3_3","40_40","41_41","42_42","43_43","43_46","44_44","44_46","45_45","45_46","46_46","47_47","4_4","5_5","6_6","6_7","7_7","8_8","9_10","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Weapon"]] binary;
var z1[Assignment["Communication_manner"]] binary;
var z2[Assignment["Statement"]] binary;
var z3[Assignment["Request"]] binary;
var z4[Assignment["Increment"]] binary;
var z5[Assignment["Cause_to_make_progress"]] binary;
var z6[Assignment["Substance"]] binary;
var z7[Assignment["Fields"]] binary;
var z8[Assignment["Supporting"]] binary;
var z9[Assignment["Manufacturing"]] binary;
var z10[Assignment["Being_necessary"]] binary;
var z11[Assignment["Organization"]] binary;
var z12[Assignment["Temporal_collocation"]] binary;
var z13[Assignment["Weapon"]] binary;
var z14[Assignment["Weapon"]] binary;
var z15[Assignment["Defend"]] binary;
var z16[Assignment["Intentionally_create"]] binary;
var z17[Assignment["Measure_duration"]] binary;
param probabilities0[Assignment["Weapon"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Communication_manner"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Statement"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Request"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Increment"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Cause_to_make_progress"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Substance"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Fields"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Supporting"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Manufacturing"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Being_necessary"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;
param probabilities11[Assignment["Organization"]] := read "../frameData/frame11.txt" as "<1s,2s> 3n" skip 2;
param probabilities12[Assignment["Temporal_collocation"]] := read "../frameData/frame12.txt" as "<1s,2s> 3n" skip 2;
param probabilities13[Assignment["Weapon"]] := read "../frameData/frame13.txt" as "<1s,2s> 3n" skip 2;
param probabilities14[Assignment["Weapon"]] := read "../frameData/frame14.txt" as "<1s,2s> 3n" skip 2;
param probabilities15[Assignment["Defend"]] := read "../frameData/frame15.txt" as "<1s,2s> 3n" skip 2;
param probabilities16[Assignment["Intentionally_create"]] := read "../frameData/frame16.txt" as "<1s,2s> 3n" skip 2;
param probabilities17[Assignment["Measure_duration"]] := read "../frameData/frame17.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Weapon"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Communication_manner"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Statement"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Request"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Increment"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Cause_to_make_progress"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Substance"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Fields"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Supporting"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Manufacturing"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Being_necessary"] : probabilities10[r,s] * z10[r,s])+(sum <r,s> in Assignment["Organization"] : probabilities11[r,s] * z11[r,s])+(sum <r,s> in Assignment["Temporal_collocation"] : probabilities12[r,s] * z12[r,s])+(sum <r,s> in Assignment["Weapon"] : probabilities13[r,s] * z13[r,s])+(sum <r,s> in Assignment["Weapon"] : probabilities14[r,s] * z14[r,s])+(sum <r,s> in Assignment["Defend"] : probabilities15[r,s] * z15[r,s])+(sum <r,s> in Assignment["Intentionally_create"] : probabilities16[r,s] * z16[r,s])+(sum <r,s> in Assignment["Measure_duration"] : probabilities17[r,s] * z17[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 47};
set G[I] := <0> {"0_0","0_10","0_11","0_24","0_3","0_47"}, <1> {"0_10","0_11","0_24","0_3","0_47","1_1"}, <2> {"0_10","0_11","0_24","0_3","0_47","2_2"}, <3> {"0_10","0_11","0_24","0_3","0_47","3_3"}, <4> {"0_10","0_11","0_24","0_47","4_4"}, <5> {"0_10","0_11","0_24","0_47","5_5"}, <6> {"0_10","0_11","0_24","0_47","6_6","6_7"}, <7> {"0_10","0_11","0_24","0_47","6_7","7_7"}, <8> {"0_10","0_11","0_24","0_47","8_8"}, <9> {"0_10","0_11","0_24","0_47","9_10","9_9"}, <10> {"0_10","0_11","0_24","0_47","10_10","9_10"}, <11> {"0_11","0_24","0_47","11_11","11_24"}, <12> {"0_24","0_47","11_24","12_12","12_24"}, <13> {"0_24","0_47","11_24","12_24","13_13","13_15","13_24"}, <14> {"0_24","0_47","11_24","12_24","13_15","13_24","14_14"}, <15> {"0_24","0_47","11_24","12_24","13_15","13_24","15_15"}, <16> {"0_24","0_47","11_24","12_24","13_24","16_16","16_24"}, <17> {"0_24","0_47","11_24","12_24","13_24","16_24","17_17","17_19","17_24"}, <18> {"0_24","0_47","11_24","12_24","13_24","16_24","17_19","17_24","18_18"}, <19> {"0_24","0_47","11_24","12_24","13_24","16_24","17_19","17_24","19_19"}, <20> {"0_24","0_47","11_24","12_24","13_24","16_24","17_24","20_20","20_21","20_24"}, <21> {"0_24","0_47","11_24","12_24","13_24","16_24","17_24","20_21","20_24","21_21","21_24"}, <22> {"0_24","0_47","11_24","12_24","13_24","16_24","17_24","20_24","21_24","22_22","22_24"}, <23> {"0_24","0_47","11_24","12_24","13_24","16_24","17_24","20_24","21_24","22_24","23_23"}, <24> {"0_24","0_47","11_24","12_24","13_24","16_24","17_24","20_24","21_24","22_24","24_24"}, <25> {"0_47","25_25"}, <26> {"0_47","26_26"}, <27> {"0_47","27_27","27_29","27_40"}, <28> {"0_47","27_29","27_40","28_28"}, <29> {"0_47","27_29","27_40","29_29"}, <30> {"0_47","27_40","30_30","30_40"}, <31> {"0_47","27_40","30_40","31_31","31_37","31_40"}, <32> {"0_47","27_40","30_40","31_37","31_40","32_32"}, <33> {"0_47","27_40","30_40","31_37","31_40","33_33"}, <34> {"0_47","27_40","30_40","31_37","31_40","34_34"}, <35> {"0_47","27_40","30_40","31_37","31_40","35_35"}, <36> {"0_47","27_40","30_40","31_37","31_40","36_36"}, <37> {"0_47","27_40","30_40","31_37","31_40","37_37"}, <38> {"0_47","27_40","30_40","31_40","38_38","38_39","38_40"}, <39> {"0_47","27_40","30_40","31_40","38_39","38_40","39_39","39_40"}, <40> {"0_47","27_40","30_40","31_40","38_40","39_40","40_40"}, <41> {"0_47","41_41"}, <42> {"0_47","42_42"}, <43> {"0_47","43_43","43_46"}, <44> {"0_47","43_46","44_44","44_46"}, <45> {"0_47","43_46","44_46","45_45","45_46"}, <46> {"0_47","43_46","44_46","45_46","46_46"}, <47> {"0_47","47_47"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Communication_manner"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Statement"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Request"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Increment"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Cause_to_make_progress"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Substance"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Fields"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Supporting"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Manufacturing"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Being_necessary"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
subto overlap11: forall <i> in I do 
 sum <r> in Roles["Organization"] do 
 sum <s> in G[i] do z11[r,s] <= 1;
subto overlap12: forall <i> in I do 
 sum <r> in Roles["Temporal_collocation"] do 
 sum <s> in G[i] do z12[r,s] <= 1;
subto overlap13: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z13[r,s] <= 1;
subto overlap14: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z14[r,s] <= 1;
subto overlap15: forall <i> in I do 
 sum <r> in Roles["Defend"] do 
 sum <s> in G[i] do z15[r,s] <= 1;
subto overlap16: forall <i> in I do 
 sum <r> in Roles["Intentionally_create"] do 
 sum <s> in G[i] do z16[r,s] <= 1;
subto overlap17: forall <i> in I do 
 sum <r> in Roles["Measure_duration"] do 
 sum <s> in G[i] do z17[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Weapon"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Communication_manner"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Statement"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Request"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Increment"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Cause_to_make_progress"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Substance"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Fields"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Supporting"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Manufacturing"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Being_necessary"] do sum <s> in Spans : z10[r,s] == 1;
subto unique11: forall <r> in Roles["Organization"] do sum <s> in Spans : z11[r,s] == 1;
subto unique12: forall <r> in Roles["Temporal_collocation"] do sum <s> in Spans : z12[r,s] == 1;
subto unique13: forall <r> in Roles["Weapon"] do sum <s> in Spans : z13[r,s] == 1;
subto unique14: forall <r> in Roles["Weapon"] do sum <s> in Spans : z14[r,s] == 1;
subto unique15: forall <r> in Roles["Defend"] do sum <s> in Spans : z15[r,s] == 1;
subto unique16: forall <r> in Roles["Intentionally_create"] do sum <s> in Spans : z16[r,s] == 1;
subto unique17: forall <r> in Roles["Measure_duration"] do sum <s> in Spans : z17[r,s] == 1;
#pairwise exclusion constraint
set Exc12 := {<"Trajector_event","Trajector_period">,<"Landmark_entity","Landmark_event">,<"Landmark_event","Landmark_period">,<"Trajector_entity","Trajector_event">};
subto exclusion12: forall <ri,rj> in Exc12 do z12[ri,"-1_-1"] + z12[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
