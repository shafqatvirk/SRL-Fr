# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Existence","People_by_vocation","Operational_testing","Cause_to_make_progress","Quantity","Dimension","Quantity","Awareness","Weapon","Active_substance","Inclusion","Active_substance","Aggregate","Killing","Difficulty","Toxic_substance","Substance"};
set Roles[Frames] :=  <"Existence"> {"Place","Duration","Inherent_purpose","Entity","Point_of_view","Time","Circumstances","State","Cause"}, <"People_by_vocation"> {"Type","Origin","Contract_basis","Ethnicity","Employer","Place_of_employment","Person","Descriptor","Rank","Compensation","Persistent_characteristic"}, <"Operational_testing"> {"Purpose","Result","Circumstances","Desired_state","Time","Tester","Place","Degree","Unwanted_characteristics","Tested_property","Means","Period_of_iterations","Duration","Product","Manner"}, <"Cause_to_make_progress"> {"Purpose","Time","Place","Degree","Rate","Means","Domain","Duration","Particular_iteration","Project","Post_state","Manner","Explanation","Agent","Prior_state"}, <"Quantity"> {"Mass","Q_Prop","Degree","Quantity","Individuals"}, <"Dimension"> {"Object","Domain","Measurement","Dimension","Location"}, <"Quantity"> {"Mass","Q_Prop","Degree","Quantity","Individuals"}, <"Awareness"> {"Cognizer","Topic","Degree","Role","Manner","Evidence","Explanation","Time","Content","Expressor","Paradigm"}, <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Active_substance"> {"Name","Type","Substance","Descriptor","Effect"}, <"Inclusion"> {"Purpose","Total","Contrast_set","Subregion","Frequency","Part"}, <"Active_substance"> {"Name","Type","Substance","Descriptor","Effect"}, <"Aggregate"> {"Individuals","AggregateProperty","Aggregate","Name","Domain","Container_possessor"}, <"Killing"> {"Purpose","Means","Depictive","Circumstances","Manner","Result","Explanation","Instrument","Cause","Time","Killer","Beneficiary","Degree","Place","Frequency","Reason","Period_of_iterations","Victim"}, <"Difficulty"> {"Time","Standard","Parameter","Circumstances","Experiencer","Degree","Activity"}, <"Toxic_substance"> {"Duration","Victim","Circumstances","Toxic_substance","Body_part","Toxin_source","Degree"}, <"Substance"> {"Source","Type","Use","Descriptor","Substance","Constituents"};
set Spans := {"-1_-1","0_0","0_2","0_45","10_10","11_11","11_44","12_12","12_14","12_16","12_44","13_13","14_14","15_15","16_16","17_17","17_18","17_44","18_18","18_44","19_19","19_20","19_24","19_26","19_44","1_1","1_2","20_20","21_21","22_22","23_23","24_24","25_25","26_26","27_27","28_28","29_29","29_30","29_31","2_2","30_30","30_31","31_31","32_32","33_33","34_34","35_35","35_36","36_36","37_37","38_38","38_39","39_39","3_3","3_4","40_40","40_44","41_41","41_44","42_42","43_43","44_44","45_45","4_4","5_5","6_6","7_44","7_7","8_10","8_44","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Existence"]] binary;
var z1[Assignment["People_by_vocation"]] binary;
var z2[Assignment["Operational_testing"]] binary;
var z3[Assignment["Cause_to_make_progress"]] binary;
var z4[Assignment["Quantity"]] binary;
var z5[Assignment["Dimension"]] binary;
var z6[Assignment["Quantity"]] binary;
var z7[Assignment["Awareness"]] binary;
var z8[Assignment["Weapon"]] binary;
var z9[Assignment["Active_substance"]] binary;
var z10[Assignment["Inclusion"]] binary;
var z11[Assignment["Active_substance"]] binary;
var z12[Assignment["Aggregate"]] binary;
var z13[Assignment["Killing"]] binary;
var z14[Assignment["Difficulty"]] binary;
var z15[Assignment["Toxic_substance"]] binary;
var z16[Assignment["Substance"]] binary;
param probabilities0[Assignment["Existence"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["People_by_vocation"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Operational_testing"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Cause_to_make_progress"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Quantity"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Dimension"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Quantity"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Awareness"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Weapon"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Active_substance"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Inclusion"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;
param probabilities11[Assignment["Active_substance"]] := read "../frameData/frame11.txt" as "<1s,2s> 3n" skip 2;
param probabilities12[Assignment["Aggregate"]] := read "../frameData/frame12.txt" as "<1s,2s> 3n" skip 2;
param probabilities13[Assignment["Killing"]] := read "../frameData/frame13.txt" as "<1s,2s> 3n" skip 2;
param probabilities14[Assignment["Difficulty"]] := read "../frameData/frame14.txt" as "<1s,2s> 3n" skip 2;
param probabilities15[Assignment["Toxic_substance"]] := read "../frameData/frame15.txt" as "<1s,2s> 3n" skip 2;
param probabilities16[Assignment["Substance"]] := read "../frameData/frame16.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Existence"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["People_by_vocation"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Operational_testing"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Cause_to_make_progress"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Quantity"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Dimension"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Quantity"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Awareness"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Weapon"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Active_substance"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Inclusion"] : probabilities10[r,s] * z10[r,s])+(sum <r,s> in Assignment["Active_substance"] : probabilities11[r,s] * z11[r,s])+(sum <r,s> in Assignment["Aggregate"] : probabilities12[r,s] * z12[r,s])+(sum <r,s> in Assignment["Killing"] : probabilities13[r,s] * z13[r,s])+(sum <r,s> in Assignment["Difficulty"] : probabilities14[r,s] * z14[r,s])+(sum <r,s> in Assignment["Toxic_substance"] : probabilities15[r,s] * z15[r,s])+(sum <r,s> in Assignment["Substance"] : probabilities16[r,s] * z16[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 45};
set G[I] := <0> {"0_0","0_2","0_45"}, <1> {"0_2","0_45","1_1","1_2"}, <2> {"0_2","0_45","1_2","2_2"}, <3> {"0_45","3_3","3_4"}, <4> {"0_45","3_4","4_4"}, <5> {"0_45","5_5"}, <6> {"0_45","6_6"}, <7> {"0_45","7_44","7_7"}, <8> {"0_45","7_44","8_10","8_44","8_8"}, <9> {"0_45","7_44","8_10","8_44","9_9"}, <10> {"0_45","10_10","7_44","8_10","8_44"}, <11> {"0_45","11_11","11_44","7_44","8_44"}, <12> {"0_45","11_44","12_12","12_14","12_16","12_44","7_44","8_44"}, <13> {"0_45","11_44","12_14","12_16","12_44","13_13","7_44","8_44"}, <14> {"0_45","11_44","12_14","12_16","12_44","14_14","7_44","8_44"}, <15> {"0_45","11_44","12_16","12_44","15_15","7_44","8_44"}, <16> {"0_45","11_44","12_16","12_44","16_16","7_44","8_44"}, <17> {"0_45","11_44","12_44","17_17","17_18","17_44","7_44","8_44"}, <18> {"0_45","11_44","12_44","17_18","17_44","18_18","18_44","7_44","8_44"}, <19> {"0_45","11_44","12_44","17_44","18_44","19_19","19_20","19_24","19_26","19_44","7_44","8_44"}, <20> {"0_45","11_44","12_44","17_44","18_44","19_20","19_24","19_26","19_44","20_20","7_44","8_44"}, <21> {"0_45","11_44","12_44","17_44","18_44","19_24","19_26","19_44","21_21","7_44","8_44"}, <22> {"0_45","11_44","12_44","17_44","18_44","19_24","19_26","19_44","22_22","7_44","8_44"}, <23> {"0_45","11_44","12_44","17_44","18_44","19_24","19_26","19_44","23_23","7_44","8_44"}, <24> {"0_45","11_44","12_44","17_44","18_44","19_24","19_26","19_44","24_24","7_44","8_44"}, <25> {"0_45","11_44","12_44","17_44","18_44","19_26","19_44","25_25","7_44","8_44"}, <26> {"0_45","11_44","12_44","17_44","18_44","19_26","19_44","26_26","7_44","8_44"}, <27> {"0_45","11_44","12_44","17_44","18_44","19_44","27_27","7_44","8_44"}, <28> {"0_45","11_44","12_44","17_44","18_44","19_44","28_28","7_44","8_44"}, <29> {"0_45","11_44","12_44","17_44","18_44","19_44","29_29","29_30","29_31","7_44","8_44"}, <30> {"0_45","11_44","12_44","17_44","18_44","19_44","29_30","29_31","30_30","30_31","7_44","8_44"}, <31> {"0_45","11_44","12_44","17_44","18_44","19_44","29_31","30_31","31_31","7_44","8_44"}, <32> {"0_45","11_44","12_44","17_44","18_44","19_44","32_32","7_44","8_44"}, <33> {"0_45","11_44","12_44","17_44","18_44","19_44","33_33","7_44","8_44"}, <34> {"0_45","11_44","12_44","17_44","18_44","19_44","34_34","7_44","8_44"}, <35> {"0_45","11_44","12_44","17_44","18_44","19_44","35_35","35_36","7_44","8_44"}, <36> {"0_45","11_44","12_44","17_44","18_44","19_44","35_36","36_36","7_44","8_44"}, <37> {"0_45","11_44","12_44","17_44","18_44","19_44","37_37","7_44","8_44"}, <38> {"0_45","11_44","12_44","17_44","18_44","19_44","38_38","38_39","7_44","8_44"}, <39> {"0_45","11_44","12_44","17_44","18_44","19_44","38_39","39_39","7_44","8_44"}, <40> {"0_45","11_44","12_44","17_44","18_44","19_44","40_40","40_44","7_44","8_44"}, <41> {"0_45","11_44","12_44","17_44","18_44","19_44","40_44","41_41","41_44","7_44","8_44"}, <42> {"0_45","11_44","12_44","17_44","18_44","19_44","40_44","41_44","42_42","7_44","8_44"}, <43> {"0_45","11_44","12_44","17_44","18_44","19_44","40_44","41_44","43_43","7_44","8_44"}, <44> {"0_45","11_44","12_44","17_44","18_44","19_44","40_44","41_44","44_44","7_44","8_44"}, <45> {"0_45","45_45"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Existence"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["People_by_vocation"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Operational_testing"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Cause_to_make_progress"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Quantity"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Dimension"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Quantity"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Awareness"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Active_substance"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Inclusion"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
subto overlap11: forall <i> in I do 
 sum <r> in Roles["Active_substance"] do 
 sum <s> in G[i] do z11[r,s] <= 1;
subto overlap12: forall <i> in I do 
 sum <r> in Roles["Aggregate"] do 
 sum <s> in G[i] do z12[r,s] <= 1;
subto overlap13: forall <i> in I do 
 sum <r> in Roles["Killing"] do 
 sum <s> in G[i] do z13[r,s] <= 1;
subto overlap14: forall <i> in I do 
 sum <r> in Roles["Difficulty"] do 
 sum <s> in G[i] do z14[r,s] <= 1;
subto overlap15: forall <i> in I do 
 sum <r> in Roles["Toxic_substance"] do 
 sum <s> in G[i] do z15[r,s] <= 1;
subto overlap16: forall <i> in I do 
 sum <r> in Roles["Substance"] do 
 sum <s> in G[i] do z16[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Existence"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["People_by_vocation"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Operational_testing"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Cause_to_make_progress"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Quantity"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Dimension"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Quantity"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Awareness"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Weapon"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Active_substance"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Inclusion"] do sum <s> in Spans : z10[r,s] == 1;
subto unique11: forall <r> in Roles["Active_substance"] do sum <s> in Spans : z11[r,s] == 1;
subto unique12: forall <r> in Roles["Aggregate"] do sum <s> in Spans : z12[r,s] == 1;
subto unique13: forall <r> in Roles["Killing"] do sum <s> in Spans : z13[r,s] == 1;
subto unique14: forall <r> in Roles["Difficulty"] do sum <s> in Spans : z14[r,s] == 1;
subto unique15: forall <r> in Roles["Toxic_substance"] do sum <s> in Spans : z15[r,s] == 1;
subto unique16: forall <r> in Roles["Substance"] do sum <s> in Spans : z16[r,s] == 1;
#pairwise exclusion constraint
set Exc4 := {<"Individuals","Mass">};
subto exclusion4: forall <ri,rj> in Exc4 do z4[ri,"-1_-1"] + z4[rj,"-1_-1"] >= 1;
set Exc6 := {<"Individuals","Mass">};
subto exclusion6: forall <ri,rj> in Exc6 do z6[ri,"-1_-1"] + z6[rj,"-1_-1"] >= 1;
set Exc7 := {<"Cognizer","Expressor">};
subto exclusion7: forall <ri,rj> in Exc7 do z7[ri,"-1_-1"] + z7[rj,"-1_-1"] >= 1;
set Exc13 := {<"Cause","Killer">,<"Cause","Means">,<"Cause","Instrument">};
subto exclusion13: forall <ri,rj> in Exc13 do z13[ri,"-1_-1"] + z13[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
