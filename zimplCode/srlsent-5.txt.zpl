# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Needing","Supporting","Activity_ongoing","Bringing","People","Secrecy_status","Assistance"};
set Roles[Frames] :=  <"Needing"> {"Dependent","Place","Requirement","Cognizer","Degree","Iteration","Time","Circumstances","Consequences"}, <"Supporting"> {"Event_description","Place","Supported","Degree","Manner","Time","Supporter","Means"}, <"Activity_ongoing"> {"Purpose","Circumstances","Depictive","Activity","Event_description","Duration","Manner","Time","Explanation","Means","Subevent","Agent"}, <"Bringing"> {"Duration","Area","Constant_location","Theme","Means","Depictive","Agent","Manner","Explanation","Distance","Co_participant","Time","Source","Beneficiary","Degree","Place","Frequency","Goal","Purpose","Particular_iteration","Path","Carrier"}, <"People"> {"Person","Ethnicity","Persistent_characteristic","Context_of_acquaintance","Descriptor","Age","Origin"}, <"Secrecy_status"> {"Time","Phenomenon","Degree","Epistemic_stance","Cognizer"}, <"Assistance"> {"Purpose","Time","Goal","Place","Frequency","Degree","Helper","Means","Benefited_party","Domain","Duration","Focal_entity","Manner","Explanation"};
set Spans := {"-1_-1","0_0","0_12","10_10","10_11","11_11","12_12","1_1","1_12","2_11","2_2","2_3","3_11","3_3","4_11","4_4","4_5","5_11","5_5","6_11","6_6","7_7","8_11","8_8","9_11","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Needing"]] binary;
var z1[Assignment["Supporting"]] binary;
var z2[Assignment["Activity_ongoing"]] binary;
var z3[Assignment["Bringing"]] binary;
var z4[Assignment["People"]] binary;
var z5[Assignment["Secrecy_status"]] binary;
var z6[Assignment["Assistance"]] binary;
param probabilities0[Assignment["Needing"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Supporting"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Activity_ongoing"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Bringing"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["People"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Secrecy_status"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Assistance"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Needing"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Supporting"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Activity_ongoing"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Bringing"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["People"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Secrecy_status"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Assistance"] : probabilities6[r,s] * z6[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 12};
set G[I] := <0> {"0_0","0_12"}, <1> {"0_12","1_1","1_12"}, <2> {"0_12","1_12","2_11","2_2","2_3"}, <3> {"0_12","1_12","2_11","2_3","3_11","3_3"}, <4> {"0_12","1_12","2_11","3_11","4_11","4_4","4_5"}, <5> {"0_12","1_12","2_11","3_11","4_11","4_5","5_11","5_5"}, <6> {"0_12","1_12","2_11","3_11","4_11","5_11","6_11","6_6"}, <7> {"0_12","1_12","2_11","3_11","4_11","5_11","6_11","7_7"}, <8> {"0_12","1_12","2_11","3_11","4_11","5_11","6_11","8_11","8_8"}, <9> {"0_12","1_12","2_11","3_11","4_11","5_11","6_11","8_11","9_11","9_9"}, <10> {"0_12","10_10","10_11","1_12","2_11","3_11","4_11","5_11","6_11","8_11","9_11"}, <11> {"0_12","10_11","11_11","1_12","2_11","3_11","4_11","5_11","6_11","8_11","9_11"}, <12> {"0_12","12_12","1_12"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Needing"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Supporting"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Activity_ongoing"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Bringing"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["People"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Secrecy_status"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Assistance"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Needing"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Supporting"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Activity_ongoing"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Bringing"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["People"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Secrecy_status"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Assistance"] do sum <s> in Spans : z6[r,s] == 1;
#pairwise exclusion constraint
set Exc3 := {<"Area","Source">,<"Area","Goal">,<"Area","Path">};
subto exclusion3: forall <ri,rj> in Exc3 do z3[ri,"-1_-1"] + z3[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
