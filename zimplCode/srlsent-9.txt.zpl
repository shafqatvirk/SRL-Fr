# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Stimulus_focus","Operating_a_system","Activity_ongoing","Assistance","People_by_age","Kinship","Needing","Supporting"};
set Roles[Frames] :=  <"Stimulus_focus"> {"Stimulus","Parameter","Circumstances","Property","Experiencer","Comparison_set","Degree"}, <"Operating_a_system"> {"Duration","Place","System","Manner","Time","Means","Purpose","Operator"}, <"Activity_ongoing"> {"Purpose","Circumstances","Depictive","Activity","Event_description","Duration","Manner","Time","Explanation","Means","Subevent","Agent"}, <"Assistance"> {"Purpose","Time","Goal","Place","Frequency","Degree","Helper","Means","Benefited_party","Domain","Duration","Focal_entity","Manner","Explanation"}, <"People_by_age"> {"Person","Ethnicity","Persistent_characteristic","Context_of_acquaintance","Descriptor","Age","Origin"}, <"Kinship"> {"Relatives","Descriptor","Ego","Degree","Alter"}, <"Needing"> {"Dependent","Place","Requirement","Cognizer","Degree","Iteration","Time","Circumstances","Consequences"}, <"Supporting"> {"Event_description","Place","Supported","Degree","Manner","Time","Supporter","Means"};
set Spans := {"-1_-1","0_0","0_13","0_19","10_10","10_13","11_11","12_12","13_13","14_14","15_15","16_16","17_17","17_18","18_18","19_19","1_1","1_13","1_2","1_4","2_2","3_3","4_4","5_13","5_5","6_13","6_6","7_7","7_9","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Stimulus_focus"]] binary;
var z1[Assignment["Operating_a_system"]] binary;
var z2[Assignment["Activity_ongoing"]] binary;
var z3[Assignment["Assistance"]] binary;
var z4[Assignment["People_by_age"]] binary;
var z5[Assignment["Kinship"]] binary;
var z6[Assignment["Needing"]] binary;
var z7[Assignment["Supporting"]] binary;
param probabilities0[Assignment["Stimulus_focus"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Operating_a_system"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Activity_ongoing"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Assistance"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["People_by_age"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Kinship"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Needing"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Supporting"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Stimulus_focus"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Operating_a_system"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Activity_ongoing"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Assistance"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["People_by_age"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Kinship"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Needing"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Supporting"] : probabilities7[r,s] * z7[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 19};
set G[I] := <0> {"0_0","0_13","0_19"}, <1> {"0_13","0_19","1_1","1_13","1_2","1_4"}, <2> {"0_13","0_19","1_13","1_2","1_4","2_2"}, <3> {"0_13","0_19","1_13","1_4","3_3"}, <4> {"0_13","0_19","1_13","1_4","4_4"}, <5> {"0_13","0_19","1_13","5_13","5_5"}, <6> {"0_13","0_19","1_13","5_13","6_13","6_6"}, <7> {"0_13","0_19","1_13","5_13","6_13","7_7","7_9"}, <8> {"0_13","0_19","1_13","5_13","6_13","7_9","8_8"}, <9> {"0_13","0_19","1_13","5_13","6_13","7_9","9_9"}, <10> {"0_13","0_19","10_10","10_13","1_13","5_13","6_13"}, <11> {"0_13","0_19","10_13","11_11","1_13","5_13","6_13"}, <12> {"0_13","0_19","10_13","12_12","1_13","5_13","6_13"}, <13> {"0_13","0_19","10_13","13_13","1_13","5_13","6_13"}, <14> {"0_19","14_14"}, <15> {"0_19","15_15"}, <16> {"0_19","16_16"}, <17> {"0_19","17_17","17_18"}, <18> {"0_19","17_18","18_18"}, <19> {"0_19","19_19"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Stimulus_focus"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Operating_a_system"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Activity_ongoing"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Assistance"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["People_by_age"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Kinship"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Needing"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Supporting"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Stimulus_focus"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Operating_a_system"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Activity_ongoing"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Assistance"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["People_by_age"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Kinship"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Needing"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Supporting"] do sum <s> in Spans : z7[r,s] == 1;
#pairwise exclusion constraint
set Exc5 := {<"Ego","Relatives">,<"Alter","Relatives">};
subto exclusion5: forall <ri,rj> in Exc5 do z5[ri,"-1_-1"] + z5[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
set Reqr5 := {<"Alter","Ego">};
subto require5: forall <ri,rj> in Reqr5 do z5[ri,"-1_-1"] - z5[rj,"-1_-1"] == 0;
