# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Relational_quantity","Process_continue","Relational_natural_features","Natural_features","Natural_features","Offering","Natural_features","Locale_by_use"};
set Roles[Frames] :=  <"Relational_quantity"> {"Mass","Denoted_quantity","Reference_quantity","Individuals"}, <"Process_continue"> {"Duration","Place","Manner","Time","Circumstances","Depictive","Event","Concessive"}, <"Relational_natural_features"> {"Focal_feature","Relative_location","Landmark_feature","Container_possessor"}, <"Natural_features"> {"Type","Locale","Relative_location","Name","Formational_cause","Container_possessor","Constituent_parts","Descriptor"}, <"Natural_features"> {"Type","Locale","Relative_location","Name","Formational_cause","Container_possessor","Constituent_parts","Descriptor"}, <"Offering"> {"Potential_recipient","Offerer","Theme"}, <"Natural_features"> {"Type","Locale","Relative_location","Name","Formational_cause","Container_possessor","Constituent_parts","Descriptor"}, <"Locale_by_use"> {"Formational_cause","Use","Locale","Relative_location","Name","Container_possessor","Constituent_parts","Descriptor"};
set Spans := {"-1_-1","0_0","0_18","0_7","10_10","11_11","12_12","13_13","13_15","13_17","14_14","15_15","16_16","17_17","18_18","1_1","1_3","2_2","2_3","3_3","4_4","4_7","5_5","5_7","6_6","7_7","8_8","9_11","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Relational_quantity"]] binary;
var z1[Assignment["Process_continue"]] binary;
var z2[Assignment["Relational_natural_features"]] binary;
var z3[Assignment["Natural_features"]] binary;
var z4[Assignment["Natural_features"]] binary;
var z5[Assignment["Offering"]] binary;
var z6[Assignment["Natural_features"]] binary;
var z7[Assignment["Locale_by_use"]] binary;
param probabilities0[Assignment["Relational_quantity"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Process_continue"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Relational_natural_features"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Natural_features"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Natural_features"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Offering"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Natural_features"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Locale_by_use"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Relational_quantity"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Process_continue"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Relational_natural_features"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Natural_features"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Natural_features"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Offering"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Natural_features"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Locale_by_use"] : probabilities7[r,s] * z7[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 18};
set G[I] := <0> {"0_0","0_18","0_7"}, <1> {"0_18","0_7","1_1","1_3"}, <2> {"0_18","0_7","1_3","2_2","2_3"}, <3> {"0_18","0_7","1_3","2_3","3_3"}, <4> {"0_18","0_7","4_4","4_7"}, <5> {"0_18","0_7","4_7","5_5","5_7"}, <6> {"0_18","0_7","4_7","5_7","6_6"}, <7> {"0_18","0_7","4_7","5_7","7_7"}, <8> {"0_18","8_8"}, <9> {"0_18","9_11","9_9"}, <10> {"0_18","10_10","9_11"}, <11> {"0_18","11_11","9_11"}, <12> {"0_18","12_12"}, <13> {"0_18","13_13","13_15","13_17"}, <14> {"0_18","13_15","13_17","14_14"}, <15> {"0_18","13_15","13_17","15_15"}, <16> {"0_18","13_17","16_16"}, <17> {"0_18","13_17","17_17"}, <18> {"0_18","18_18"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Relational_quantity"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Process_continue"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Relational_natural_features"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Natural_features"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Natural_features"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Offering"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Natural_features"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Locale_by_use"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Relational_quantity"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Process_continue"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Relational_natural_features"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Natural_features"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Natural_features"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Offering"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Natural_features"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Locale_by_use"] do sum <s> in Spans : z7[r,s] == 1;
#pairwise exclusion constraint
#pairwise requirement constraint
