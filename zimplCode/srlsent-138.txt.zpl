# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Weapon","Quantity","Ingredients","Age","Active_substance","Cause_to_make_progress","Time_vector","Organization","Substance","Have_associated","Legality","Social_interaction_evaluation","Using","Aggregate","Using"};
set Roles[Frames] :=  <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Quantity"> {"Mass","Q_Prop","Degree","Quantity","Individuals"}, <"Ingredients"> {"Source","Type","Use","Material","Product","Descriptor"}, <"Age"> {"Attribute","Degree","Entity","Time","Expressor","Duration","Age","Descriptor"}, <"Active_substance"> {"Name","Type","Substance","Descriptor","Effect"}, <"Cause_to_make_progress"> {"Purpose","Time","Place","Degree","Rate","Means","Domain","Duration","Particular_iteration","Project","Post_state","Manner","Explanation","Agent","Prior_state"}, <"Time_vector"> {"Distance","Event","Landmark_event","Direction"}, <"Organization"> {"Period_of_existence","Members","Place","Name","Container_possessor","Organization","Purpose","Descriptor"}, <"Substance"> {"Source","Type","Use","Descriptor","Substance","Constituents"}, <"Have_associated"> {"Time","Entity","Cause","Concessive","Period_of_iterations","Topical_entity","Circumstances"}, <"Legality"> {"Object","Code","Action","Explanation"}, <"Social_interaction_evaluation"> {"Affected_party","Topic","Manner","Behavior","Degree","Expressor","Evaluee"}, <"Using"> {"Duration","Depictive","Purpose","Means","Role","Circumstances","Agent","Manner","Explanation","Outcome","Instrument","Time","Period_of_iterations","Containing_event","Degree","Place","Frequency","Group"}, <"Aggregate"> {"Individuals","AggregateProperty","Aggregate","Name","Domain","Container_possessor"}, <"Using"> {"Duration","Depictive","Purpose","Means","Role","Circumstances","Agent","Manner","Explanation","Outcome","Instrument","Time","Period_of_iterations","Containing_event","Degree","Place","Frequency","Group"};
set Spans := {"-1_-1","0_0","0_13","0_36","10_10","10_13","11_11","12_12","13_13","14_14","14_36","15_15","16_16","16_22","17_17","17_19","17_20","17_22","18_18","19_19","1_1","1_13","20_20","20_22","21_21","21_22","22_22","23_23","24_24","24_27","25_25","25_27","26_26","27_27","28_28","29_29","29_35","2_13","2_2","2_3","30_30","30_31","30_35","31_31","31_35","32_32","32_35","33_33","33_35","34_34","35_35","36_36","3_3","4_13","4_4","5_13","5_5","5_7","6_6","7_7","8_13","8_8","9_13","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Weapon"]] binary;
var z1[Assignment["Quantity"]] binary;
var z2[Assignment["Ingredients"]] binary;
var z3[Assignment["Age"]] binary;
var z4[Assignment["Active_substance"]] binary;
var z5[Assignment["Cause_to_make_progress"]] binary;
var z6[Assignment["Time_vector"]] binary;
var z7[Assignment["Organization"]] binary;
var z8[Assignment["Substance"]] binary;
var z9[Assignment["Have_associated"]] binary;
var z10[Assignment["Legality"]] binary;
var z11[Assignment["Social_interaction_evaluation"]] binary;
var z12[Assignment["Using"]] binary;
var z13[Assignment["Aggregate"]] binary;
var z14[Assignment["Using"]] binary;
param probabilities0[Assignment["Weapon"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Quantity"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Ingredients"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Age"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Active_substance"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Cause_to_make_progress"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Time_vector"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Organization"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Substance"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Have_associated"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Legality"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;
param probabilities11[Assignment["Social_interaction_evaluation"]] := read "../frameData/frame11.txt" as "<1s,2s> 3n" skip 2;
param probabilities12[Assignment["Using"]] := read "../frameData/frame12.txt" as "<1s,2s> 3n" skip 2;
param probabilities13[Assignment["Aggregate"]] := read "../frameData/frame13.txt" as "<1s,2s> 3n" skip 2;
param probabilities14[Assignment["Using"]] := read "../frameData/frame14.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Weapon"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Quantity"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Ingredients"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Age"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Active_substance"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Cause_to_make_progress"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Time_vector"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Organization"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Substance"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Have_associated"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Legality"] : probabilities10[r,s] * z10[r,s])+(sum <r,s> in Assignment["Social_interaction_evaluation"] : probabilities11[r,s] * z11[r,s])+(sum <r,s> in Assignment["Using"] : probabilities12[r,s] * z12[r,s])+(sum <r,s> in Assignment["Aggregate"] : probabilities13[r,s] * z13[r,s])+(sum <r,s> in Assignment["Using"] : probabilities14[r,s] * z14[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 36};
set G[I] := <0> {"0_0","0_13","0_36"}, <1> {"0_13","0_36","1_1","1_13"}, <2> {"0_13","0_36","1_13","2_13","2_2","2_3"}, <3> {"0_13","0_36","1_13","2_13","2_3","3_3"}, <4> {"0_13","0_36","1_13","2_13","4_13","4_4"}, <5> {"0_13","0_36","1_13","2_13","4_13","5_13","5_5","5_7"}, <6> {"0_13","0_36","1_13","2_13","4_13","5_13","5_7","6_6"}, <7> {"0_13","0_36","1_13","2_13","4_13","5_13","5_7","7_7"}, <8> {"0_13","0_36","1_13","2_13","4_13","5_13","8_13","8_8"}, <9> {"0_13","0_36","1_13","2_13","4_13","5_13","8_13","9_13","9_9"}, <10> {"0_13","0_36","10_10","10_13","1_13","2_13","4_13","5_13","8_13","9_13"}, <11> {"0_13","0_36","10_13","11_11","1_13","2_13","4_13","5_13","8_13","9_13"}, <12> {"0_13","0_36","10_13","12_12","1_13","2_13","4_13","5_13","8_13","9_13"}, <13> {"0_13","0_36","10_13","13_13","1_13","2_13","4_13","5_13","8_13","9_13"}, <14> {"0_36","14_14","14_36"}, <15> {"0_36","14_36","15_15"}, <16> {"0_36","14_36","16_16","16_22"}, <17> {"0_36","14_36","16_22","17_17","17_19","17_20","17_22"}, <18> {"0_36","14_36","16_22","17_19","17_20","17_22","18_18"}, <19> {"0_36","14_36","16_22","17_19","17_20","17_22","19_19"}, <20> {"0_36","14_36","16_22","17_20","17_22","20_20","20_22"}, <21> {"0_36","14_36","16_22","17_22","20_22","21_21","21_22"}, <22> {"0_36","14_36","16_22","17_22","20_22","21_22","22_22"}, <23> {"0_36","14_36","23_23"}, <24> {"0_36","14_36","24_24","24_27"}, <25> {"0_36","14_36","24_27","25_25","25_27"}, <26> {"0_36","14_36","24_27","25_27","26_26"}, <27> {"0_36","14_36","24_27","25_27","27_27"}, <28> {"0_36","14_36","28_28"}, <29> {"0_36","14_36","29_29","29_35"}, <30> {"0_36","14_36","29_35","30_30","30_31","30_35"}, <31> {"0_36","14_36","29_35","30_31","30_35","31_31","31_35"}, <32> {"0_36","14_36","29_35","30_35","31_35","32_32","32_35"}, <33> {"0_36","14_36","29_35","30_35","31_35","32_35","33_33","33_35"}, <34> {"0_36","14_36","29_35","30_35","31_35","32_35","33_35","34_34"}, <35> {"0_36","14_36","29_35","30_35","31_35","32_35","33_35","35_35"}, <36> {"0_36","14_36","36_36"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Quantity"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Ingredients"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Age"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Active_substance"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Cause_to_make_progress"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Time_vector"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Organization"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Substance"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Have_associated"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Legality"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
subto overlap11: forall <i> in I do 
 sum <r> in Roles["Social_interaction_evaluation"] do 
 sum <s> in G[i] do z11[r,s] <= 1;
subto overlap12: forall <i> in I do 
 sum <r> in Roles["Using"] do 
 sum <s> in G[i] do z12[r,s] <= 1;
subto overlap13: forall <i> in I do 
 sum <r> in Roles["Aggregate"] do 
 sum <s> in G[i] do z13[r,s] <= 1;
subto overlap14: forall <i> in I do 
 sum <r> in Roles["Using"] do 
 sum <s> in G[i] do z14[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Weapon"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Quantity"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Ingredients"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Age"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Active_substance"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Cause_to_make_progress"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Time_vector"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Organization"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Substance"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Have_associated"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Legality"] do sum <s> in Spans : z10[r,s] == 1;
subto unique11: forall <r> in Roles["Social_interaction_evaluation"] do sum <s> in Spans : z11[r,s] == 1;
subto unique12: forall <r> in Roles["Using"] do sum <s> in Spans : z12[r,s] == 1;
subto unique13: forall <r> in Roles["Aggregate"] do sum <s> in Spans : z13[r,s] == 1;
subto unique14: forall <r> in Roles["Using"] do sum <s> in Spans : z14[r,s] == 1;
#pairwise exclusion constraint
set Exc1 := {<"Individuals","Mass">};
subto exclusion1: forall <ri,rj> in Exc1 do z1[ri,"-1_-1"] + z1[rj,"-1_-1"] >= 1;
set Exc3 := {<"Entity","Expressor">,<"Age","Degree">};
subto exclusion3: forall <ri,rj> in Exc3 do z3[ri,"-1_-1"] + z3[rj,"-1_-1"] >= 1;
set Exc11 := {<"Behavior","Topic">};
subto exclusion11: forall <ri,rj> in Exc11 do z11[ri,"-1_-1"] + z11[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
