# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Existence","Quantity","Means","Verification","Organization","Statement","Statement","Aggregate","Quantity","Statement","Topic","Origin","Weapon","Project","State_continue"};
set Roles[Frames] :=  <"Existence"> {"Place","Duration","Inherent_purpose","Entity","Point_of_view","Time","Circumstances","State","Cause"}, <"Quantity"> {"Mass","Q_Prop","Degree","Quantity","Individuals"}, <"Means"> {"Agent","Purpose","Descriptor","Time","Means"}, <"Verification"> {"Purpose","Inspector","Time","Descriptor","Place","Degree","Means","Unconfirmed_content","Condition","Epistemic_stance","Manner","Explanation","Medium"}, <"Organization"> {"Period_of_existence","Members","Place","Name","Container_possessor","Organization","Purpose","Descriptor"}, <"Statement"> {"Message","Medium","Place","Iteration","Means","Depictive","Manner","Epistemic_stance","Speaker","Event_description","Addressee","Time","Containing_event","Degree","Occasion","Group","Frequency","Particular_iteration","Internal_cause","Topic"}, <"Statement"> {"Message","Medium","Place","Iteration","Means","Depictive","Manner","Epistemic_stance","Speaker","Event_description","Addressee","Time","Containing_event","Degree","Occasion","Group","Frequency","Particular_iteration","Internal_cause","Topic"}, <"Aggregate"> {"Individuals","AggregateProperty","Aggregate","Name","Domain","Container_possessor"}, <"Quantity"> {"Mass","Q_Prop","Degree","Quantity","Individuals"}, <"Statement"> {"Message","Medium","Place","Iteration","Means","Depictive","Manner","Epistemic_stance","Speaker","Event_description","Addressee","Time","Containing_event","Degree","Occasion","Group","Frequency","Particular_iteration","Internal_cause","Topic"}, <"Topic"> {"Text","Topic","Manner","Status","Communicator","Degree"}, <"Origin"> {"Entity","Origin"}, <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Project"> {"Salient_entity","Duration","Agent","Goal","Manner","Name","Project","Field","Descriptor","Activity"}, <"State_continue"> {"Explanation","Time","Entity","Duration","Place","State"};
set Spans := {"-1_-1","0_0","0_14","0_27","10_10","11_11","12_12","12_14","13_13","13_14","14_14","15_15","16_16","16_24","17_17","17_24","18_18","18_19","18_24","19_19","1_1","1_14","1_2","20_20","20_24","21_21","21_24","22_22","23_23","24_24","25_25","26_26","27_27","2_14","2_2","3_14","3_3","3_5","4_4","5_5","6_14","6_6","7_14","7_7","8_11","8_14","8_8","8_9","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Existence"]] binary;
var z1[Assignment["Quantity"]] binary;
var z2[Assignment["Means"]] binary;
var z3[Assignment["Verification"]] binary;
var z4[Assignment["Organization"]] binary;
var z5[Assignment["Statement"]] binary;
var z6[Assignment["Statement"]] binary;
var z7[Assignment["Aggregate"]] binary;
var z8[Assignment["Quantity"]] binary;
var z9[Assignment["Statement"]] binary;
var z10[Assignment["Topic"]] binary;
var z11[Assignment["Origin"]] binary;
var z12[Assignment["Weapon"]] binary;
var z13[Assignment["Project"]] binary;
var z14[Assignment["State_continue"]] binary;
param probabilities0[Assignment["Existence"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Quantity"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Means"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Verification"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Organization"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Statement"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Statement"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Aggregate"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Quantity"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Statement"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Topic"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;
param probabilities11[Assignment["Origin"]] := read "../frameData/frame11.txt" as "<1s,2s> 3n" skip 2;
param probabilities12[Assignment["Weapon"]] := read "../frameData/frame12.txt" as "<1s,2s> 3n" skip 2;
param probabilities13[Assignment["Project"]] := read "../frameData/frame13.txt" as "<1s,2s> 3n" skip 2;
param probabilities14[Assignment["State_continue"]] := read "../frameData/frame14.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Existence"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Quantity"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Means"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Verification"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Organization"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Statement"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Statement"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Aggregate"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Quantity"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Statement"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Topic"] : probabilities10[r,s] * z10[r,s])+(sum <r,s> in Assignment["Origin"] : probabilities11[r,s] * z11[r,s])+(sum <r,s> in Assignment["Weapon"] : probabilities12[r,s] * z12[r,s])+(sum <r,s> in Assignment["Project"] : probabilities13[r,s] * z13[r,s])+(sum <r,s> in Assignment["State_continue"] : probabilities14[r,s] * z14[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 27};
set G[I] := <0> {"0_0","0_14","0_27"}, <1> {"0_14","0_27","1_1","1_14","1_2"}, <2> {"0_14","0_27","1_14","1_2","2_14","2_2"}, <3> {"0_14","0_27","1_14","2_14","3_14","3_3","3_5"}, <4> {"0_14","0_27","1_14","2_14","3_14","3_5","4_4"}, <5> {"0_14","0_27","1_14","2_14","3_14","3_5","5_5"}, <6> {"0_14","0_27","1_14","2_14","3_14","6_14","6_6"}, <7> {"0_14","0_27","1_14","2_14","3_14","6_14","7_14","7_7"}, <8> {"0_14","0_27","1_14","2_14","3_14","6_14","7_14","8_11","8_14","8_8","8_9"}, <9> {"0_14","0_27","1_14","2_14","3_14","6_14","7_14","8_11","8_14","8_9","9_9"}, <10> {"0_14","0_27","10_10","1_14","2_14","3_14","6_14","7_14","8_11","8_14"}, <11> {"0_14","0_27","11_11","1_14","2_14","3_14","6_14","7_14","8_11","8_14"}, <12> {"0_14","0_27","12_12","12_14","1_14","2_14","3_14","6_14","7_14","8_14"}, <13> {"0_14","0_27","12_14","13_13","13_14","1_14","2_14","3_14","6_14","7_14","8_14"}, <14> {"0_14","0_27","12_14","13_14","14_14","1_14","2_14","3_14","6_14","7_14","8_14"}, <15> {"0_27","15_15"}, <16> {"0_27","16_16","16_24"}, <17> {"0_27","16_24","17_17","17_24"}, <18> {"0_27","16_24","17_24","18_18","18_19","18_24"}, <19> {"0_27","16_24","17_24","18_19","18_24","19_19"}, <20> {"0_27","16_24","17_24","18_24","20_20","20_24"}, <21> {"0_27","16_24","17_24","18_24","20_24","21_21","21_24"}, <22> {"0_27","16_24","17_24","18_24","20_24","21_24","22_22"}, <23> {"0_27","16_24","17_24","18_24","20_24","21_24","23_23"}, <24> {"0_27","16_24","17_24","18_24","20_24","21_24","24_24"}, <25> {"0_27","25_25"}, <26> {"0_27","26_26"}, <27> {"0_27","27_27"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Existence"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Quantity"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Means"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Verification"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Organization"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Statement"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Statement"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Aggregate"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Quantity"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Statement"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Topic"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
subto overlap11: forall <i> in I do 
 sum <r> in Roles["Origin"] do 
 sum <s> in G[i] do z11[r,s] <= 1;
subto overlap12: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z12[r,s] <= 1;
subto overlap13: forall <i> in I do 
 sum <r> in Roles["Project"] do 
 sum <s> in G[i] do z13[r,s] <= 1;
subto overlap14: forall <i> in I do 
 sum <r> in Roles["State_continue"] do 
 sum <s> in G[i] do z14[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Existence"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Quantity"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Means"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Verification"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Organization"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Statement"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Statement"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Aggregate"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Quantity"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Statement"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Topic"] do sum <s> in Spans : z10[r,s] == 1;
subto unique11: forall <r> in Roles["Origin"] do sum <s> in Spans : z11[r,s] == 1;
subto unique12: forall <r> in Roles["Weapon"] do sum <s> in Spans : z12[r,s] == 1;
subto unique13: forall <r> in Roles["Project"] do sum <s> in Spans : z13[r,s] == 1;
subto unique14: forall <r> in Roles["State_continue"] do sum <s> in Spans : z14[r,s] == 1;
#pairwise exclusion constraint
set Exc1 := {<"Individuals","Mass">};
subto exclusion1: forall <ri,rj> in Exc1 do z1[ri,"-1_-1"] + z1[rj,"-1_-1"] >= 1;
set Exc8 := {<"Individuals","Mass">};
subto exclusion8: forall <ri,rj> in Exc8 do z8[ri,"-1_-1"] + z8[rj,"-1_-1"] >= 1;
set Exc13 := {<"Activity","Salient_entity">};
subto exclusion13: forall <ri,rj> in Exc13 do z13[ri,"-1_-1"] + z13[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
