# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Part_orientational","Import_export","Weapon","Weapon","Ingredients","Artifact"};
set Roles[Frames] :=  <"Part_orientational"> {"Part_Prop","Part","Whole"}, <"Import_export"> {"Exporting_area","Goods","Time","Importing_area","Purpose","Agent"}, <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Ingredients"> {"Source","Type","Use","Material","Product","Descriptor"}, <"Artifact"> {"Creator","Type","Use","Material","Time_of_creation","Name","Artifact"};
set Spans := {"-1_-1","0_0","0_1","0_24","10_10","10_12","11_11","11_12","12_12","13_13","14_14","15_15","16_16","17_17","18_18","18_20","19_19","1_1","20_20","21_21","22_22","23_23","24_24","2_2","2_24","3_23","3_3","4_23","4_4","5_5","6_6","6_7","7_7","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Part_orientational"]] binary;
var z1[Assignment["Import_export"]] binary;
var z2[Assignment["Weapon"]] binary;
var z3[Assignment["Weapon"]] binary;
var z4[Assignment["Ingredients"]] binary;
var z5[Assignment["Artifact"]] binary;
param probabilities0[Assignment["Part_orientational"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Import_export"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Weapon"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Weapon"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Ingredients"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Artifact"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Part_orientational"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Import_export"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Weapon"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Weapon"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Ingredients"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Artifact"] : probabilities5[r,s] * z5[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 24};
set G[I] := <0> {"0_0","0_1","0_24"}, <1> {"0_1","0_24","1_1"}, <2> {"0_24","2_2","2_24"}, <3> {"0_24","2_24","3_23","3_3"}, <4> {"0_24","2_24","3_23","4_23","4_4"}, <5> {"0_24","2_24","3_23","4_23","5_5"}, <6> {"0_24","2_24","3_23","4_23","6_6","6_7"}, <7> {"0_24","2_24","3_23","4_23","6_7","7_7"}, <8> {"0_24","2_24","3_23","4_23","8_8"}, <9> {"0_24","2_24","3_23","4_23","9_9"}, <10> {"0_24","10_10","10_12","2_24","3_23","4_23"}, <11> {"0_24","10_12","11_11","11_12","2_24","3_23","4_23"}, <12> {"0_24","10_12","11_12","12_12","2_24","3_23","4_23"}, <13> {"0_24","13_13","2_24","3_23","4_23"}, <14> {"0_24","14_14","2_24","3_23","4_23"}, <15> {"0_24","15_15","2_24","3_23","4_23"}, <16> {"0_24","16_16","2_24","3_23","4_23"}, <17> {"0_24","17_17","2_24","3_23","4_23"}, <18> {"0_24","18_18","18_20","2_24","3_23","4_23"}, <19> {"0_24","18_20","19_19","2_24","3_23","4_23"}, <20> {"0_24","18_20","20_20","2_24","3_23","4_23"}, <21> {"0_24","21_21","2_24","3_23","4_23"}, <22> {"0_24","22_22","2_24","3_23","4_23"}, <23> {"0_24","23_23","2_24","3_23","4_23"}, <24> {"0_24","24_24","2_24"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Part_orientational"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Import_export"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Ingredients"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Artifact"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Part_orientational"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Import_export"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Weapon"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Weapon"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Ingredients"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Artifact"] do sum <s> in Spans : z5[r,s] == 1;
#pairwise exclusion constraint
#pairwise requirement constraint
