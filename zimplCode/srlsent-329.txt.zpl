# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Weapon","Weapon","Quantity","Scrutiny","Reasoning","Recording","Exporting","Evidence","Part_orientational","Willingness","Commerce_sell","Weapon","Ingredients","Artifact","Completeness"};
set Roles[Frames] :=  <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Quantity"> {"Mass","Q_Prop","Degree","Quantity","Individuals"}, <"Scrutiny"> {"Instrument","Cognizer","Phenomenon","Degree","Manner","Ground","Time","Means","Medium","Purpose","Direction"}, <"Reasoning"> {"Place","Addressee","Medium","Content","Arguer","Manner","Time","Group","Means","Support","Degree"}, <"Recording"> {"Value","Time","Instrument","Place","Frequency","Degree","Language","Period_of_iterations","Phenomenon","Duration","Attribute","Manner","Agent","Medium"}, <"Exporting"> {"Purpose","Type","Exporter","Time","Goods","Path","Re_encoding","Importing_area","Exporting_area","Vehicle","Manner","Explanation"}, <"Evidence"> {"Domain_of_Relevance","Support","Manner","Depictive","Proposition","Degree","Cognizer"}, <"Part_orientational"> {"Part_Prop","Part","Whole"}, <"Willingness"> {"Explanation","Time","Activity","Degree","Frequency","Cognizer"}, <"Commerce_sell"> {"Purpose","Result","Unit","Purpose_of_Goods","Goods","Place","Seller","Rate","Manner","Relay","Buyer","Means","Time","Money"}, <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Ingredients"> {"Source","Type","Use","Material","Product","Descriptor"}, <"Artifact"> {"Creator","Type","Use","Material","Time_of_creation","Name","Artifact"}, <"Completeness"> {"Degree","Whole","Time"};
set Spans := {"-1_-1","0_0","0_1","0_31","10_10","10_11","11_11","12_12","12_30","13_13","13_30","14_14","14_15","14_30","15_15","16_16","16_30","17_17","18_18","18_30","19_19","19_30","1_1","20_20","20_21","20_30","21_21","21_30","22_22","22_23","22_30","23_23","24_24","25_25","25_29","26_26","27_27","28_28","29_29","2_2","30_30","31_31","3_3","4_30","4_4","5_11","5_12","5_30","5_5","5_6","5_7","6_6","7_11","7_7","8_11","8_8","9_11","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Weapon"]] binary;
var z1[Assignment["Weapon"]] binary;
var z2[Assignment["Quantity"]] binary;
var z3[Assignment["Scrutiny"]] binary;
var z4[Assignment["Reasoning"]] binary;
var z5[Assignment["Recording"]] binary;
var z6[Assignment["Exporting"]] binary;
var z7[Assignment["Evidence"]] binary;
var z8[Assignment["Part_orientational"]] binary;
var z9[Assignment["Willingness"]] binary;
var z10[Assignment["Commerce_sell"]] binary;
var z11[Assignment["Weapon"]] binary;
var z12[Assignment["Ingredients"]] binary;
var z13[Assignment["Artifact"]] binary;
var z14[Assignment["Completeness"]] binary;
param probabilities0[Assignment["Weapon"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Weapon"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Quantity"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Scrutiny"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Reasoning"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Recording"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Exporting"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Evidence"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Part_orientational"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Willingness"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Commerce_sell"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;
param probabilities11[Assignment["Weapon"]] := read "../frameData/frame11.txt" as "<1s,2s> 3n" skip 2;
param probabilities12[Assignment["Ingredients"]] := read "../frameData/frame12.txt" as "<1s,2s> 3n" skip 2;
param probabilities13[Assignment["Artifact"]] := read "../frameData/frame13.txt" as "<1s,2s> 3n" skip 2;
param probabilities14[Assignment["Completeness"]] := read "../frameData/frame14.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Weapon"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Weapon"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Quantity"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Scrutiny"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Reasoning"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Recording"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Exporting"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Evidence"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Part_orientational"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Willingness"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Commerce_sell"] : probabilities10[r,s] * z10[r,s])+(sum <r,s> in Assignment["Weapon"] : probabilities11[r,s] * z11[r,s])+(sum <r,s> in Assignment["Ingredients"] : probabilities12[r,s] * z12[r,s])+(sum <r,s> in Assignment["Artifact"] : probabilities13[r,s] * z13[r,s])+(sum <r,s> in Assignment["Completeness"] : probabilities14[r,s] * z14[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 31};
set G[I] := <0> {"0_0","0_1","0_31"}, <1> {"0_1","0_31","1_1"}, <2> {"0_31","2_2"}, <3> {"0_31","3_3"}, <4> {"0_31","4_30","4_4"}, <5> {"0_31","4_30","5_11","5_12","5_30","5_5","5_6","5_7"}, <6> {"0_31","4_30","5_11","5_12","5_30","5_6","5_7","6_6"}, <7> {"0_31","4_30","5_11","5_12","5_30","5_7","7_11","7_7"}, <8> {"0_31","4_30","5_11","5_12","5_30","7_11","8_11","8_8"}, <9> {"0_31","4_30","5_11","5_12","5_30","7_11","8_11","9_11","9_9"}, <10> {"0_31","10_10","10_11","4_30","5_11","5_12","5_30","7_11","8_11","9_11"}, <11> {"0_31","10_11","11_11","4_30","5_11","5_12","5_30","7_11","8_11","9_11"}, <12> {"0_31","12_12","12_30","4_30","5_12","5_30"}, <13> {"0_31","12_30","13_13","13_30","4_30","5_30"}, <14> {"0_31","12_30","13_30","14_14","14_15","14_30","4_30","5_30"}, <15> {"0_31","12_30","13_30","14_15","14_30","15_15","4_30","5_30"}, <16> {"0_31","12_30","13_30","14_30","16_16","16_30","4_30","5_30"}, <17> {"0_31","12_30","13_30","14_30","16_30","17_17","4_30","5_30"}, <18> {"0_31","12_30","13_30","14_30","16_30","18_18","18_30","4_30","5_30"}, <19> {"0_31","12_30","13_30","14_30","16_30","18_30","19_19","19_30","4_30","5_30"}, <20> {"0_31","12_30","13_30","14_30","16_30","18_30","19_30","20_20","20_21","20_30","4_30","5_30"}, <21> {"0_31","12_30","13_30","14_30","16_30","18_30","19_30","20_21","20_30","21_21","21_30","4_30","5_30"}, <22> {"0_31","12_30","13_30","14_30","16_30","18_30","19_30","20_30","21_30","22_22","22_23","22_30","4_30","5_30"}, <23> {"0_31","12_30","13_30","14_30","16_30","18_30","19_30","20_30","21_30","22_23","22_30","23_23","4_30","5_30"}, <24> {"0_31","12_30","13_30","14_30","16_30","18_30","19_30","20_30","21_30","22_30","24_24","4_30","5_30"}, <25> {"0_31","12_30","13_30","14_30","16_30","18_30","19_30","20_30","21_30","22_30","25_25","25_29","4_30","5_30"}, <26> {"0_31","12_30","13_30","14_30","16_30","18_30","19_30","20_30","21_30","22_30","25_29","26_26","4_30","5_30"}, <27> {"0_31","12_30","13_30","14_30","16_30","18_30","19_30","20_30","21_30","22_30","25_29","27_27","4_30","5_30"}, <28> {"0_31","12_30","13_30","14_30","16_30","18_30","19_30","20_30","21_30","22_30","25_29","28_28","4_30","5_30"}, <29> {"0_31","12_30","13_30","14_30","16_30","18_30","19_30","20_30","21_30","22_30","25_29","29_29","4_30","5_30"}, <30> {"0_31","12_30","13_30","14_30","16_30","18_30","19_30","20_30","21_30","22_30","30_30","4_30","5_30"}, <31> {"0_31","31_31"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Quantity"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Scrutiny"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Reasoning"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Recording"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Exporting"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Evidence"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Part_orientational"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Willingness"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Commerce_sell"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
subto overlap11: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z11[r,s] <= 1;
subto overlap12: forall <i> in I do 
 sum <r> in Roles["Ingredients"] do 
 sum <s> in G[i] do z12[r,s] <= 1;
subto overlap13: forall <i> in I do 
 sum <r> in Roles["Artifact"] do 
 sum <s> in G[i] do z13[r,s] <= 1;
subto overlap14: forall <i> in I do 
 sum <r> in Roles["Completeness"] do 
 sum <s> in G[i] do z14[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Weapon"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Weapon"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Quantity"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Scrutiny"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Reasoning"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Recording"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Exporting"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Evidence"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Part_orientational"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Willingness"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Commerce_sell"] do sum <s> in Spans : z10[r,s] == 1;
subto unique11: forall <r> in Roles["Weapon"] do sum <s> in Spans : z11[r,s] == 1;
subto unique12: forall <r> in Roles["Ingredients"] do sum <s> in Spans : z12[r,s] == 1;
subto unique13: forall <r> in Roles["Artifact"] do sum <s> in Spans : z13[r,s] == 1;
subto unique14: forall <r> in Roles["Completeness"] do sum <s> in Spans : z14[r,s] == 1;
#pairwise exclusion constraint
set Exc2 := {<"Individuals","Mass">};
subto exclusion2: forall <ri,rj> in Exc2 do z2[ri,"-1_-1"] + z2[rj,"-1_-1"] >= 1;
set Exc5 := {<"Phenomenon","Value">,<"Attribute","Phenomenon">};
subto exclusion5: forall <ri,rj> in Exc5 do z5[ri,"-1_-1"] + z5[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
