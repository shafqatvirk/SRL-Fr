# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Existence","Age","Education_teaching","Departing","Temporal_collocation","Political_locales","Businesses","Origin","Organization","Exporting","Causation","Sufficiency","Possibilities","Foreign_or_domestic_country"};
set Roles[Frames] :=  <"Existence"> {"Place","Duration","Inherent_purpose","Entity","Point_of_view","Time","Circumstances","State","Cause"}, <"Age"> {"Attribute","Degree","Entity","Time","Expressor","Duration","Age","Descriptor"}, <"Education_teaching"> {"Duration","Depictive","Purpose","Means","Role","Institution","Level","Manner","Result","Subject","Teacher","Course","Time","Material","Degree","Place","Skill","Qualification","Student","Fact","Precept"}, <"Departing"> {"Speed","Place","Theme","Cotheme","Distance","Depictive","Circumstances","Source","Manner","Journey","Explanation","Time","Reason","Containing_event","Event_description","Re_encoding","Goal","Duration_of_end_state","Purpose","Frequency","Path","Mode_of_transportation"}, <"Temporal_collocation"> {"Event_description","Landmark_period","Trajector_entity","Landmark_entity","Landmark_event","Trajector_period","Trajector_event"}, <"Political_locales"> {"Relative_location","Constituent_parts","Container_possessor","Descriptor","Name","Population","Locale"}, <"Businesses"> {"Descriptor","Business_Name","Service_provider","Business","Place","Product","Proprietor"}, <"Origin"> {"Entity","Origin"}, <"Organization"> {"Period_of_existence","Members","Place","Name","Container_possessor","Organization","Purpose","Descriptor"}, <"Exporting"> {"Purpose","Type","Exporter","Time","Goods","Path","Re_encoding","Importing_area","Exporting_area","Vehicle","Manner","Explanation"}, <"Causation"> {"Circumstances","Time","Actor","Place","Frequency","Means","Effect","Cause","Reason","Affected","Manner","Concessive","Explanation"}, <"Sufficiency"> {"Item","Scale","Degree","Enabled_situation"}, <"Possibilities"> {"Purpose","Event","Salient_entity","Agent","Number_of_possibilities"}, <"Foreign_or_domestic_country"> {"Relative_location","Name","Descriptor","Current_country","Population","Discourse_salient_country"};
set Spans := {"-1_-1","0_0","0_24","0_9","10_10","11_11","11_13","12_12","13_13","14_14","15_15","15_16","15_23","16_16","16_23","17_17","17_23","18_18","18_23","19_19","19_23","1_1","1_2","20_20","20_21","21_21","22_22","22_23","23_23","24_24","2_2","3_3","4_4","5_5","5_9","6_6","7_7","8_8","8_9","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Existence"]] binary;
var z1[Assignment["Age"]] binary;
var z2[Assignment["Education_teaching"]] binary;
var z3[Assignment["Departing"]] binary;
var z4[Assignment["Temporal_collocation"]] binary;
var z5[Assignment["Political_locales"]] binary;
var z6[Assignment["Businesses"]] binary;
var z7[Assignment["Origin"]] binary;
var z8[Assignment["Organization"]] binary;
var z9[Assignment["Exporting"]] binary;
var z10[Assignment["Causation"]] binary;
var z11[Assignment["Sufficiency"]] binary;
var z12[Assignment["Possibilities"]] binary;
var z13[Assignment["Foreign_or_domestic_country"]] binary;
param probabilities0[Assignment["Existence"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Age"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Education_teaching"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Departing"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Temporal_collocation"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Political_locales"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Businesses"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Origin"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Organization"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Exporting"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Causation"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;
param probabilities11[Assignment["Sufficiency"]] := read "../frameData/frame11.txt" as "<1s,2s> 3n" skip 2;
param probabilities12[Assignment["Possibilities"]] := read "../frameData/frame12.txt" as "<1s,2s> 3n" skip 2;
param probabilities13[Assignment["Foreign_or_domestic_country"]] := read "../frameData/frame13.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Existence"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Age"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Education_teaching"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Departing"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Temporal_collocation"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Political_locales"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Businesses"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Origin"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Organization"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Exporting"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Causation"] : probabilities10[r,s] * z10[r,s])+(sum <r,s> in Assignment["Sufficiency"] : probabilities11[r,s] * z11[r,s])+(sum <r,s> in Assignment["Possibilities"] : probabilities12[r,s] * z12[r,s])+(sum <r,s> in Assignment["Foreign_or_domestic_country"] : probabilities13[r,s] * z13[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 24};
set G[I] := <0> {"0_0","0_24","0_9"}, <1> {"0_24","0_9","1_1","1_2"}, <2> {"0_24","0_9","1_2","2_2"}, <3> {"0_24","0_9","3_3"}, <4> {"0_24","0_9","4_4"}, <5> {"0_24","0_9","5_5","5_9"}, <6> {"0_24","0_9","5_9","6_6"}, <7> {"0_24","0_9","5_9","7_7"}, <8> {"0_24","0_9","5_9","8_8","8_9"}, <9> {"0_24","0_9","5_9","8_9","9_9"}, <10> {"0_24","10_10"}, <11> {"0_24","11_11","11_13"}, <12> {"0_24","11_13","12_12"}, <13> {"0_24","11_13","13_13"}, <14> {"0_24","14_14"}, <15> {"0_24","15_15","15_16","15_23"}, <16> {"0_24","15_16","15_23","16_16","16_23"}, <17> {"0_24","15_23","16_23","17_17","17_23"}, <18> {"0_24","15_23","16_23","17_23","18_18","18_23"}, <19> {"0_24","15_23","16_23","17_23","18_23","19_19","19_23"}, <20> {"0_24","15_23","16_23","17_23","18_23","19_23","20_20","20_21"}, <21> {"0_24","15_23","16_23","17_23","18_23","19_23","20_21","21_21"}, <22> {"0_24","15_23","16_23","17_23","18_23","19_23","22_22","22_23"}, <23> {"0_24","15_23","16_23","17_23","18_23","19_23","22_23","23_23"}, <24> {"0_24","24_24"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Existence"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Age"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Education_teaching"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Departing"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Temporal_collocation"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Political_locales"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Businesses"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Origin"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Organization"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Exporting"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Causation"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
subto overlap11: forall <i> in I do 
 sum <r> in Roles["Sufficiency"] do 
 sum <s> in G[i] do z11[r,s] <= 1;
subto overlap12: forall <i> in I do 
 sum <r> in Roles["Possibilities"] do 
 sum <s> in G[i] do z12[r,s] <= 1;
subto overlap13: forall <i> in I do 
 sum <r> in Roles["Foreign_or_domestic_country"] do 
 sum <s> in G[i] do z13[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Existence"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Age"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Education_teaching"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Departing"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Temporal_collocation"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Political_locales"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Businesses"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Origin"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Organization"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Exporting"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Causation"] do sum <s> in Spans : z10[r,s] == 1;
subto unique11: forall <r> in Roles["Sufficiency"] do sum <s> in Spans : z11[r,s] == 1;
subto unique12: forall <r> in Roles["Possibilities"] do sum <s> in Spans : z12[r,s] == 1;
subto unique13: forall <r> in Roles["Foreign_or_domestic_country"] do sum <s> in Spans : z13[r,s] == 1;
#pairwise exclusion constraint
set Exc1 := {<"Entity","Expressor">,<"Age","Degree">};
subto exclusion1: forall <ri,rj> in Exc1 do z1[ri,"-1_-1"] + z1[rj,"-1_-1"] >= 1;
set Exc2 := {<"Precept","Subject">,<"Precept","Skill">,<"Skill","Subject">,<"Fact","Precept">,<"Fact","Qualification">};
subto exclusion2: forall <ri,rj> in Exc2 do z2[ri,"-1_-1"] + z2[rj,"-1_-1"] >= 1;
set Exc4 := {<"Trajector_event","Trajector_period">,<"Landmark_entity","Landmark_event">,<"Landmark_event","Landmark_period">,<"Trajector_entity","Trajector_event">};
subto exclusion4: forall <ri,rj> in Exc4 do z4[ri,"-1_-1"] + z4[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
