# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Event","Secrecy_status","Intentionally_act","Locale","Inspecting","Endangering","Attempt"};
set Roles[Frames] :=  <"Event"> {"Time","Duration","Place","Manner","Reason","Event","Frequency"}, <"Secrecy_status"> {"Time","Phenomenon","Degree","Epistemic_stance","Cognizer"}, <"Intentionally_act"> {"Purpose","Result","Time","Place","Frequency","Means","Event_dscription","Period_of_iterations","Domain","Act","Particular_iteration","Manner","Explanation","Agent"}, <"Locale"> {"Formational_cause","Locale","Relative_location","Name","Container_possessor","Related_event","Constituent_parts","Descriptor"}, <"Inspecting"> {"Desired_state","Location_of_inspector","Degree","Manner","Inspector","Ground","Time","Circumstances","Unwanted_entity","Means","Purpose"}, <"Endangering"> {"Time","Valued_entity","Cause","Endangering_act","Manner","Agent"}, <"Attempt"> {"Purpose","Circumstances","Time","Goal","Particular_iteration","Place","Frequency","Degree","Means","Outcome","Condition","Depictive","Duration","Manner","Agent"};
set Spans := {"-1_-1","0_0","0_11","0_21","10_10","10_11","11_11","12_12","13_13","13_14","14_14","15_15","16_16","16_20","17_17","17_18","17_20","18_18","18_20","19_19","19_20","1_1","1_11","1_2","20_20","21_21","2_2","3_11","3_3","4_4","4_5","5_5","6_11","6_6","7_11","7_7","8_8","9_11","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Event"]] binary;
var z1[Assignment["Secrecy_status"]] binary;
var z2[Assignment["Intentionally_act"]] binary;
var z3[Assignment["Locale"]] binary;
var z4[Assignment["Inspecting"]] binary;
var z5[Assignment["Endangering"]] binary;
var z6[Assignment["Attempt"]] binary;
param probabilities0[Assignment["Event"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Secrecy_status"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Intentionally_act"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Locale"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Inspecting"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Endangering"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Attempt"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Event"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Secrecy_status"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Intentionally_act"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Locale"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Inspecting"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Endangering"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Attempt"] : probabilities6[r,s] * z6[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 21};
set G[I] := <0> {"0_0","0_11","0_21"}, <1> {"0_11","0_21","1_1","1_11","1_2"}, <2> {"0_11","0_21","1_11","1_2","2_2"}, <3> {"0_11","0_21","1_11","3_11","3_3"}, <4> {"0_11","0_21","1_11","3_11","4_4","4_5"}, <5> {"0_11","0_21","1_11","3_11","4_5","5_5"}, <6> {"0_11","0_21","1_11","3_11","6_11","6_6"}, <7> {"0_11","0_21","1_11","3_11","6_11","7_11","7_7"}, <8> {"0_11","0_21","1_11","3_11","6_11","7_11","8_8"}, <9> {"0_11","0_21","1_11","3_11","6_11","7_11","9_11","9_9"}, <10> {"0_11","0_21","10_10","10_11","1_11","3_11","6_11","7_11","9_11"}, <11> {"0_11","0_21","10_11","11_11","1_11","3_11","6_11","7_11","9_11"}, <12> {"0_21","12_12"}, <13> {"0_21","13_13","13_14"}, <14> {"0_21","13_14","14_14"}, <15> {"0_21","15_15"}, <16> {"0_21","16_16","16_20"}, <17> {"0_21","16_20","17_17","17_18","17_20"}, <18> {"0_21","16_20","17_18","17_20","18_18","18_20"}, <19> {"0_21","16_20","17_20","18_20","19_19","19_20"}, <20> {"0_21","16_20","17_20","18_20","19_20","20_20"}, <21> {"0_21","21_21"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Event"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Secrecy_status"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Intentionally_act"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Locale"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Inspecting"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Endangering"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Attempt"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Event"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Secrecy_status"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Intentionally_act"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Locale"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Inspecting"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Endangering"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Attempt"] do sum <s> in Spans : z6[r,s] == 1;
#pairwise exclusion constraint
set Exc5 := {<"Agent","Cause">};
subto exclusion5: forall <ri,rj> in Exc5 do z5[ri,"-1_-1"] + z5[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
