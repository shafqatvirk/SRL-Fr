# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Possession","Quantity","Stage_of_progress","Research","Institutions","Using","Diversity","Substance","Aggregate","Causation","Inclusion","Manufacturing","Research","Increment","Scrutiny"};
set Roles[Frames] :=  <"Possession"> {"Explanation","Time","Owner","Possession","Duration","Manner","Depictive"}, <"Quantity"> {"Mass","Q_Prop","Degree","Quantity","Individuals"}, <"Stage_of_progress"> {"Degree","Entity"}, <"Research"> {"Type","Question","Place","Topic","Manner","Field","Time","Means","Purpose","Researcher","Population"}, <"Institutions"> {"Members","Purpose","Domain","Place","Institution"}, <"Using"> {"Duration","Depictive","Purpose","Means","Role","Circumstances","Agent","Manner","Explanation","Outcome","Instrument","Time","Period_of_iterations","Containing_event","Degree","Place","Frequency","Group"}, <"Diversity"> {"Depictive","Group","Degree","Place","Dimension"}, <"Substance"> {"Source","Type","Use","Descriptor","Substance","Constituents"}, <"Aggregate"> {"Individuals","AggregateProperty","Aggregate","Name","Domain","Container_possessor"}, <"Causation"> {"Circumstances","Time","Actor","Place","Frequency","Means","Effect","Cause","Reason","Affected","Manner","Concessive","Explanation"}, <"Inclusion"> {"Purpose","Total","Contrast_set","Subregion","Frequency","Part"}, <"Manufacturing"> {"Purpose","Circumstances","Time","Manufacturer","Instrument","Place","Frequency","Resource","Means","Locus","Consumer","Depictive","Factory","Product","Manner"}, <"Research"> {"Type","Question","Place","Topic","Manner","Field","Time","Means","Purpose","Researcher","Population"}, <"Increment"> {"Initial_set","Class","Increment","Added_set"}, <"Scrutiny"> {"Instrument","Cognizer","Phenomenon","Degree","Manner","Ground","Time","Means","Medium","Purpose","Direction"};
set Spans := {"-1_-1","0_0","0_26","10_10","10_25","11_11","12_12","12_13","13_13","14_14","15_15","15_25","16_16","16_17","16_25","17_17","18_18","19_19","19_20","1_1","1_26","20_20","21_21","22_22","23_23","24_24","25_25","26_26","2_2","2_25","2_5","3_3","4_4","5_5","6_25","6_6","7_7","7_8","8_8","9_25","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Possession"]] binary;
var z1[Assignment["Quantity"]] binary;
var z2[Assignment["Stage_of_progress"]] binary;
var z3[Assignment["Research"]] binary;
var z4[Assignment["Institutions"]] binary;
var z5[Assignment["Using"]] binary;
var z6[Assignment["Diversity"]] binary;
var z7[Assignment["Substance"]] binary;
var z8[Assignment["Aggregate"]] binary;
var z9[Assignment["Causation"]] binary;
var z10[Assignment["Inclusion"]] binary;
var z11[Assignment["Manufacturing"]] binary;
var z12[Assignment["Research"]] binary;
var z13[Assignment["Increment"]] binary;
var z14[Assignment["Scrutiny"]] binary;
param probabilities0[Assignment["Possession"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Quantity"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Stage_of_progress"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Research"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Institutions"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Using"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Diversity"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Substance"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Aggregate"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Causation"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Inclusion"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;
param probabilities11[Assignment["Manufacturing"]] := read "../frameData/frame11.txt" as "<1s,2s> 3n" skip 2;
param probabilities12[Assignment["Research"]] := read "../frameData/frame12.txt" as "<1s,2s> 3n" skip 2;
param probabilities13[Assignment["Increment"]] := read "../frameData/frame13.txt" as "<1s,2s> 3n" skip 2;
param probabilities14[Assignment["Scrutiny"]] := read "../frameData/frame14.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Possession"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Quantity"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Stage_of_progress"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Research"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Institutions"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Using"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Diversity"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Substance"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Aggregate"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Causation"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Inclusion"] : probabilities10[r,s] * z10[r,s])+(sum <r,s> in Assignment["Manufacturing"] : probabilities11[r,s] * z11[r,s])+(sum <r,s> in Assignment["Research"] : probabilities12[r,s] * z12[r,s])+(sum <r,s> in Assignment["Increment"] : probabilities13[r,s] * z13[r,s])+(sum <r,s> in Assignment["Scrutiny"] : probabilities14[r,s] * z14[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 26};
set G[I] := <0> {"0_0","0_26"}, <1> {"0_26","1_1","1_26"}, <2> {"0_26","1_26","2_2","2_25","2_5"}, <3> {"0_26","1_26","2_25","2_5","3_3"}, <4> {"0_26","1_26","2_25","2_5","4_4"}, <5> {"0_26","1_26","2_25","2_5","5_5"}, <6> {"0_26","1_26","2_25","6_25","6_6"}, <7> {"0_26","1_26","2_25","6_25","7_7","7_8"}, <8> {"0_26","1_26","2_25","6_25","7_8","8_8"}, <9> {"0_26","1_26","2_25","6_25","9_25","9_9"}, <10> {"0_26","10_10","10_25","1_26","2_25","6_25","9_25"}, <11> {"0_26","10_25","11_11","1_26","2_25","6_25","9_25"}, <12> {"0_26","10_25","12_12","12_13","1_26","2_25","6_25","9_25"}, <13> {"0_26","10_25","12_13","13_13","1_26","2_25","6_25","9_25"}, <14> {"0_26","10_25","14_14","1_26","2_25","6_25","9_25"}, <15> {"0_26","10_25","15_15","15_25","1_26","2_25","6_25","9_25"}, <16> {"0_26","10_25","15_25","16_16","16_17","16_25","1_26","2_25","6_25","9_25"}, <17> {"0_26","10_25","15_25","16_17","16_25","17_17","1_26","2_25","6_25","9_25"}, <18> {"0_26","10_25","15_25","16_25","18_18","1_26","2_25","6_25","9_25"}, <19> {"0_26","10_25","15_25","16_25","19_19","19_20","1_26","2_25","6_25","9_25"}, <20> {"0_26","10_25","15_25","16_25","19_20","1_26","20_20","2_25","6_25","9_25"}, <21> {"0_26","10_25","15_25","16_25","1_26","21_21","2_25","6_25","9_25"}, <22> {"0_26","10_25","15_25","16_25","1_26","22_22","2_25","6_25","9_25"}, <23> {"0_26","10_25","15_25","16_25","1_26","23_23","2_25","6_25","9_25"}, <24> {"0_26","10_25","15_25","16_25","1_26","24_24","2_25","6_25","9_25"}, <25> {"0_26","10_25","15_25","16_25","1_26","25_25","2_25","6_25","9_25"}, <26> {"0_26","1_26","26_26"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Possession"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Quantity"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Stage_of_progress"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Research"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Institutions"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Using"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Diversity"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Substance"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Aggregate"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Causation"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Inclusion"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
subto overlap11: forall <i> in I do 
 sum <r> in Roles["Manufacturing"] do 
 sum <s> in G[i] do z11[r,s] <= 1;
subto overlap12: forall <i> in I do 
 sum <r> in Roles["Research"] do 
 sum <s> in G[i] do z12[r,s] <= 1;
subto overlap13: forall <i> in I do 
 sum <r> in Roles["Increment"] do 
 sum <s> in G[i] do z13[r,s] <= 1;
subto overlap14: forall <i> in I do 
 sum <r> in Roles["Scrutiny"] do 
 sum <s> in G[i] do z14[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Possession"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Quantity"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Stage_of_progress"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Research"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Institutions"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Using"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Diversity"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Substance"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Aggregate"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Causation"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Inclusion"] do sum <s> in Spans : z10[r,s] == 1;
subto unique11: forall <r> in Roles["Manufacturing"] do sum <s> in Spans : z11[r,s] == 1;
subto unique12: forall <r> in Roles["Research"] do sum <s> in Spans : z12[r,s] == 1;
subto unique13: forall <r> in Roles["Increment"] do sum <s> in Spans : z13[r,s] == 1;
subto unique14: forall <r> in Roles["Scrutiny"] do sum <s> in Spans : z14[r,s] == 1;
#pairwise exclusion constraint
set Exc1 := {<"Individuals","Mass">};
subto exclusion1: forall <ri,rj> in Exc1 do z1[ri,"-1_-1"] + z1[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
