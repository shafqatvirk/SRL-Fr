# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Medical_conditions","Hostile_encounter","Instance","Political_locales","Organization","Taking_sides","Political_locales","Aggregate","Intentionally_act","Hostile_encounter"};
set Roles[Frames] :=  <"Medical_conditions"> {"Place","Symptom","Body_Part","Degree","Patient","Name","Ailment","Cause"}, <"Hostile_encounter"> {"Purpose","Result","Depictive","Instrument","Place","Degree","Means","Internal_cause","Reason","Particular_iteration","Duration","Sides","Issue","Side_2","Side_1","Manner","Time"}, <"Instance"> {"Type","Instance","Instance_Prop"}, <"Political_locales"> {"Relative_location","Constituent_parts","Container_possessor","Descriptor","Name","Population","Locale"}, <"Organization"> {"Period_of_existence","Members","Place","Name","Container_possessor","Organization","Purpose","Descriptor"}, <"Taking_sides"> {"Time","Descriptor","Concessive","Place","Degree","Cognizer","Particular_iteration","Issue","Side","Manner","Action","Explanation"}, <"Political_locales"> {"Relative_location","Constituent_parts","Container_possessor","Descriptor","Name","Population","Locale"}, <"Aggregate"> {"Individuals","AggregateProperty","Aggregate","Name","Domain","Container_possessor"}, <"Intentionally_act"> {"Purpose","Result","Time","Place","Frequency","Means","Event_dscription","Period_of_iterations","Domain","Act","Particular_iteration","Manner","Explanation","Agent"}, <"Hostile_encounter"> {"Purpose","Result","Depictive","Instrument","Place","Degree","Means","Internal_cause","Reason","Particular_iteration","Duration","Sides","Issue","Side_2","Side_1","Manner","Time"};
set Spans := {"-1_-1","0_0","0_16","0_17","0_25","0_3","10_10","11_11","12_12","13_13","14_14","15_15","16_16","17_17","18_18","19_19","19_20","1_1","1_3","20_20","21_21","22_22","22_24","23_23","23_24","24_24","25_25","2_2","3_3","4_4","5_5","5_6","6_6","7_7","8_10","8_14","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Medical_conditions"]] binary;
var z1[Assignment["Hostile_encounter"]] binary;
var z2[Assignment["Instance"]] binary;
var z3[Assignment["Political_locales"]] binary;
var z4[Assignment["Organization"]] binary;
var z5[Assignment["Taking_sides"]] binary;
var z6[Assignment["Political_locales"]] binary;
var z7[Assignment["Aggregate"]] binary;
var z8[Assignment["Intentionally_act"]] binary;
var z9[Assignment["Hostile_encounter"]] binary;
param probabilities0[Assignment["Medical_conditions"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Hostile_encounter"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Instance"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Political_locales"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Organization"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Taking_sides"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Political_locales"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Aggregate"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Intentionally_act"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Hostile_encounter"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Medical_conditions"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Hostile_encounter"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Instance"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Political_locales"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Organization"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Taking_sides"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Political_locales"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Aggregate"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Intentionally_act"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Hostile_encounter"] : probabilities9[r,s] * z9[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 25};
set G[I] := <0> {"0_0","0_16","0_17","0_25","0_3"}, <1> {"0_16","0_17","0_25","0_3","1_1","1_3"}, <2> {"0_16","0_17","0_25","0_3","1_3","2_2"}, <3> {"0_16","0_17","0_25","0_3","1_3","3_3"}, <4> {"0_16","0_17","0_25","4_4"}, <5> {"0_16","0_17","0_25","5_5","5_6"}, <6> {"0_16","0_17","0_25","5_6","6_6"}, <7> {"0_16","0_17","0_25","7_7"}, <8> {"0_16","0_17","0_25","8_10","8_14","8_8"}, <9> {"0_16","0_17","0_25","8_10","8_14","9_9"}, <10> {"0_16","0_17","0_25","10_10","8_10","8_14"}, <11> {"0_16","0_17","0_25","11_11","8_14"}, <12> {"0_16","0_17","0_25","12_12","8_14"}, <13> {"0_16","0_17","0_25","13_13","8_14"}, <14> {"0_16","0_17","0_25","14_14","8_14"}, <15> {"0_16","0_17","0_25","15_15"}, <16> {"0_16","0_17","0_25","16_16"}, <17> {"0_17","0_25","17_17"}, <18> {"0_25","18_18"}, <19> {"0_25","19_19","19_20"}, <20> {"0_25","19_20","20_20"}, <21> {"0_25","21_21"}, <22> {"0_25","22_22","22_24"}, <23> {"0_25","22_24","23_23","23_24"}, <24> {"0_25","22_24","23_24","24_24"}, <25> {"0_25","25_25"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Medical_conditions"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Hostile_encounter"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Instance"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Political_locales"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Organization"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Taking_sides"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Political_locales"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Aggregate"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Intentionally_act"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Hostile_encounter"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Medical_conditions"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Hostile_encounter"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Instance"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Political_locales"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Organization"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Taking_sides"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Political_locales"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Aggregate"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Intentionally_act"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Hostile_encounter"] do sum <s> in Spans : z9[r,s] == 1;
#pairwise exclusion constraint
set Exc1 := {<"Side_1","Sides">,<"Side_2","Sides">};
subto exclusion1: forall <ri,rj> in Exc1 do z1[ri,"-1_-1"] + z1[rj,"-1_-1"] >= 1;
set Exc9 := {<"Side_1","Sides">,<"Side_2","Sides">};
subto exclusion9: forall <ri,rj> in Exc9 do z9[ri,"-1_-1"] + z9[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
set Reqr1 := {<"Side_1","Side_2">};
subto require1: forall <ri,rj> in Reqr1 do z1[ri,"-1_-1"] - z1[rj,"-1_-1"] == 0;
set Reqr9 := {<"Side_1","Side_2">};
subto require9: forall <ri,rj> in Reqr9 do z9[ri,"-1_-1"] - z9[rj,"-1_-1"] == 0;
