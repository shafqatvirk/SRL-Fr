# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Relational_quantity","Intentionally_affect","System","Preventing","Awareness","Assistance"};
set Roles[Frames] :=  <"Relational_quantity"> {"Mass","Denoted_quantity","Reference_quantity","Individuals"}, <"Intentionally_affect"> {"Patient","Agent"}, <"System"> {"Component_entities","Function","Possessor","Descriptor","Salient_entity","Complex"}, <"Preventing"> {"Degree","Place","Time","Event","Preventing_cause","Agent"}, <"Awareness"> {"Cognizer","Topic","Degree","Role","Manner","Evidence","Explanation","Time","Content","Expressor","Paradigm"}, <"Assistance"> {"Purpose","Time","Goal","Place","Frequency","Degree","Helper","Means","Benefited_party","Domain","Duration","Focal_entity","Manner","Explanation"};
set Spans := {"-1_-1","0_0","0_24","0_7","10_10","10_21","11_11","11_14","12_12","12_14","13_13","14_14","15_15","16_16","17_17","17_21","18_18","19_19","1_1","20_20","20_21","21_21","22_22","23_23","24_24","2_2","2_3","2_6","3_3","4_4","5_5","6_6","7_7","8_24","8_8","9_21","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Relational_quantity"]] binary;
var z1[Assignment["Intentionally_affect"]] binary;
var z2[Assignment["System"]] binary;
var z3[Assignment["Preventing"]] binary;
var z4[Assignment["Awareness"]] binary;
var z5[Assignment["Assistance"]] binary;
param probabilities0[Assignment["Relational_quantity"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Intentionally_affect"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["System"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Preventing"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Awareness"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Assistance"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Relational_quantity"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Intentionally_affect"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["System"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Preventing"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Awareness"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Assistance"] : probabilities5[r,s] * z5[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 24};
set G[I] := <0> {"0_0","0_24","0_7"}, <1> {"0_24","0_7","1_1"}, <2> {"0_24","0_7","2_2","2_3","2_6"}, <3> {"0_24","0_7","2_3","2_6","3_3"}, <4> {"0_24","0_7","2_6","4_4"}, <5> {"0_24","0_7","2_6","5_5"}, <6> {"0_24","0_7","2_6","6_6"}, <7> {"0_24","0_7","7_7"}, <8> {"0_24","8_24","8_8"}, <9> {"0_24","8_24","9_21","9_9"}, <10> {"0_24","10_10","10_21","8_24","9_21"}, <11> {"0_24","10_21","11_11","11_14","8_24","9_21"}, <12> {"0_24","10_21","11_14","12_12","12_14","8_24","9_21"}, <13> {"0_24","10_21","11_14","12_14","13_13","8_24","9_21"}, <14> {"0_24","10_21","11_14","12_14","14_14","8_24","9_21"}, <15> {"0_24","10_21","15_15","8_24","9_21"}, <16> {"0_24","10_21","16_16","8_24","9_21"}, <17> {"0_24","10_21","17_17","17_21","8_24","9_21"}, <18> {"0_24","10_21","17_21","18_18","8_24","9_21"}, <19> {"0_24","10_21","17_21","19_19","8_24","9_21"}, <20> {"0_24","10_21","17_21","20_20","20_21","8_24","9_21"}, <21> {"0_24","10_21","17_21","20_21","21_21","8_24","9_21"}, <22> {"0_24","22_22","8_24"}, <23> {"0_24","23_23","8_24"}, <24> {"0_24","24_24","8_24"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Relational_quantity"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Intentionally_affect"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["System"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Preventing"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Awareness"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Assistance"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Relational_quantity"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Intentionally_affect"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["System"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Preventing"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Awareness"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Assistance"] do sum <s> in Spans : z5[r,s] == 1;
#pairwise exclusion constraint
set Exc3 := {<"Agent","Preventing_cause">};
subto exclusion3: forall <ri,rj> in Exc3 do z3[ri,"-1_-1"] + z3[rj,"-1_-1"] >= 1;
set Exc4 := {<"Cognizer","Expressor">};
subto exclusion4: forall <ri,rj> in Exc4 do z4[ri,"-1_-1"] + z4[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
