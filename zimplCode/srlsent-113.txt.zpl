# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Locative_relation","Be_in_agreement_on_action","Locale_by_use","Increment","Temporal_collocation","Intentionally_act","Craft","Roadways"};
set Roles[Frames] :=  <"Locative_relation"> {"Time","Distance","Figure","Ground","Direction","Figures"}, <"Be_in_agreement_on_action"> {"Place","Party_2","Party_1","Topic","Manner","Parties","Time","Circumstances","Obligation","Duration","Descriptor"}, <"Locale_by_use"> {"Formational_cause","Use","Locale","Relative_location","Name","Container_possessor","Constituent_parts","Descriptor"}, <"Increment"> {"Initial_set","Class","Increment","Added_set"}, <"Temporal_collocation"> {"Event_description","Landmark_period","Trajector_entity","Landmark_entity","Landmark_event","Trajector_period","Trajector_event"}, <"Intentionally_act"> {"Purpose","Result","Time","Place","Frequency","Means","Event_dscription","Period_of_iterations","Domain","Act","Particular_iteration","Manner","Explanation","Agent"}, <"Craft"> {"Culture","Descriptor","Activity"}, <"Roadways"> {"Characteristic","Length","Use","Frequency_of_use","Goal","Relative_location","Endpoints","Direction","Source","Material","Path","Roadway","Name","Abundant_entities"};
set Spans := {"-1_-1","0_0","0_23","0_3","0_8","10_10","10_12","10_15","10_22","11_11","12_12","13_13","14_14","15_15","16_16","16_22","17_17","17_19","17_22","18_18","19_19","1_1","20_20","20_22","21_21","21_22","22_22","23_23","2_2","3_3","4_4","4_8","5_5","5_7","5_8","6_6","7_7","8_8","9_23","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Locative_relation"]] binary;
var z1[Assignment["Be_in_agreement_on_action"]] binary;
var z2[Assignment["Locale_by_use"]] binary;
var z3[Assignment["Increment"]] binary;
var z4[Assignment["Temporal_collocation"]] binary;
var z5[Assignment["Intentionally_act"]] binary;
var z6[Assignment["Craft"]] binary;
var z7[Assignment["Roadways"]] binary;
param probabilities0[Assignment["Locative_relation"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Be_in_agreement_on_action"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Locale_by_use"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Increment"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Temporal_collocation"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Intentionally_act"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Craft"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Roadways"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Locative_relation"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Be_in_agreement_on_action"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Locale_by_use"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Increment"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Temporal_collocation"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Intentionally_act"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Craft"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Roadways"] : probabilities7[r,s] * z7[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 23};
set G[I] := <0> {"0_0","0_23","0_3","0_8"}, <1> {"0_23","0_3","0_8","1_1"}, <2> {"0_23","0_3","0_8","2_2"}, <3> {"0_23","0_3","0_8","3_3"}, <4> {"0_23","0_8","4_4","4_8"}, <5> {"0_23","0_8","4_8","5_5","5_7","5_8"}, <6> {"0_23","0_8","4_8","5_7","5_8","6_6"}, <7> {"0_23","0_8","4_8","5_7","5_8","7_7"}, <8> {"0_23","0_8","4_8","5_8","8_8"}, <9> {"0_23","9_23","9_9"}, <10> {"0_23","10_10","10_12","10_15","10_22","9_23"}, <11> {"0_23","10_12","10_15","10_22","11_11","9_23"}, <12> {"0_23","10_12","10_15","10_22","12_12","9_23"}, <13> {"0_23","10_15","10_22","13_13","9_23"}, <14> {"0_23","10_15","10_22","14_14","9_23"}, <15> {"0_23","10_15","10_22","15_15","9_23"}, <16> {"0_23","10_22","16_16","16_22","9_23"}, <17> {"0_23","10_22","16_22","17_17","17_19","17_22","9_23"}, <18> {"0_23","10_22","16_22","17_19","17_22","18_18","9_23"}, <19> {"0_23","10_22","16_22","17_19","17_22","19_19","9_23"}, <20> {"0_23","10_22","16_22","17_22","20_20","20_22","9_23"}, <21> {"0_23","10_22","16_22","17_22","20_22","21_21","21_22","9_23"}, <22> {"0_23","10_22","16_22","17_22","20_22","21_22","22_22","9_23"}, <23> {"0_23","23_23","9_23"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Locative_relation"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Be_in_agreement_on_action"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Locale_by_use"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Increment"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Temporal_collocation"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Intentionally_act"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Craft"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Roadways"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Locative_relation"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Be_in_agreement_on_action"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Locale_by_use"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Increment"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Temporal_collocation"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Intentionally_act"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Craft"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Roadways"] do sum <s> in Spans : z7[r,s] == 1;
#pairwise exclusion constraint
set Exc0 := {<"Figure","Figures">,<"Figures","Ground">};
subto exclusion0: forall <ri,rj> in Exc0 do z0[ri,"-1_-1"] + z0[rj,"-1_-1"] >= 1;
set Exc1 := {<"Parties","Party_2">,<"Parties","Party_1">};
subto exclusion1: forall <ri,rj> in Exc1 do z1[ri,"-1_-1"] + z1[rj,"-1_-1"] >= 1;
set Exc4 := {<"Trajector_event","Trajector_period">,<"Landmark_entity","Landmark_event">,<"Landmark_event","Landmark_period">,<"Trajector_entity","Trajector_event">};
subto exclusion4: forall <ri,rj> in Exc4 do z4[ri,"-1_-1"] + z4[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
set Reqr1 := {<"Party_1","Party_2">};
subto require1: forall <ri,rj> in Reqr1 do z1[ri,"-1_-1"] - z1[rj,"-1_-1"] == 0;
