# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Ingredients","Stimulus_focus","Active_substance","Origin","Leadership","Arrest","People","Origin","People_by_jurisdiction","Control"};
set Roles[Frames] :=  <"Ingredients"> {"Source","Type","Use","Material","Product","Descriptor"}, <"Stimulus_focus"> {"Stimulus","Parameter","Circumstances","Property","Experiencer","Comparison_set","Degree"}, <"Active_substance"> {"Name","Type","Substance","Descriptor","Effect"}, <"Origin"> {"Entity","Origin"}, <"Leadership"> {"Domain","Leader","Type","Depictive","Descriptor","Degree","Means","Role","Activity","Duration","Governed","Manner","Time"}, <"Arrest"> {"Purpose","Type","Time","Authorities","Place","Suspect","Means","Coparticipant","Offense","Source_of_legal_authority","Charges","Manner"}, <"People"> {"Person","Ethnicity","Persistent_characteristic","Context_of_acquaintance","Descriptor","Age","Origin"}, <"Origin"> {"Entity","Origin"}, <"People_by_jurisdiction"> {"Person","Descriptor","Jurisdiction","Ethnicity"}, <"Control"> {"Manner","Time","Controlling_entity","Dependent_situation","Dependent_entity"};
set Spans := {"-1_-1","0_0","0_33","10_10","11_11","12_12","13_13","14_14","15_15","15_17","16_16","17_17","18_18","19_19","19_20","1_1","1_13","20_20","21_21","21_22","22_22","23_23","23_25","23_26","24_24","25_25","26_26","27_27","27_32","28_28","28_32","29_29","29_32","2_13","2_2","2_3","30_30","30_32","31_31","32_32","33_33","3_3","4_13","4_4","5_5","6_13","6_6","6_7","7_7","8_13","8_8","9_13","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Ingredients"]] binary;
var z1[Assignment["Stimulus_focus"]] binary;
var z2[Assignment["Active_substance"]] binary;
var z3[Assignment["Origin"]] binary;
var z4[Assignment["Leadership"]] binary;
var z5[Assignment["Arrest"]] binary;
var z6[Assignment["People"]] binary;
var z7[Assignment["Origin"]] binary;
var z8[Assignment["People_by_jurisdiction"]] binary;
var z9[Assignment["Control"]] binary;
param probabilities0[Assignment["Ingredients"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Stimulus_focus"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Active_substance"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Origin"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Leadership"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Arrest"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["People"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Origin"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["People_by_jurisdiction"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Control"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Ingredients"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Stimulus_focus"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Active_substance"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Origin"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Leadership"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Arrest"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["People"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Origin"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["People_by_jurisdiction"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Control"] : probabilities9[r,s] * z9[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 33};
set G[I] := <0> {"0_0","0_33"}, <1> {"0_33","1_1","1_13"}, <2> {"0_33","1_13","2_13","2_2","2_3"}, <3> {"0_33","1_13","2_13","2_3","3_3"}, <4> {"0_33","1_13","2_13","4_13","4_4"}, <5> {"0_33","1_13","2_13","4_13","5_5"}, <6> {"0_33","1_13","2_13","4_13","6_13","6_6","6_7"}, <7> {"0_33","1_13","2_13","4_13","6_13","6_7","7_7"}, <8> {"0_33","1_13","2_13","4_13","6_13","8_13","8_8"}, <9> {"0_33","1_13","2_13","4_13","6_13","8_13","9_13","9_9"}, <10> {"0_33","10_10","1_13","2_13","4_13","6_13","8_13","9_13"}, <11> {"0_33","11_11","1_13","2_13","4_13","6_13","8_13","9_13"}, <12> {"0_33","12_12","1_13","2_13","4_13","6_13","8_13","9_13"}, <13> {"0_33","13_13","1_13","2_13","4_13","6_13","8_13","9_13"}, <14> {"0_33","14_14"}, <15> {"0_33","15_15","15_17"}, <16> {"0_33","15_17","16_16"}, <17> {"0_33","15_17","17_17"}, <18> {"0_33","18_18"}, <19> {"0_33","19_19","19_20"}, <20> {"0_33","19_20","20_20"}, <21> {"0_33","21_21","21_22"}, <22> {"0_33","21_22","22_22"}, <23> {"0_33","23_23","23_25","23_26"}, <24> {"0_33","23_25","23_26","24_24"}, <25> {"0_33","23_25","23_26","25_25"}, <26> {"0_33","23_26","26_26"}, <27> {"0_33","27_27","27_32"}, <28> {"0_33","27_32","28_28","28_32"}, <29> {"0_33","27_32","28_32","29_29","29_32"}, <30> {"0_33","27_32","28_32","29_32","30_30","30_32"}, <31> {"0_33","27_32","28_32","29_32","30_32","31_31"}, <32> {"0_33","27_32","28_32","29_32","30_32","32_32"}, <33> {"0_33","33_33"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Ingredients"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Stimulus_focus"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Active_substance"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Origin"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Leadership"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Arrest"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["People"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Origin"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["People_by_jurisdiction"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Control"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Ingredients"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Stimulus_focus"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Active_substance"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Origin"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Leadership"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Arrest"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["People"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Origin"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["People_by_jurisdiction"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Control"] do sum <s> in Spans : z9[r,s] == 1;
#pairwise exclusion constraint
#pairwise requirement constraint
