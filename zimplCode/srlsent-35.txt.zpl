# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Temporal_subregion","People_by_origin","Leadership","Placing","Besieging","Cardinal_numbers","Time_vector","Attack","Prevent_from_having","Cause_change_of_strength","Defend"};
set Roles[Frames] :=  <"Temporal_subregion"> {"Time_period","Time","Degree","Sub_part"}, <"People_by_origin"> {"Person","Ethnicity","Persistent_characteristic","Context_of_acquaintance","Descriptor","Age","Origin"}, <"Leadership"> {"Domain","Leader","Type","Depictive","Descriptor","Degree","Means","Role","Activity","Duration","Governed","Manner","Time"}, <"Placing"> {"Speed","Duration","Area","Theme","Means","Depictive","Agent","Manner","Result","Distance","Cause","Time","Source","Beneficiary","Degree","Place","Goal","Reason","Purpose","Path"}, <"Besieging"> {"Time","Assailant","Weapon","Victim","Place","Duration"}, <"Cardinal_numbers"> {"Precision","Number","Multiplier","Entity"}, <"Time_vector"> {"Distance","Event","Landmark_event","Direction"}, <"Attack"> {"Particular_iteration","Iteration","Event_description","Means","Depictive","Circumstances","Manner","Result","Explanation","Time","Source","Containing_event","Place","Re_encoding","Weapon","Purpose","Victim","Path","Assailant"}, <"Prevent_from_having"> {"Place","Duration","Agent","Containing_event","Preventing_cause","Explanation","State_of_affairs","Time","Protagonist","Frequency"}, <"Cause_change_of_strength"> {"Place","Agent","Containing_event","Degree","Patient","Manner","Time","Circumstances","Means","Frequency","Cause"}, <"Defend"> {"Defender","Place","Instrument","Manner","Victim","Assailant","Means","Purpose","Depictive","Reason"};
set Spans := {"-1_-1","0_0","0_2","0_23","10_10","10_11","11_11","12_12","12_14","13_13","13_14","14_14","15_15","16_16","16_17","16_22","17_17","17_22","18_18","18_22","19_19","19_21","1_1","1_2","20_20","21_21","22_22","23_23","2_2","3_3","4_4","4_7","5_5","6_6","7_7","8_8","9_14","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Temporal_subregion"]] binary;
var z1[Assignment["People_by_origin"]] binary;
var z2[Assignment["Leadership"]] binary;
var z3[Assignment["Placing"]] binary;
var z4[Assignment["Besieging"]] binary;
var z5[Assignment["Cardinal_numbers"]] binary;
var z6[Assignment["Time_vector"]] binary;
var z7[Assignment["Attack"]] binary;
var z8[Assignment["Prevent_from_having"]] binary;
var z9[Assignment["Cause_change_of_strength"]] binary;
var z10[Assignment["Defend"]] binary;
param probabilities0[Assignment["Temporal_subregion"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["People_by_origin"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Leadership"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Placing"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Besieging"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Cardinal_numbers"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Time_vector"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Attack"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Prevent_from_having"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Cause_change_of_strength"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Defend"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Temporal_subregion"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["People_by_origin"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Leadership"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Placing"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Besieging"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Cardinal_numbers"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Time_vector"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Attack"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Prevent_from_having"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Cause_change_of_strength"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Defend"] : probabilities10[r,s] * z10[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 23};
set G[I] := <0> {"0_0","0_2","0_23"}, <1> {"0_2","0_23","1_1","1_2"}, <2> {"0_2","0_23","1_2","2_2"}, <3> {"0_23","3_3"}, <4> {"0_23","4_4","4_7"}, <5> {"0_23","4_7","5_5"}, <6> {"0_23","4_7","6_6"}, <7> {"0_23","4_7","7_7"}, <8> {"0_23","8_8"}, <9> {"0_23","9_14","9_9"}, <10> {"0_23","10_10","10_11","9_14"}, <11> {"0_23","10_11","11_11","9_14"}, <12> {"0_23","12_12","12_14","9_14"}, <13> {"0_23","12_14","13_13","13_14","9_14"}, <14> {"0_23","12_14","13_14","14_14","9_14"}, <15> {"0_23","15_15"}, <16> {"0_23","16_16","16_17","16_22"}, <17> {"0_23","16_17","16_22","17_17","17_22"}, <18> {"0_23","16_22","17_22","18_18","18_22"}, <19> {"0_23","16_22","17_22","18_22","19_19","19_21"}, <20> {"0_23","16_22","17_22","18_22","19_21","20_20"}, <21> {"0_23","16_22","17_22","18_22","19_21","21_21"}, <22> {"0_23","16_22","17_22","18_22","22_22"}, <23> {"0_23","23_23"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Temporal_subregion"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["People_by_origin"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Leadership"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Placing"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Besieging"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Cardinal_numbers"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Time_vector"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Attack"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Prevent_from_having"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Cause_change_of_strength"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Defend"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Temporal_subregion"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["People_by_origin"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Leadership"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Placing"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Besieging"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Cardinal_numbers"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Time_vector"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Attack"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Prevent_from_having"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Cause_change_of_strength"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Defend"] do sum <s> in Spans : z10[r,s] == 1;
#pairwise exclusion constraint
set Exc3 := {<"Agent","Cause">};
subto exclusion3: forall <ri,rj> in Exc3 do z3[ri,"-1_-1"] + z3[rj,"-1_-1"] >= 1;
set Exc8 := {<"Agent","Preventing_cause">};
subto exclusion8: forall <ri,rj> in Exc8 do z8[ri,"-1_-1"] + z8[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
