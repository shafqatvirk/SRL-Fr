# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Evidence","Cardinal_numbers","Measure_duration","Statement"};
set Roles[Frames] :=  <"Evidence"> {"Domain_of_Relevance","Support","Manner","Depictive","Proposition","Degree","Cognizer"}, <"Cardinal_numbers"> {"Precision","Number","Multiplier","Entity"}, <"Measure_duration"> {"Agent","Count","Unit","Process"}, <"Statement"> {"Message","Medium","Place","Iteration","Means","Depictive","Manner","Epistemic_stance","Speaker","Event_description","Addressee","Time","Containing_event","Degree","Occasion","Group","Frequency","Particular_iteration","Internal_cause","Topic"};
set Spans := {"-1_-1","0_0","0_11","10_10","11_11","1_1","1_11","2_10","2_2","3_10","3_3","3_5","3_7","4_4","4_5","5_5","6_6","7_7","8_10","8_8","9_10","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Evidence"]] binary;
var z1[Assignment["Cardinal_numbers"]] binary;
var z2[Assignment["Measure_duration"]] binary;
var z3[Assignment["Statement"]] binary;
param probabilities0[Assignment["Evidence"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Cardinal_numbers"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Measure_duration"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Statement"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Evidence"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Cardinal_numbers"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Measure_duration"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Statement"] : probabilities3[r,s] * z3[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 11};
set G[I] := <0> {"0_0","0_11"}, <1> {"0_11","1_1","1_11"}, <2> {"0_11","1_11","2_10","2_2"}, <3> {"0_11","1_11","2_10","3_10","3_3","3_5","3_7"}, <4> {"0_11","1_11","2_10","3_10","3_5","3_7","4_4","4_5"}, <5> {"0_11","1_11","2_10","3_10","3_5","3_7","4_5","5_5"}, <6> {"0_11","1_11","2_10","3_10","3_7","6_6"}, <7> {"0_11","1_11","2_10","3_10","3_7","7_7"}, <8> {"0_11","1_11","2_10","3_10","8_10","8_8"}, <9> {"0_11","1_11","2_10","3_10","8_10","9_10","9_9"}, <10> {"0_11","10_10","1_11","2_10","3_10","8_10","9_10"}, <11> {"0_11","11_11","1_11"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Evidence"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Cardinal_numbers"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Measure_duration"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Statement"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Evidence"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Cardinal_numbers"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Measure_duration"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Statement"] do sum <s> in Spans : z3[r,s] == 1;
#pairwise exclusion constraint
#pairwise requirement constraint
