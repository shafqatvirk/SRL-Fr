# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Identicality","Measure_duration","Intentionally_act","Possession","Degree","Stage_of_progress","Artifact","Infrastructure","Inclusion","First_rank","Research","Locale_by_use","Education_teaching","Employing"};
set Roles[Frames] :=  <"Identicality"> {"Type","Current_instance","Time","Previous_instance","Previous_context"}, <"Measure_duration"> {"Agent","Count","Unit","Process"}, <"Intentionally_act"> {"Purpose","Result","Time","Place","Frequency","Means","Event_dscription","Period_of_iterations","Domain","Act","Particular_iteration","Manner","Explanation","Agent"}, <"Possession"> {"Explanation","Time","Owner","Possession","Duration","Manner","Depictive"}, <"Degree"> {"Gradable_attribute"}, <"Stage_of_progress"> {"Degree","Entity"}, <"Artifact"> {"Creator","Type","Use","Material","Time_of_creation","Name","Artifact"}, <"Infrastructure"> {"Possessor","User","Descriptor","Place","Resource","Infrastructure","Activity"}, <"Inclusion"> {"Purpose","Total","Contrast_set","Subregion","Frequency","Part"}, <"First_rank"> {"Limits_of_consideration","Item","Contrast_set"}, <"Research"> {"Type","Question","Place","Topic","Manner","Field","Time","Means","Purpose","Researcher","Population"}, <"Locale_by_use"> {"Formational_cause","Use","Locale","Relative_location","Name","Container_possessor","Constituent_parts","Descriptor"}, <"Education_teaching"> {"Duration","Depictive","Purpose","Means","Role","Institution","Level","Manner","Result","Subject","Teacher","Course","Time","Material","Degree","Place","Skill","Qualification","Student","Fact","Precept"}, <"Employing"> {"Purpose","Time","Descriptor","Place","Field","Task","Employer","Compensation","Position","Manner","Contract_basis","Employee"};
set Spans := {"-1_-1","0_0","0_21","0_3","10_10","11_11","12_12","13_13","13_20","14_14","14_20","15_15","15_17","15_20","16_16","17_17","18_18","19_19","1_1","1_3","20_20","21_21","2_2","3_3","4_4","5_5","6_6","7_20","7_7","8_12","8_20","8_8","9_10","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Identicality"]] binary;
var z1[Assignment["Measure_duration"]] binary;
var z2[Assignment["Intentionally_act"]] binary;
var z3[Assignment["Possession"]] binary;
var z4[Assignment["Degree"]] binary;
var z5[Assignment["Stage_of_progress"]] binary;
var z6[Assignment["Artifact"]] binary;
var z7[Assignment["Infrastructure"]] binary;
var z8[Assignment["Inclusion"]] binary;
var z9[Assignment["First_rank"]] binary;
var z10[Assignment["Research"]] binary;
var z11[Assignment["Locale_by_use"]] binary;
var z12[Assignment["Education_teaching"]] binary;
var z13[Assignment["Employing"]] binary;
param probabilities0[Assignment["Identicality"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Measure_duration"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Intentionally_act"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Possession"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Degree"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Stage_of_progress"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Artifact"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Infrastructure"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Inclusion"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["First_rank"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Research"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;
param probabilities11[Assignment["Locale_by_use"]] := read "../frameData/frame11.txt" as "<1s,2s> 3n" skip 2;
param probabilities12[Assignment["Education_teaching"]] := read "../frameData/frame12.txt" as "<1s,2s> 3n" skip 2;
param probabilities13[Assignment["Employing"]] := read "../frameData/frame13.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Identicality"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Measure_duration"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Intentionally_act"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Possession"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Degree"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Stage_of_progress"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Artifact"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Infrastructure"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Inclusion"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["First_rank"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Research"] : probabilities10[r,s] * z10[r,s])+(sum <r,s> in Assignment["Locale_by_use"] : probabilities11[r,s] * z11[r,s])+(sum <r,s> in Assignment["Education_teaching"] : probabilities12[r,s] * z12[r,s])+(sum <r,s> in Assignment["Employing"] : probabilities13[r,s] * z13[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 21};
set G[I] := <0> {"0_0","0_21","0_3"}, <1> {"0_21","0_3","1_1","1_3"}, <2> {"0_21","0_3","1_3","2_2"}, <3> {"0_21","0_3","1_3","3_3"}, <4> {"0_21","4_4"}, <5> {"0_21","5_5"}, <6> {"0_21","6_6"}, <7> {"0_21","7_20","7_7"}, <8> {"0_21","7_20","8_12","8_20","8_8"}, <9> {"0_21","7_20","8_12","8_20","9_10","9_9"}, <10> {"0_21","10_10","7_20","8_12","8_20","9_10"}, <11> {"0_21","11_11","7_20","8_12","8_20"}, <12> {"0_21","12_12","7_20","8_12","8_20"}, <13> {"0_21","13_13","13_20","7_20","8_20"}, <14> {"0_21","13_20","14_14","14_20","7_20","8_20"}, <15> {"0_21","13_20","14_20","15_15","15_17","15_20","7_20","8_20"}, <16> {"0_21","13_20","14_20","15_17","15_20","16_16","7_20","8_20"}, <17> {"0_21","13_20","14_20","15_17","15_20","17_17","7_20","8_20"}, <18> {"0_21","13_20","14_20","15_20","18_18","7_20","8_20"}, <19> {"0_21","13_20","14_20","15_20","19_19","7_20","8_20"}, <20> {"0_21","13_20","14_20","15_20","20_20","7_20","8_20"}, <21> {"0_21","21_21"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Identicality"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Measure_duration"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Intentionally_act"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Possession"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Degree"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Stage_of_progress"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Artifact"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Infrastructure"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Inclusion"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["First_rank"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Research"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
subto overlap11: forall <i> in I do 
 sum <r> in Roles["Locale_by_use"] do 
 sum <s> in G[i] do z11[r,s] <= 1;
subto overlap12: forall <i> in I do 
 sum <r> in Roles["Education_teaching"] do 
 sum <s> in G[i] do z12[r,s] <= 1;
subto overlap13: forall <i> in I do 
 sum <r> in Roles["Employing"] do 
 sum <s> in G[i] do z13[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Identicality"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Measure_duration"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Intentionally_act"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Possession"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Degree"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Stage_of_progress"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Artifact"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Infrastructure"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Inclusion"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["First_rank"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Research"] do sum <s> in Spans : z10[r,s] == 1;
subto unique11: forall <r> in Roles["Locale_by_use"] do sum <s> in Spans : z11[r,s] == 1;
subto unique12: forall <r> in Roles["Education_teaching"] do sum <s> in Spans : z12[r,s] == 1;
subto unique13: forall <r> in Roles["Employing"] do sum <s> in Spans : z13[r,s] == 1;
#pairwise exclusion constraint
set Exc12 := {<"Precept","Subject">,<"Precept","Skill">,<"Skill","Subject">,<"Fact","Precept">,<"Fact","Qualification">};
subto exclusion12: forall <ri,rj> in Exc12 do z12[ri,"-1_-1"] + z12[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
