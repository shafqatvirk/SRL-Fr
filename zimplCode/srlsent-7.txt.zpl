# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Have_as_requirement","Relational_quantity","Timespan","Difficulty","Working_on","Assistance","Capability","Working_on","Locative_relation","Commerce_pay","Project","Building_subparts","Locating","Buildings","Intentionally_act","Increment","Being_employed","Scrutiny"};
set Roles[Frames] :=  <"Have_as_requirement"> {"Requirement","Degree","Dependent","Explanation","Required_entity"}, <"Relational_quantity"> {"Mass","Denoted_quantity","Reference_quantity","Individuals"}, <"Timespan"> {"Whole","State","Descriptor","Duration"}, <"Difficulty"> {"Time","Standard","Parameter","Circumstances","Experiencer","Degree","Activity"}, <"Working_on"> {"Purpose","Descriptor","Event_description","Time","Goal","Salient_entity","Place","Frequency","Degree","Means","Domain","Depictive","Duration","Particular_iteration","Manner","Agent"}, <"Assistance"> {"Purpose","Time","Goal","Place","Frequency","Degree","Helper","Means","Benefited_party","Domain","Duration","Focal_entity","Manner","Explanation"}, <"Capability"> {"Degree","Status","Entity","Relevant_feature","Circumstances","Role","Event","Cause"}, <"Working_on"> {"Purpose","Descriptor","Event_description","Time","Goal","Salient_entity","Place","Frequency","Degree","Means","Domain","Depictive","Duration","Particular_iteration","Manner","Agent"}, <"Locative_relation"> {"Time","Distance","Figure","Ground","Direction","Figures"}, <"Commerce_pay"> {"Purpose","Circumstances","Time","Goods","Frequency","Seller","Rate","Reason","Manner","Buyer","Means","Money"}, <"Project"> {"Salient_entity","Duration","Agent","Goal","Manner","Name","Project","Field","Descriptor","Activity"}, <"Building_subparts"> {"Whole","Type","Building_part","Use"}, <"Locating"> {"Location","Perceiver","Ground","Sought_entity"}, <"Buildings"> {"Type","Place","Function","Time_of_creation","Relative_location","Name","Building","Descriptor","Material","Builder"}, <"Intentionally_act"> {"Purpose","Result","Time","Place","Frequency","Means","Event_dscription","Period_of_iterations","Domain","Act","Particular_iteration","Manner","Explanation","Agent"}, <"Increment"> {"Initial_set","Class","Increment","Added_set"}, <"Being_employed"> {"Type","Rank","Time","Place","Field","Employer","Place_of_employment","Amount_of_work","Compensation","Event_description","Duration","Frequency","Task","Employee","Contract_basis","Manner","Position"}, <"Scrutiny"> {"Instrument","Cognizer","Phenomenon","Degree","Manner","Ground","Time","Means","Medium","Purpose","Direction"};
set Spans := {"-1_-1","0_0","0_1","0_39","0_6","10_10","10_11","10_13","11_11","12_12","12_13","13_13","14_14","15_15","16_16","17_17","17_29","18_18","18_29","19_19","19_29","1_1","1_6","20_20","21_21","21_29","22_22","23_23","24_24","24_28","25_25","25_27","25_28","26_26","27_27","28_28","29_29","2_2","2_3","2_6","30_30","30_38","31_31","32_32","33_33","33_38","34_34","34_38","35_35","36_36","37_37","38_38","39_39","3_3","4_4","5_5","6_6","7_7","8_8","9_13","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Have_as_requirement"]] binary;
var z1[Assignment["Relational_quantity"]] binary;
var z2[Assignment["Timespan"]] binary;
var z3[Assignment["Difficulty"]] binary;
var z4[Assignment["Working_on"]] binary;
var z5[Assignment["Assistance"]] binary;
var z6[Assignment["Capability"]] binary;
var z7[Assignment["Working_on"]] binary;
var z8[Assignment["Locative_relation"]] binary;
var z9[Assignment["Commerce_pay"]] binary;
var z10[Assignment["Project"]] binary;
var z11[Assignment["Building_subparts"]] binary;
var z12[Assignment["Locating"]] binary;
var z13[Assignment["Buildings"]] binary;
var z14[Assignment["Intentionally_act"]] binary;
var z15[Assignment["Increment"]] binary;
var z16[Assignment["Being_employed"]] binary;
var z17[Assignment["Scrutiny"]] binary;
param probabilities0[Assignment["Have_as_requirement"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Relational_quantity"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Timespan"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Difficulty"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Working_on"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Assistance"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Capability"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Working_on"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Locative_relation"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Commerce_pay"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Project"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;
param probabilities11[Assignment["Building_subparts"]] := read "../frameData/frame11.txt" as "<1s,2s> 3n" skip 2;
param probabilities12[Assignment["Locating"]] := read "../frameData/frame12.txt" as "<1s,2s> 3n" skip 2;
param probabilities13[Assignment["Buildings"]] := read "../frameData/frame13.txt" as "<1s,2s> 3n" skip 2;
param probabilities14[Assignment["Intentionally_act"]] := read "../frameData/frame14.txt" as "<1s,2s> 3n" skip 2;
param probabilities15[Assignment["Increment"]] := read "../frameData/frame15.txt" as "<1s,2s> 3n" skip 2;
param probabilities16[Assignment["Being_employed"]] := read "../frameData/frame16.txt" as "<1s,2s> 3n" skip 2;
param probabilities17[Assignment["Scrutiny"]] := read "../frameData/frame17.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Have_as_requirement"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Relational_quantity"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Timespan"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Difficulty"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Working_on"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Assistance"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Capability"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Working_on"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Locative_relation"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Commerce_pay"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Project"] : probabilities10[r,s] * z10[r,s])+(sum <r,s> in Assignment["Building_subparts"] : probabilities11[r,s] * z11[r,s])+(sum <r,s> in Assignment["Locating"] : probabilities12[r,s] * z12[r,s])+(sum <r,s> in Assignment["Buildings"] : probabilities13[r,s] * z13[r,s])+(sum <r,s> in Assignment["Intentionally_act"] : probabilities14[r,s] * z14[r,s])+(sum <r,s> in Assignment["Increment"] : probabilities15[r,s] * z15[r,s])+(sum <r,s> in Assignment["Being_employed"] : probabilities16[r,s] * z16[r,s])+(sum <r,s> in Assignment["Scrutiny"] : probabilities17[r,s] * z17[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 39};
set G[I] := <0> {"0_0","0_1","0_39","0_6"}, <1> {"0_1","0_39","0_6","1_1","1_6"}, <2> {"0_39","0_6","1_6","2_2","2_3","2_6"}, <3> {"0_39","0_6","1_6","2_3","2_6","3_3"}, <4> {"0_39","0_6","1_6","2_6","4_4"}, <5> {"0_39","0_6","1_6","2_6","5_5"}, <6> {"0_39","0_6","1_6","2_6","6_6"}, <7> {"0_39","7_7"}, <8> {"0_39","8_8"}, <9> {"0_39","9_13","9_9"}, <10> {"0_39","10_10","10_11","10_13","9_13"}, <11> {"0_39","10_11","10_13","11_11","9_13"}, <12> {"0_39","10_13","12_12","12_13","9_13"}, <13> {"0_39","10_13","12_13","13_13","9_13"}, <14> {"0_39","14_14"}, <15> {"0_39","15_15"}, <16> {"0_39","16_16"}, <17> {"0_39","17_17","17_29"}, <18> {"0_39","17_29","18_18","18_29"}, <19> {"0_39","17_29","18_29","19_19","19_29"}, <20> {"0_39","17_29","18_29","19_29","20_20"}, <21> {"0_39","17_29","18_29","19_29","21_21","21_29"}, <22> {"0_39","17_29","18_29","19_29","21_29","22_22"}, <23> {"0_39","17_29","18_29","19_29","21_29","23_23"}, <24> {"0_39","17_29","18_29","19_29","21_29","24_24","24_28"}, <25> {"0_39","17_29","18_29","19_29","21_29","24_28","25_25","25_27","25_28"}, <26> {"0_39","17_29","18_29","19_29","21_29","24_28","25_27","25_28","26_26"}, <27> {"0_39","17_29","18_29","19_29","21_29","24_28","25_27","25_28","27_27"}, <28> {"0_39","17_29","18_29","19_29","21_29","24_28","25_28","28_28"}, <29> {"0_39","17_29","18_29","19_29","21_29","29_29"}, <30> {"0_39","30_30","30_38"}, <31> {"0_39","30_38","31_31"}, <32> {"0_39","30_38","32_32"}, <33> {"0_39","30_38","33_33","33_38"}, <34> {"0_39","30_38","33_38","34_34","34_38"}, <35> {"0_39","30_38","33_38","34_38","35_35"}, <36> {"0_39","30_38","33_38","34_38","36_36"}, <37> {"0_39","30_38","33_38","34_38","37_37"}, <38> {"0_39","30_38","33_38","34_38","38_38"}, <39> {"0_39","39_39"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Have_as_requirement"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Relational_quantity"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Timespan"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Difficulty"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Working_on"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Assistance"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Capability"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Working_on"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Locative_relation"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Commerce_pay"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Project"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
subto overlap11: forall <i> in I do 
 sum <r> in Roles["Building_subparts"] do 
 sum <s> in G[i] do z11[r,s] <= 1;
subto overlap12: forall <i> in I do 
 sum <r> in Roles["Locating"] do 
 sum <s> in G[i] do z12[r,s] <= 1;
subto overlap13: forall <i> in I do 
 sum <r> in Roles["Buildings"] do 
 sum <s> in G[i] do z13[r,s] <= 1;
subto overlap14: forall <i> in I do 
 sum <r> in Roles["Intentionally_act"] do 
 sum <s> in G[i] do z14[r,s] <= 1;
subto overlap15: forall <i> in I do 
 sum <r> in Roles["Increment"] do 
 sum <s> in G[i] do z15[r,s] <= 1;
subto overlap16: forall <i> in I do 
 sum <r> in Roles["Being_employed"] do 
 sum <s> in G[i] do z16[r,s] <= 1;
subto overlap17: forall <i> in I do 
 sum <r> in Roles["Scrutiny"] do 
 sum <s> in G[i] do z17[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Have_as_requirement"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Relational_quantity"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Timespan"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Difficulty"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Working_on"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Assistance"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Capability"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Working_on"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Locative_relation"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Commerce_pay"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Project"] do sum <s> in Spans : z10[r,s] == 1;
subto unique11: forall <r> in Roles["Building_subparts"] do sum <s> in Spans : z11[r,s] == 1;
subto unique12: forall <r> in Roles["Locating"] do sum <s> in Spans : z12[r,s] == 1;
subto unique13: forall <r> in Roles["Buildings"] do sum <s> in Spans : z13[r,s] == 1;
subto unique14: forall <r> in Roles["Intentionally_act"] do sum <s> in Spans : z14[r,s] == 1;
subto unique15: forall <r> in Roles["Increment"] do sum <s> in Spans : z15[r,s] == 1;
subto unique16: forall <r> in Roles["Being_employed"] do sum <s> in Spans : z16[r,s] == 1;
subto unique17: forall <r> in Roles["Scrutiny"] do sum <s> in Spans : z17[r,s] == 1;
#pairwise exclusion constraint
set Exc0 := {<"Required_entity","Requirement">};
subto exclusion0: forall <ri,rj> in Exc0 do z0[ri,"-1_-1"] + z0[rj,"-1_-1"] >= 1;
set Exc4 := {<"Goal","Salient_entity">};
subto exclusion4: forall <ri,rj> in Exc4 do z4[ri,"-1_-1"] + z4[rj,"-1_-1"] >= 1;
set Exc7 := {<"Goal","Salient_entity">};
subto exclusion7: forall <ri,rj> in Exc7 do z7[ri,"-1_-1"] + z7[rj,"-1_-1"] >= 1;
set Exc8 := {<"Figure","Figures">,<"Figures","Ground">};
subto exclusion8: forall <ri,rj> in Exc8 do z8[ri,"-1_-1"] + z8[rj,"-1_-1"] >= 1;
set Exc10 := {<"Activity","Salient_entity">};
subto exclusion10: forall <ri,rj> in Exc10 do z10[ri,"-1_-1"] + z10[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
