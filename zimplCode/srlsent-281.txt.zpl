# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Artifact","Transfer","Age","Origin","Weapon","Weapon","Change_position_on_a_scale"};
set Roles[Frames] :=  <"Artifact"> {"Creator","Type","Use","Material","Time_of_creation","Name","Artifact"}, <"Transfer"> {"Place","Theme","Manner","Donor","Time","Transferors","Reason","Means","Recipient","Purpose"}, <"Age"> {"Attribute","Degree","Entity","Time","Expressor","Duration","Age","Descriptor"}, <"Origin"> {"Entity","Origin"}, <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Change_position_on_a_scale"> {"Speed","Duration","Item","Value_range","Attribute","Correlate","Initial_value","Circumstances","Difference","Manner","Result","Final_state","Time","Period_of_iterations","Degree","Group","Final_correlate","Initial_correlate","Initial_state","Particular_iteration","Path","Final_value","Place"};
set Spans := {"-1_-1","0_0","0_9","1_1","1_9","2_2","2_8","3_3","3_5","3_8","4_4","5_5","6_6","7_7","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Artifact"]] binary;
var z1[Assignment["Transfer"]] binary;
var z2[Assignment["Age"]] binary;
var z3[Assignment["Origin"]] binary;
var z4[Assignment["Weapon"]] binary;
var z5[Assignment["Weapon"]] binary;
var z6[Assignment["Change_position_on_a_scale"]] binary;
param probabilities0[Assignment["Artifact"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Transfer"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Age"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Origin"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Weapon"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Weapon"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Change_position_on_a_scale"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Artifact"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Transfer"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Age"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Origin"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Weapon"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Weapon"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Change_position_on_a_scale"] : probabilities6[r,s] * z6[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 9};
set G[I] := <0> {"0_0","0_9"}, <1> {"0_9","1_1","1_9"}, <2> {"0_9","1_9","2_2","2_8"}, <3> {"0_9","1_9","2_8","3_3","3_5","3_8"}, <4> {"0_9","1_9","2_8","3_5","3_8","4_4"}, <5> {"0_9","1_9","2_8","3_5","3_8","5_5"}, <6> {"0_9","1_9","2_8","3_8","6_6"}, <7> {"0_9","1_9","2_8","3_8","7_7"}, <8> {"0_9","1_9","2_8","3_8","8_8"}, <9> {"0_9","1_9","9_9"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Artifact"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Transfer"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Age"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Origin"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Change_position_on_a_scale"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Artifact"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Transfer"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Age"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Origin"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Weapon"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Weapon"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Change_position_on_a_scale"] do sum <s> in Spans : z6[r,s] == 1;
#pairwise exclusion constraint
set Exc1 := {<"Donor","Transferors">,<"Recipient","Transferors">};
subto exclusion1: forall <ri,rj> in Exc1 do z1[ri,"-1_-1"] + z1[rj,"-1_-1"] >= 1;
set Exc2 := {<"Entity","Expressor">,<"Age","Degree">};
subto exclusion2: forall <ri,rj> in Exc2 do z2[ri,"-1_-1"] + z2[rj,"-1_-1"] >= 1;
set Exc6 := {<"Initial_state","Value_range">,<"Final_value","Value_range">,<"Initial_value","Value_range">,<"Final_state","Value_range">};
subto exclusion6: forall <ri,rj> in Exc6 do z6[ri,"-1_-1"] + z6[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
