# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Concessive","Required_event","Part_inner_outer","Part_whole"};
set Roles[Frames] :=  <"Concessive"> {"Main_statement","Statement"}, <"Required_event"> {"Explanation","Time","Purpose","Circumstances","Negative_consequences","Required_situation"}, <"Part_inner_outer"> {"Part_Prop","Part","Whole"}, <"Part_whole"> {"Part","Whole","Part_Prop","Orientation"};
set Spans := {"-1_-1","0_0","0_14","10_10","11_11","11_13","12_12","12_13","13_13","14_14","1_1","2_2","3_3","4_4","5_13","5_5","6_6","7_13","7_7","8_10","8_13","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Concessive"]] binary;
var z1[Assignment["Required_event"]] binary;
var z2[Assignment["Part_inner_outer"]] binary;
var z3[Assignment["Part_whole"]] binary;
param probabilities0[Assignment["Concessive"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Required_event"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Part_inner_outer"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Part_whole"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Concessive"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Required_event"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Part_inner_outer"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Part_whole"] : probabilities3[r,s] * z3[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 14};
set G[I] := <0> {"0_0","0_14"}, <1> {"0_14","1_1"}, <2> {"0_14","2_2"}, <3> {"0_14","3_3"}, <4> {"0_14","4_4"}, <5> {"0_14","5_13","5_5"}, <6> {"0_14","5_13","6_6"}, <7> {"0_14","5_13","7_13","7_7"}, <8> {"0_14","5_13","7_13","8_10","8_13","8_8"}, <9> {"0_14","5_13","7_13","8_10","8_13","9_9"}, <10> {"0_14","10_10","5_13","7_13","8_10","8_13"}, <11> {"0_14","11_11","11_13","5_13","7_13","8_13"}, <12> {"0_14","11_13","12_12","12_13","5_13","7_13","8_13"}, <13> {"0_14","11_13","12_13","13_13","5_13","7_13","8_13"}, <14> {"0_14","14_14"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Concessive"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Required_event"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Part_inner_outer"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Part_whole"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Concessive"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Required_event"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Part_inner_outer"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Part_whole"] do sum <s> in Spans : z3[r,s] == 1;
#pairwise exclusion constraint
#pairwise requirement constraint
