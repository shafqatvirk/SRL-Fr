# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Calendric_unit","Catastrophe","Participation","Toxic_substance","Manufacturing","Substance","Using","Active_substance","Political_locales","Hostile_encounter","Manufacturing","Connectors"};
set Roles[Frames] :=  <"Calendric_unit"> {"Relative_time","Unit","Count","Name","Salient_event","Whole"}, <"Catastrophe"> {"Undesirable_Event","Place","Degree","Manner","Undergoer","Time","Circumstances","Cause"}, <"Participation"> {"Purpose","Time","Place","Institution","Participants","Event","Means","Participant_2","Participant_1","Duration","Degree_of_involvement","Manner"}, <"Toxic_substance"> {"Duration","Victim","Circumstances","Toxic_substance","Body_part","Toxin_source","Degree"}, <"Manufacturing"> {"Purpose","Circumstances","Time","Manufacturer","Instrument","Place","Frequency","Resource","Means","Locus","Consumer","Depictive","Factory","Product","Manner"}, <"Substance"> {"Source","Type","Use","Descriptor","Substance","Constituents"}, <"Using"> {"Duration","Depictive","Purpose","Means","Role","Circumstances","Agent","Manner","Explanation","Outcome","Instrument","Time","Period_of_iterations","Containing_event","Degree","Place","Frequency","Group"}, <"Active_substance"> {"Name","Type","Substance","Descriptor","Effect"}, <"Political_locales"> {"Relative_location","Constituent_parts","Container_possessor","Descriptor","Name","Population","Locale"}, <"Hostile_encounter"> {"Purpose","Result","Depictive","Instrument","Place","Degree","Means","Internal_cause","Reason","Particular_iteration","Duration","Sides","Issue","Side_2","Side_1","Manner","Time"}, <"Manufacturing"> {"Purpose","Circumstances","Time","Manufacturer","Instrument","Place","Frequency","Resource","Means","Locus","Consumer","Depictive","Factory","Product","Manner"}, <"Connectors"> {"Connected_item","Type","Use","Fixed_location","Material","Descriptor","Connector"};
set Spans := {"-1_-1","0_0","0_1","0_2","0_3","0_37","10_10","10_37","11_11","11_37","12_12","12_14","12_37","13_13","14_14","15_15","15_37","16_16","16_37","17_17","18_18","19_19","1_1","20_20","20_21","20_24","21_21","21_24","22_22","22_24","23_23","24_24","25_25","26_26","26_36","26_37","27_27","27_28","28_28","29_29","2_2","30_30","31_31","32_32","32_33","32_34","33_33","33_34","34_34","35_35","36_36","37_37","3_3","3_37","4_37","4_4","4_9","5_5","6_6","7_7","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Calendric_unit"]] binary;
var z1[Assignment["Catastrophe"]] binary;
var z2[Assignment["Participation"]] binary;
var z3[Assignment["Toxic_substance"]] binary;
var z4[Assignment["Manufacturing"]] binary;
var z5[Assignment["Substance"]] binary;
var z6[Assignment["Using"]] binary;
var z7[Assignment["Active_substance"]] binary;
var z8[Assignment["Political_locales"]] binary;
var z9[Assignment["Hostile_encounter"]] binary;
var z10[Assignment["Manufacturing"]] binary;
var z11[Assignment["Connectors"]] binary;
param probabilities0[Assignment["Calendric_unit"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Catastrophe"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Participation"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Toxic_substance"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Manufacturing"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Substance"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Using"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Active_substance"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Political_locales"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Hostile_encounter"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Manufacturing"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;
param probabilities11[Assignment["Connectors"]] := read "../frameData/frame11.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Calendric_unit"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Catastrophe"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Participation"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Toxic_substance"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Manufacturing"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Substance"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Using"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Active_substance"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Political_locales"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Hostile_encounter"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Manufacturing"] : probabilities10[r,s] * z10[r,s])+(sum <r,s> in Assignment["Connectors"] : probabilities11[r,s] * z11[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 37};
set G[I] := <0> {"0_0","0_1","0_2","0_3","0_37"}, <1> {"0_1","0_2","0_3","0_37","1_1"}, <2> {"0_2","0_3","0_37","2_2"}, <3> {"0_3","0_37","3_3","3_37"}, <4> {"0_37","3_37","4_37","4_4","4_9"}, <5> {"0_37","3_37","4_37","4_9","5_5"}, <6> {"0_37","3_37","4_37","4_9","6_6"}, <7> {"0_37","3_37","4_37","4_9","7_7"}, <8> {"0_37","3_37","4_37","4_9","8_8"}, <9> {"0_37","3_37","4_37","4_9","9_9"}, <10> {"0_37","10_10","10_37","3_37","4_37"}, <11> {"0_37","10_37","11_11","11_37","3_37","4_37"}, <12> {"0_37","10_37","11_37","12_12","12_14","12_37","3_37","4_37"}, <13> {"0_37","10_37","11_37","12_14","12_37","13_13","3_37","4_37"}, <14> {"0_37","10_37","11_37","12_14","12_37","14_14","3_37","4_37"}, <15> {"0_37","10_37","11_37","12_37","15_15","15_37","3_37","4_37"}, <16> {"0_37","10_37","11_37","12_37","15_37","16_16","16_37","3_37","4_37"}, <17> {"0_37","10_37","11_37","12_37","15_37","16_37","17_17","3_37","4_37"}, <18> {"0_37","10_37","11_37","12_37","15_37","16_37","18_18","3_37","4_37"}, <19> {"0_37","10_37","11_37","12_37","15_37","16_37","19_19","3_37","4_37"}, <20> {"0_37","10_37","11_37","12_37","15_37","16_37","20_20","20_21","20_24","3_37","4_37"}, <21> {"0_37","10_37","11_37","12_37","15_37","16_37","20_21","20_24","21_21","21_24","3_37","4_37"}, <22> {"0_37","10_37","11_37","12_37","15_37","16_37","20_24","21_24","22_22","22_24","3_37","4_37"}, <23> {"0_37","10_37","11_37","12_37","15_37","16_37","20_24","21_24","22_24","23_23","3_37","4_37"}, <24> {"0_37","10_37","11_37","12_37","15_37","16_37","20_24","21_24","22_24","24_24","3_37","4_37"}, <25> {"0_37","10_37","11_37","12_37","15_37","16_37","25_25","3_37","4_37"}, <26> {"0_37","10_37","11_37","12_37","15_37","16_37","26_26","26_36","26_37","3_37","4_37"}, <27> {"0_37","10_37","11_37","12_37","15_37","16_37","26_36","26_37","27_27","27_28","3_37","4_37"}, <28> {"0_37","10_37","11_37","12_37","15_37","16_37","26_36","26_37","27_28","28_28","3_37","4_37"}, <29> {"0_37","10_37","11_37","12_37","15_37","16_37","26_36","26_37","29_29","3_37","4_37"}, <30> {"0_37","10_37","11_37","12_37","15_37","16_37","26_36","26_37","30_30","3_37","4_37"}, <31> {"0_37","10_37","11_37","12_37","15_37","16_37","26_36","26_37","31_31","3_37","4_37"}, <32> {"0_37","10_37","11_37","12_37","15_37","16_37","26_36","26_37","32_32","32_33","32_34","3_37","4_37"}, <33> {"0_37","10_37","11_37","12_37","15_37","16_37","26_36","26_37","32_33","32_34","33_33","33_34","3_37","4_37"}, <34> {"0_37","10_37","11_37","12_37","15_37","16_37","26_36","26_37","32_34","33_34","34_34","3_37","4_37"}, <35> {"0_37","10_37","11_37","12_37","15_37","16_37","26_36","26_37","35_35","3_37","4_37"}, <36> {"0_37","10_37","11_37","12_37","15_37","16_37","26_36","26_37","36_36","3_37","4_37"}, <37> {"0_37","10_37","11_37","12_37","15_37","16_37","26_37","37_37","3_37","4_37"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Calendric_unit"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Catastrophe"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Participation"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Toxic_substance"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Manufacturing"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Substance"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Using"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Active_substance"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Political_locales"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Hostile_encounter"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Manufacturing"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
subto overlap11: forall <i> in I do 
 sum <r> in Roles["Connectors"] do 
 sum <s> in G[i] do z11[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Calendric_unit"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Catastrophe"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Participation"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Toxic_substance"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Manufacturing"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Substance"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Using"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Active_substance"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Political_locales"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Hostile_encounter"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Manufacturing"] do sum <s> in Spans : z10[r,s] == 1;
subto unique11: forall <r> in Roles["Connectors"] do sum <s> in Spans : z11[r,s] == 1;
#pairwise exclusion constraint
set Exc2 := {<"Event","Institution">,<"Participant_2","Participants">,<"Participant_1","Participants">};
subto exclusion2: forall <ri,rj> in Exc2 do z2[ri,"-1_-1"] + z2[rj,"-1_-1"] >= 1;
set Exc9 := {<"Side_1","Sides">,<"Side_2","Sides">};
subto exclusion9: forall <ri,rj> in Exc9 do z9[ri,"-1_-1"] + z9[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
set Reqr9 := {<"Side_1","Side_2">};
subto require9: forall <ri,rj> in Reqr9 do z9[ri,"-1_-1"] - z9[rj,"-1_-1"] == 0;
