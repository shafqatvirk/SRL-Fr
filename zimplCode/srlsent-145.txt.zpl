# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Weapon","Political_locales","Supply","Cognitive_connection","Artifact"};
set Roles[Frames] :=  <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Political_locales"> {"Relative_location","Constituent_parts","Container_possessor","Descriptor","Name","Population","Locale"}, <"Supply"> {"Recipient","Circumstances","Time","Supplier","Place","Co_theme","Purpose","Period_of_iterations","Means","Source","Theme","Purpose_of_recipient","Manner"}, <"Cognitive_connection"> {"Point_of_view","Circumstances","Specification","Concept_2","Concept_1","Degree","Concepts"}, <"Artifact"> {"Creator","Type","Use","Material","Time_of_creation","Name","Artifact"};
set Spans := {"-1_-1","0_0","0_13","10_10","11_11","12_12","13_13","1_1","2_2","2_3","3_3","4_4","5_12","5_5","6_6","7_12","7_7","8_12","8_8","8_9","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Weapon"]] binary;
var z1[Assignment["Political_locales"]] binary;
var z2[Assignment["Supply"]] binary;
var z3[Assignment["Cognitive_connection"]] binary;
var z4[Assignment["Artifact"]] binary;
param probabilities0[Assignment["Weapon"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Political_locales"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Supply"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Cognitive_connection"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Artifact"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Weapon"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Political_locales"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Supply"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Cognitive_connection"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Artifact"] : probabilities4[r,s] * z4[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 13};
set G[I] := <0> {"0_0","0_13"}, <1> {"0_13","1_1"}, <2> {"0_13","2_2","2_3"}, <3> {"0_13","2_3","3_3"}, <4> {"0_13","4_4"}, <5> {"0_13","5_12","5_5"}, <6> {"0_13","5_12","6_6"}, <7> {"0_13","5_12","7_12","7_7"}, <8> {"0_13","5_12","7_12","8_12","8_8","8_9"}, <9> {"0_13","5_12","7_12","8_12","8_9","9_9"}, <10> {"0_13","10_10","5_12","7_12","8_12"}, <11> {"0_13","11_11","5_12","7_12","8_12"}, <12> {"0_13","12_12","5_12","7_12","8_12"}, <13> {"0_13","13_13"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Political_locales"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Supply"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Cognitive_connection"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Artifact"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Weapon"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Political_locales"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Supply"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Cognitive_connection"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Artifact"] do sum <s> in Spans : z4[r,s] == 1;
#pairwise exclusion constraint
set Exc3 := {<"Concept_2","Concepts">,<"Concept_1","Concepts">};
subto exclusion3: forall <ri,rj> in Exc3 do z3[ri,"-1_-1"] + z3[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
