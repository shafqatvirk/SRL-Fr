# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"People","Building_subparts","Capability","Self_motion","Connecting_architecture","Ordinal_numbers","Architectural_part","Roadways","Rank","Moving_in_place"};
set Roles[Frames] :=  <"People"> {"Person","Ethnicity","Persistent_characteristic","Context_of_acquaintance","Descriptor","Age","Origin"}, <"Building_subparts"> {"Whole","Type","Building_part","Use"}, <"Capability"> {"Degree","Status","Entity","Relevant_feature","Circumstances","Role","Event","Cause"}, <"Self_motion"> {"Speed","Duration","Area","Purpose","Cotheme","Means","Depictive","Coordinated_event","Manner","Path","Result","Distance","Self_mover","Time","Source","External_cause","Place","Goal","Reason","Direction","Concessive","Internal_cause","Path_shape"}, <"Connecting_architecture"> {"Part","Whole","Descriptor","Source","Material"}, <"Ordinal_numbers"> {"Type","Item","Starting_point","Comparison_set","Basis_of_order"}, <"Architectural_part"> {"Part","Whole","Descriptor","Material","Orientation"}, <"Roadways"> {"Characteristic","Length","Use","Frequency_of_use","Goal","Relative_location","Endpoints","Direction","Source","Material","Path","Roadway","Name","Abundant_entities"}, <"Rank"> {"Item","Rank"}, <"Moving_in_place"> {"Purpose","Result","Fixed_location","Time","Place","Theme","Direction","Periodicity","Cause","Depictive","Path_shape","Manner","Angle"};
set Spans := {"-1_-1","0_0","0_1","0_23","0_5","10_10","10_16","11_11","11_12","11_16","12_12","13_13","13_16","14_14","14_16","15_15","16_16","17_17","17_22","18_18","18_19","18_22","19_19","19_22","1_1","20_20","20_22","21_21","21_22","22_22","23_23","2_2","2_5","3_3","3_5","4_4","5_5","6_23","6_6","7_22","7_7","8_22","8_8","9_22","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["People"]] binary;
var z1[Assignment["Building_subparts"]] binary;
var z2[Assignment["Capability"]] binary;
var z3[Assignment["Self_motion"]] binary;
var z4[Assignment["Connecting_architecture"]] binary;
var z5[Assignment["Ordinal_numbers"]] binary;
var z6[Assignment["Architectural_part"]] binary;
var z7[Assignment["Roadways"]] binary;
var z8[Assignment["Rank"]] binary;
var z9[Assignment["Moving_in_place"]] binary;
param probabilities0[Assignment["People"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Building_subparts"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Capability"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Self_motion"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Connecting_architecture"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Ordinal_numbers"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Architectural_part"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Roadways"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Rank"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Moving_in_place"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["People"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Building_subparts"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Capability"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Self_motion"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Connecting_architecture"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Ordinal_numbers"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Architectural_part"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Roadways"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Rank"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Moving_in_place"] : probabilities9[r,s] * z9[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 23};
set G[I] := <0> {"0_0","0_1","0_23","0_5"}, <1> {"0_1","0_23","0_5","1_1"}, <2> {"0_23","0_5","2_2","2_5"}, <3> {"0_23","0_5","2_5","3_3","3_5"}, <4> {"0_23","0_5","2_5","3_5","4_4"}, <5> {"0_23","0_5","2_5","3_5","5_5"}, <6> {"0_23","6_23","6_6"}, <7> {"0_23","6_23","7_22","7_7"}, <8> {"0_23","6_23","7_22","8_22","8_8"}, <9> {"0_23","6_23","7_22","8_22","9_22","9_9"}, <10> {"0_23","10_10","10_16","6_23","7_22","8_22","9_22"}, <11> {"0_23","10_16","11_11","11_12","11_16","6_23","7_22","8_22","9_22"}, <12> {"0_23","10_16","11_12","11_16","12_12","6_23","7_22","8_22","9_22"}, <13> {"0_23","10_16","11_16","13_13","13_16","6_23","7_22","8_22","9_22"}, <14> {"0_23","10_16","11_16","13_16","14_14","14_16","6_23","7_22","8_22","9_22"}, <15> {"0_23","10_16","11_16","13_16","14_16","15_15","6_23","7_22","8_22","9_22"}, <16> {"0_23","10_16","11_16","13_16","14_16","16_16","6_23","7_22","8_22","9_22"}, <17> {"0_23","17_17","17_22","6_23","7_22","8_22","9_22"}, <18> {"0_23","17_22","18_18","18_19","18_22","6_23","7_22","8_22","9_22"}, <19> {"0_23","17_22","18_19","18_22","19_19","19_22","6_23","7_22","8_22","9_22"}, <20> {"0_23","17_22","18_22","19_22","20_20","20_22","6_23","7_22","8_22","9_22"}, <21> {"0_23","17_22","18_22","19_22","20_22","21_21","21_22","6_23","7_22","8_22","9_22"}, <22> {"0_23","17_22","18_22","19_22","20_22","21_22","22_22","6_23","7_22","8_22","9_22"}, <23> {"0_23","23_23","6_23"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["People"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Building_subparts"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Capability"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Self_motion"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Connecting_architecture"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Ordinal_numbers"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Architectural_part"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Roadways"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Rank"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Moving_in_place"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["People"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Building_subparts"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Capability"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Self_motion"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Connecting_architecture"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Ordinal_numbers"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Architectural_part"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Roadways"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Rank"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Moving_in_place"] do sum <s> in Spans : z9[r,s] == 1;
#pairwise exclusion constraint
set Exc3 := {<"Area","Direction">,<"Area","Goal">,<"Area","Path">,<"Area","Source">};
subto exclusion3: forall <ri,rj> in Exc3 do z3[ri,"-1_-1"] + z3[rj,"-1_-1"] >= 1;
set Exc5 := {<"Basis_of_order","Starting_point">};
subto exclusion5: forall <ri,rj> in Exc5 do z5[ri,"-1_-1"] + z5[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
