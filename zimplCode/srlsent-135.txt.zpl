# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Age","People_by_age","Statement","Perception_experience","People","Getting_vehicle_underway","Vehicle","Vehicle","Placing","Locale_by_use"};
set Roles[Frames] :=  <"Age"> {"Attribute","Degree","Entity","Time","Expressor","Duration","Age","Descriptor"}, <"People_by_age"> {"Person","Ethnicity","Persistent_characteristic","Context_of_acquaintance","Descriptor","Age","Origin"}, <"Statement"> {"Message","Medium","Place","Iteration","Means","Depictive","Manner","Epistemic_stance","Speaker","Event_description","Addressee","Time","Containing_event","Degree","Occasion","Group","Frequency","Particular_iteration","Internal_cause","Topic"}, <"Perception_experience"> {"Perceiver_passive","Location_of_perceiver","Circumstances","Depictive","Place","Frequency","Degree","Body_part","Direction","State","Means","Phenomenon","Duration","Manner","Concessive","Time"}, <"People"> {"Person","Ethnicity","Persistent_characteristic","Context_of_acquaintance","Descriptor","Age","Origin"}, <"Getting_vehicle_underway"> {"Driver","Time","Source","Explanation","Vehicle"}, <"Vehicle"> {"Itinerary","Possessor","Descriptor","Vehicle","Use"}, <"Vehicle"> {"Itinerary","Possessor","Descriptor","Vehicle","Use"}, <"Placing"> {"Speed","Duration","Area","Theme","Means","Depictive","Agent","Manner","Result","Distance","Cause","Time","Source","Beneficiary","Degree","Place","Goal","Reason","Purpose","Path"}, <"Locale_by_use"> {"Formational_cause","Use","Locale","Relative_location","Name","Container_possessor","Constituent_parts","Descriptor"};
set Spans := {"-1_-1","0_0","0_18","0_2","10_10","11_11","11_17","12_12","12_13","12_17","13_13","14_14","14_17","15_15","15_17","16_16","16_17","17_17","18_18","1_1","2_2","3_18","3_3","4_17","4_4","5_5","5_7","6_6","7_7","8_10","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Age"]] binary;
var z1[Assignment["People_by_age"]] binary;
var z2[Assignment["Statement"]] binary;
var z3[Assignment["Perception_experience"]] binary;
var z4[Assignment["People"]] binary;
var z5[Assignment["Getting_vehicle_underway"]] binary;
var z6[Assignment["Vehicle"]] binary;
var z7[Assignment["Vehicle"]] binary;
var z8[Assignment["Placing"]] binary;
var z9[Assignment["Locale_by_use"]] binary;
param probabilities0[Assignment["Age"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["People_by_age"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Statement"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Perception_experience"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["People"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Getting_vehicle_underway"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Vehicle"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Vehicle"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Placing"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Locale_by_use"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Age"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["People_by_age"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Statement"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Perception_experience"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["People"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Getting_vehicle_underway"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Vehicle"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Vehicle"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Placing"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Locale_by_use"] : probabilities9[r,s] * z9[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 18};
set G[I] := <0> {"0_0","0_18","0_2"}, <1> {"0_18","0_2","1_1"}, <2> {"0_18","0_2","2_2"}, <3> {"0_18","3_18","3_3"}, <4> {"0_18","3_18","4_17","4_4"}, <5> {"0_18","3_18","4_17","5_5","5_7"}, <6> {"0_18","3_18","4_17","5_7","6_6"}, <7> {"0_18","3_18","4_17","5_7","7_7"}, <8> {"0_18","3_18","4_17","8_10","8_8"}, <9> {"0_18","3_18","4_17","8_10","9_9"}, <10> {"0_18","10_10","3_18","4_17","8_10"}, <11> {"0_18","11_11","11_17","3_18","4_17"}, <12> {"0_18","11_17","12_12","12_13","12_17","3_18","4_17"}, <13> {"0_18","11_17","12_13","12_17","13_13","3_18","4_17"}, <14> {"0_18","11_17","12_17","14_14","14_17","3_18","4_17"}, <15> {"0_18","11_17","12_17","14_17","15_15","15_17","3_18","4_17"}, <16> {"0_18","11_17","12_17","14_17","15_17","16_16","16_17","3_18","4_17"}, <17> {"0_18","11_17","12_17","14_17","15_17","16_17","17_17","3_18","4_17"}, <18> {"0_18","18_18","3_18"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Age"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["People_by_age"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Statement"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Perception_experience"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["People"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Getting_vehicle_underway"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Vehicle"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Vehicle"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Placing"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Locale_by_use"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Age"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["People_by_age"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Statement"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Perception_experience"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["People"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Getting_vehicle_underway"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Vehicle"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Vehicle"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Placing"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Locale_by_use"] do sum <s> in Spans : z9[r,s] == 1;
#pairwise exclusion constraint
set Exc0 := {<"Entity","Expressor">,<"Age","Degree">};
subto exclusion0: forall <ri,rj> in Exc0 do z0[ri,"-1_-1"] + z0[rj,"-1_-1"] >= 1;
set Exc8 := {<"Agent","Cause">};
subto exclusion8: forall <ri,rj> in Exc8 do z8[ri,"-1_-1"] + z8[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
