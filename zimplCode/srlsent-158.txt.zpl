# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Statement","Cardinal_numbers","People","People_by_age","People_by_age","Death","Relative_time","Cardinal_numbers","Measure_duration","Judgment","Death","Food","Medical_specialties","Increment","Being_necessary","Store"};
set Roles[Frames] :=  <"Statement"> {"Message","Medium","Place","Iteration","Means","Depictive","Manner","Epistemic_stance","Speaker","Event_description","Addressee","Time","Containing_event","Degree","Occasion","Group","Frequency","Particular_iteration","Internal_cause","Topic"}, <"Cardinal_numbers"> {"Precision","Number","Multiplier","Entity"}, <"People"> {"Person","Ethnicity","Persistent_characteristic","Context_of_acquaintance","Descriptor","Age","Origin"}, <"People_by_age"> {"Person","Ethnicity","Persistent_characteristic","Context_of_acquaintance","Descriptor","Age","Origin"}, <"People_by_age"> {"Person","Ethnicity","Persistent_characteristic","Context_of_acquaintance","Descriptor","Age","Origin"}, <"Death"> {"Place","Sub_event","Result","Degree","Manner","Time","Protagonist","Reason","Depictive","Cause"}, <"Relative_time"> {"Focal_participant","Interval","Degree","Focal_occasion","Landmark_occasion"}, <"Cardinal_numbers"> {"Precision","Number","Multiplier","Entity"}, <"Measure_duration"> {"Agent","Count","Unit","Process"}, <"Judgment"> {"Evaluee","Cognizer","Result","Degree","Role","Manner","Means","Reason","Expressor","Extent_of_acclaim"}, <"Death"> {"Place","Sub_event","Result","Degree","Manner","Time","Protagonist","Reason","Depictive","Cause"}, <"Food"> {"Type","Descriptor","Food","Constituent_parts"}, <"Medical_specialties"> {"Specialty","Type"}, <"Increment"> {"Initial_set","Class","Increment","Added_set"}, <"Being_necessary"> {"Dependent","Requirement","Degree","Domain","Condition","Time","Required_entity","Reason","Descriptor","Dependent_individual"}, <"Store"> {"Possessor","Descriptor","Supply","Resource"};
set Spans := {"-1_-1","0_0","0_37","10_10","11_11","12_12","13_13","14_14","15_15","16_16","16_21","17_17","17_21","18_18","18_21","19_19","1_1","1_37","20_20","21_21","22_22","23_23","24_24","24_36","25_25","25_26","26_26","27_27","27_36","28_28","28_36","29_29","29_36","2_2","2_21","30_30","30_36","31_31","32_32","33_33","34_34","35_35","36_36","37_37","3_21","3_3","4_13","4_15","4_21","4_4","4_6","4_7","4_9","5_5","6_6","7_7","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Statement"]] binary;
var z1[Assignment["Cardinal_numbers"]] binary;
var z2[Assignment["People"]] binary;
var z3[Assignment["People_by_age"]] binary;
var z4[Assignment["People_by_age"]] binary;
var z5[Assignment["Death"]] binary;
var z6[Assignment["Relative_time"]] binary;
var z7[Assignment["Cardinal_numbers"]] binary;
var z8[Assignment["Measure_duration"]] binary;
var z9[Assignment["Judgment"]] binary;
var z10[Assignment["Death"]] binary;
var z11[Assignment["Food"]] binary;
var z12[Assignment["Medical_specialties"]] binary;
var z13[Assignment["Increment"]] binary;
var z14[Assignment["Being_necessary"]] binary;
var z15[Assignment["Store"]] binary;
param probabilities0[Assignment["Statement"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Cardinal_numbers"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["People"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["People_by_age"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["People_by_age"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Death"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Relative_time"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Cardinal_numbers"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Measure_duration"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Judgment"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Death"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;
param probabilities11[Assignment["Food"]] := read "../frameData/frame11.txt" as "<1s,2s> 3n" skip 2;
param probabilities12[Assignment["Medical_specialties"]] := read "../frameData/frame12.txt" as "<1s,2s> 3n" skip 2;
param probabilities13[Assignment["Increment"]] := read "../frameData/frame13.txt" as "<1s,2s> 3n" skip 2;
param probabilities14[Assignment["Being_necessary"]] := read "../frameData/frame14.txt" as "<1s,2s> 3n" skip 2;
param probabilities15[Assignment["Store"]] := read "../frameData/frame15.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Statement"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Cardinal_numbers"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["People"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["People_by_age"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["People_by_age"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Death"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Relative_time"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Cardinal_numbers"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Measure_duration"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Judgment"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Death"] : probabilities10[r,s] * z10[r,s])+(sum <r,s> in Assignment["Food"] : probabilities11[r,s] * z11[r,s])+(sum <r,s> in Assignment["Medical_specialties"] : probabilities12[r,s] * z12[r,s])+(sum <r,s> in Assignment["Increment"] : probabilities13[r,s] * z13[r,s])+(sum <r,s> in Assignment["Being_necessary"] : probabilities14[r,s] * z14[r,s])+(sum <r,s> in Assignment["Store"] : probabilities15[r,s] * z15[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 37};
set G[I] := <0> {"0_0","0_37"}, <1> {"0_37","1_1","1_37"}, <2> {"0_37","1_37","2_2","2_21"}, <3> {"0_37","1_37","2_21","3_21","3_3"}, <4> {"0_37","1_37","2_21","3_21","4_13","4_15","4_21","4_4","4_6","4_7","4_9"}, <5> {"0_37","1_37","2_21","3_21","4_13","4_15","4_21","4_6","4_7","4_9","5_5"}, <6> {"0_37","1_37","2_21","3_21","4_13","4_15","4_21","4_6","4_7","4_9","6_6"}, <7> {"0_37","1_37","2_21","3_21","4_13","4_15","4_21","4_7","4_9","7_7"}, <8> {"0_37","1_37","2_21","3_21","4_13","4_15","4_21","4_9","8_8"}, <9> {"0_37","1_37","2_21","3_21","4_13","4_15","4_21","4_9","9_9"}, <10> {"0_37","10_10","1_37","2_21","3_21","4_13","4_15","4_21"}, <11> {"0_37","11_11","1_37","2_21","3_21","4_13","4_15","4_21"}, <12> {"0_37","12_12","1_37","2_21","3_21","4_13","4_15","4_21"}, <13> {"0_37","13_13","1_37","2_21","3_21","4_13","4_15","4_21"}, <14> {"0_37","14_14","1_37","2_21","3_21","4_15","4_21"}, <15> {"0_37","15_15","1_37","2_21","3_21","4_15","4_21"}, <16> {"0_37","16_16","16_21","1_37","2_21","3_21","4_21"}, <17> {"0_37","16_21","17_17","17_21","1_37","2_21","3_21","4_21"}, <18> {"0_37","16_21","17_21","18_18","18_21","1_37","2_21","3_21","4_21"}, <19> {"0_37","16_21","17_21","18_21","19_19","1_37","2_21","3_21","4_21"}, <20> {"0_37","16_21","17_21","18_21","1_37","20_20","2_21","3_21","4_21"}, <21> {"0_37","16_21","17_21","18_21","1_37","21_21","2_21","3_21","4_21"}, <22> {"0_37","1_37","22_22"}, <23> {"0_37","1_37","23_23"}, <24> {"0_37","1_37","24_24","24_36"}, <25> {"0_37","1_37","24_36","25_25","25_26"}, <26> {"0_37","1_37","24_36","25_26","26_26"}, <27> {"0_37","1_37","24_36","27_27","27_36"}, <28> {"0_37","1_37","24_36","27_36","28_28","28_36"}, <29> {"0_37","1_37","24_36","27_36","28_36","29_29","29_36"}, <30> {"0_37","1_37","24_36","27_36","28_36","29_36","30_30","30_36"}, <31> {"0_37","1_37","24_36","27_36","28_36","29_36","30_36","31_31"}, <32> {"0_37","1_37","24_36","27_36","28_36","29_36","30_36","32_32"}, <33> {"0_37","1_37","24_36","27_36","28_36","29_36","30_36","33_33"}, <34> {"0_37","1_37","24_36","27_36","28_36","29_36","30_36","34_34"}, <35> {"0_37","1_37","24_36","27_36","28_36","29_36","30_36","35_35"}, <36> {"0_37","1_37","24_36","27_36","28_36","29_36","30_36","36_36"}, <37> {"0_37","1_37","37_37"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Statement"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Cardinal_numbers"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["People"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["People_by_age"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["People_by_age"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Death"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Relative_time"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Cardinal_numbers"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Measure_duration"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Judgment"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Death"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
subto overlap11: forall <i> in I do 
 sum <r> in Roles["Food"] do 
 sum <s> in G[i] do z11[r,s] <= 1;
subto overlap12: forall <i> in I do 
 sum <r> in Roles["Medical_specialties"] do 
 sum <s> in G[i] do z12[r,s] <= 1;
subto overlap13: forall <i> in I do 
 sum <r> in Roles["Increment"] do 
 sum <s> in G[i] do z13[r,s] <= 1;
subto overlap14: forall <i> in I do 
 sum <r> in Roles["Being_necessary"] do 
 sum <s> in G[i] do z14[r,s] <= 1;
subto overlap15: forall <i> in I do 
 sum <r> in Roles["Store"] do 
 sum <s> in G[i] do z15[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Statement"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Cardinal_numbers"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["People"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["People_by_age"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["People_by_age"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Death"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Relative_time"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Cardinal_numbers"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Measure_duration"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Judgment"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Death"] do sum <s> in Spans : z10[r,s] == 1;
subto unique11: forall <r> in Roles["Food"] do sum <s> in Spans : z11[r,s] == 1;
subto unique12: forall <r> in Roles["Medical_specialties"] do sum <s> in Spans : z12[r,s] == 1;
subto unique13: forall <r> in Roles["Increment"] do sum <s> in Spans : z13[r,s] == 1;
subto unique14: forall <r> in Roles["Being_necessary"] do sum <s> in Spans : z14[r,s] == 1;
subto unique15: forall <r> in Roles["Store"] do sum <s> in Spans : z15[r,s] == 1;
#pairwise exclusion constraint
#pairwise requirement constraint
