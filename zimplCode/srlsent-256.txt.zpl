# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Weapon","Make_agreement_on_action","Building","Substance","Locale_by_use","Using","Manufacturing","Cardinal_numbers","Purpose","Substance","Capability","Using","Manufacturing"};
set Roles[Frames] :=  <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Make_agreement_on_action"> {"Place","Party_2","Party_1","Medium","Topic","Manner","Time","Parties","Obligation","Descriptor"}, <"Building"> {"Purpose","Result","Components","Time","Descriptor","Instrument","Place","Created_entity","Means","Period_of_iterations","Particular_iteration","Duration","Beneficiary","Manner","Agent"}, <"Substance"> {"Source","Type","Use","Descriptor","Substance","Constituents"}, <"Locale_by_use"> {"Formational_cause","Use","Locale","Relative_location","Name","Container_possessor","Constituent_parts","Descriptor"}, <"Using"> {"Duration","Depictive","Purpose","Means","Role","Circumstances","Agent","Manner","Explanation","Outcome","Instrument","Time","Period_of_iterations","Containing_event","Degree","Place","Frequency","Group"}, <"Manufacturing"> {"Purpose","Circumstances","Time","Manufacturer","Instrument","Place","Frequency","Resource","Means","Locus","Consumer","Depictive","Factory","Product","Manner"}, <"Cardinal_numbers"> {"Precision","Number","Multiplier","Entity"}, <"Purpose"> {"Attribute","Agent","Goal","Time","Restrictor","Value","Domain","Means"}, <"Substance"> {"Source","Type","Use","Descriptor","Substance","Constituents"}, <"Capability"> {"Degree","Status","Entity","Relevant_feature","Circumstances","Role","Event","Cause"}, <"Using"> {"Duration","Depictive","Purpose","Means","Role","Circumstances","Agent","Manner","Explanation","Outcome","Instrument","Time","Period_of_iterations","Containing_event","Degree","Place","Frequency","Group"}, <"Manufacturing"> {"Purpose","Circumstances","Time","Manufacturer","Instrument","Place","Frequency","Resource","Means","Locus","Consumer","Depictive","Factory","Product","Manner"};
set Spans := {"-1_-1","0_0","0_2","0_35","10_10","11_11","11_12","12_12","13_13","14_14","14_34","15_15","15_17","16_16","16_17","17_17","18_18","18_34","19_19","19_20","19_26","19_34","1_1","1_2","20_20","21_21","22_22","23_23","24_24","25_25","26_26","27_27","27_34","28_28","28_34","29_29","29_34","2_2","30_30","30_34","31_31","31_32","31_34","32_32","32_34","33_33","33_34","34_34","35_35","3_3","4_4","5_5","6_34","6_6","7_34","7_7","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Weapon"]] binary;
var z1[Assignment["Make_agreement_on_action"]] binary;
var z2[Assignment["Building"]] binary;
var z3[Assignment["Substance"]] binary;
var z4[Assignment["Locale_by_use"]] binary;
var z5[Assignment["Using"]] binary;
var z6[Assignment["Manufacturing"]] binary;
var z7[Assignment["Cardinal_numbers"]] binary;
var z8[Assignment["Purpose"]] binary;
var z9[Assignment["Substance"]] binary;
var z10[Assignment["Capability"]] binary;
var z11[Assignment["Using"]] binary;
var z12[Assignment["Manufacturing"]] binary;
param probabilities0[Assignment["Weapon"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Make_agreement_on_action"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Building"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Substance"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Locale_by_use"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Using"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Manufacturing"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Cardinal_numbers"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Purpose"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Substance"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Capability"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;
param probabilities11[Assignment["Using"]] := read "../frameData/frame11.txt" as "<1s,2s> 3n" skip 2;
param probabilities12[Assignment["Manufacturing"]] := read "../frameData/frame12.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Weapon"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Make_agreement_on_action"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Building"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Substance"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Locale_by_use"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Using"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Manufacturing"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Cardinal_numbers"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Purpose"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Substance"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Capability"] : probabilities10[r,s] * z10[r,s])+(sum <r,s> in Assignment["Using"] : probabilities11[r,s] * z11[r,s])+(sum <r,s> in Assignment["Manufacturing"] : probabilities12[r,s] * z12[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 35};
set G[I] := <0> {"0_0","0_2","0_35"}, <1> {"0_2","0_35","1_1","1_2"}, <2> {"0_2","0_35","1_2","2_2"}, <3> {"0_35","3_3"}, <4> {"0_35","4_4"}, <5> {"0_35","5_5"}, <6> {"0_35","6_34","6_6"}, <7> {"0_35","6_34","7_34","7_7"}, <8> {"0_35","6_34","7_34","8_8"}, <9> {"0_35","6_34","7_34","9_9"}, <10> {"0_35","10_10","6_34","7_34"}, <11> {"0_35","11_11","11_12","6_34","7_34"}, <12> {"0_35","11_12","12_12","6_34","7_34"}, <13> {"0_35","13_13","6_34","7_34"}, <14> {"0_35","14_14","14_34","6_34","7_34"}, <15> {"0_35","14_34","15_15","15_17","6_34","7_34"}, <16> {"0_35","14_34","15_17","16_16","16_17","6_34","7_34"}, <17> {"0_35","14_34","15_17","16_17","17_17","6_34","7_34"}, <18> {"0_35","14_34","18_18","18_34","6_34","7_34"}, <19> {"0_35","14_34","18_34","19_19","19_20","19_26","19_34","6_34","7_34"}, <20> {"0_35","14_34","18_34","19_20","19_26","19_34","20_20","6_34","7_34"}, <21> {"0_35","14_34","18_34","19_26","19_34","21_21","6_34","7_34"}, <22> {"0_35","14_34","18_34","19_26","19_34","22_22","6_34","7_34"}, <23> {"0_35","14_34","18_34","19_26","19_34","23_23","6_34","7_34"}, <24> {"0_35","14_34","18_34","19_26","19_34","24_24","6_34","7_34"}, <25> {"0_35","14_34","18_34","19_26","19_34","25_25","6_34","7_34"}, <26> {"0_35","14_34","18_34","19_26","19_34","26_26","6_34","7_34"}, <27> {"0_35","14_34","18_34","19_34","27_27","27_34","6_34","7_34"}, <28> {"0_35","14_34","18_34","19_34","27_34","28_28","28_34","6_34","7_34"}, <29> {"0_35","14_34","18_34","19_34","27_34","28_34","29_29","29_34","6_34","7_34"}, <30> {"0_35","14_34","18_34","19_34","27_34","28_34","29_34","30_30","30_34","6_34","7_34"}, <31> {"0_35","14_34","18_34","19_34","27_34","28_34","29_34","30_34","31_31","31_32","31_34","6_34","7_34"}, <32> {"0_35","14_34","18_34","19_34","27_34","28_34","29_34","30_34","31_32","31_34","32_32","32_34","6_34","7_34"}, <33> {"0_35","14_34","18_34","19_34","27_34","28_34","29_34","30_34","31_34","32_34","33_33","33_34","6_34","7_34"}, <34> {"0_35","14_34","18_34","19_34","27_34","28_34","29_34","30_34","31_34","32_34","33_34","34_34","6_34","7_34"}, <35> {"0_35","35_35"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Make_agreement_on_action"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Building"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Substance"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Locale_by_use"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Using"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Manufacturing"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Cardinal_numbers"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Purpose"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Substance"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Capability"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
subto overlap11: forall <i> in I do 
 sum <r> in Roles["Using"] do 
 sum <s> in G[i] do z11[r,s] <= 1;
subto overlap12: forall <i> in I do 
 sum <r> in Roles["Manufacturing"] do 
 sum <s> in G[i] do z12[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Weapon"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Make_agreement_on_action"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Building"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Substance"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Locale_by_use"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Using"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Manufacturing"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Cardinal_numbers"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Purpose"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Substance"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Capability"] do sum <s> in Spans : z10[r,s] == 1;
subto unique11: forall <r> in Roles["Using"] do sum <s> in Spans : z11[r,s] == 1;
subto unique12: forall <r> in Roles["Manufacturing"] do sum <s> in Spans : z12[r,s] == 1;
#pairwise exclusion constraint
set Exc1 := {<"Parties","Party_2">,<"Parties","Party_1">};
subto exclusion1: forall <ri,rj> in Exc1 do z1[ri,"-1_-1"] + z1[rj,"-1_-1"] >= 1;
set Exc8 := {<"Attribute","Goal">,<"Goal","Value">};
subto exclusion8: forall <ri,rj> in Exc8 do z8[ri,"-1_-1"] + z8[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
set Reqr8 := {<"Attribute","Value">};
subto require8: forall <ri,rj> in Reqr8 do z8[ri,"-1_-1"] - z8[rj,"-1_-1"] == 0;
