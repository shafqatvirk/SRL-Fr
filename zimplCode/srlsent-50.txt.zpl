# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Existence","Temporal_collocation","Quantity","Point_of_dispute","Temporal_collocation","Desiring","Relational_quantity","People_by_age","Locale"};
set Roles[Frames] :=  <"Existence"> {"Place","Duration","Inherent_purpose","Entity","Point_of_view","Time","Circumstances","State","Cause"}, <"Temporal_collocation"> {"Event_description","Landmark_period","Trajector_entity","Landmark_entity","Landmark_event","Trajector_period","Trajector_event"}, <"Quantity"> {"Mass","Q_Prop","Degree","Quantity","Individuals"}, <"Point_of_dispute"> {"Status","Descriptor","Group","Domain","Question"}, <"Temporal_collocation"> {"Event_description","Landmark_period","Trajector_entity","Landmark_entity","Landmark_event","Trajector_period","Trajector_event"}, <"Desiring"> {"Time","Place","Degree","Experiencer","Purpose_of_Event","Event","Role_of_focal_participant","Focal_participant","Cause","Reason","Location_of_Event","Duration","Manner","Time_of_Event"}, <"Relational_quantity"> {"Mass","Denoted_quantity","Reference_quantity","Individuals"}, <"People_by_age"> {"Person","Ethnicity","Persistent_characteristic","Context_of_acquaintance","Descriptor","Age","Origin"}, <"Locale"> {"Formational_cause","Locale","Relative_location","Name","Container_possessor","Related_event","Constituent_parts","Descriptor"};
set Spans := {"-1_-1","0_0","0_22","10_10","10_13","11_11","12_12","13_13","14_14","15_15","15_16","16_16","17_17","18_18","18_19","18_21","19_19","1_1","1_22","20_20","20_21","21_21","22_22","2_2","2_21","2_3","3_3","4_4","5_5","6_6","7_13","7_17","7_21","7_7","8_13","8_8","8_9","9_13","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Existence"]] binary;
var z1[Assignment["Temporal_collocation"]] binary;
var z2[Assignment["Quantity"]] binary;
var z3[Assignment["Point_of_dispute"]] binary;
var z4[Assignment["Temporal_collocation"]] binary;
var z5[Assignment["Desiring"]] binary;
var z6[Assignment["Relational_quantity"]] binary;
var z7[Assignment["People_by_age"]] binary;
var z8[Assignment["Locale"]] binary;
param probabilities0[Assignment["Existence"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Temporal_collocation"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Quantity"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Point_of_dispute"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Temporal_collocation"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Desiring"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Relational_quantity"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["People_by_age"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Locale"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Existence"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Temporal_collocation"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Quantity"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Point_of_dispute"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Temporal_collocation"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Desiring"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Relational_quantity"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["People_by_age"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Locale"] : probabilities8[r,s] * z8[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 22};
set G[I] := <0> {"0_0","0_22"}, <1> {"0_22","1_1","1_22"}, <2> {"0_22","1_22","2_2","2_21","2_3"}, <3> {"0_22","1_22","2_21","2_3","3_3"}, <4> {"0_22","1_22","2_21","4_4"}, <5> {"0_22","1_22","2_21","5_5"}, <6> {"0_22","1_22","2_21","6_6"}, <7> {"0_22","1_22","2_21","7_13","7_17","7_21","7_7"}, <8> {"0_22","1_22","2_21","7_13","7_17","7_21","8_13","8_8","8_9"}, <9> {"0_22","1_22","2_21","7_13","7_17","7_21","8_13","8_9","9_13","9_9"}, <10> {"0_22","10_10","10_13","1_22","2_21","7_13","7_17","7_21","8_13","9_13"}, <11> {"0_22","10_13","11_11","1_22","2_21","7_13","7_17","7_21","8_13","9_13"}, <12> {"0_22","10_13","12_12","1_22","2_21","7_13","7_17","7_21","8_13","9_13"}, <13> {"0_22","10_13","13_13","1_22","2_21","7_13","7_17","7_21","8_13","9_13"}, <14> {"0_22","14_14","1_22","2_21","7_17","7_21"}, <15> {"0_22","15_15","15_16","1_22","2_21","7_17","7_21"}, <16> {"0_22","15_16","16_16","1_22","2_21","7_17","7_21"}, <17> {"0_22","17_17","1_22","2_21","7_17","7_21"}, <18> {"0_22","18_18","18_19","18_21","1_22","2_21","7_21"}, <19> {"0_22","18_19","18_21","19_19","1_22","2_21","7_21"}, <20> {"0_22","18_21","1_22","20_20","20_21","2_21","7_21"}, <21> {"0_22","18_21","1_22","20_21","21_21","2_21","7_21"}, <22> {"0_22","1_22","22_22"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Existence"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Temporal_collocation"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Quantity"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Point_of_dispute"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Temporal_collocation"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Desiring"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Relational_quantity"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["People_by_age"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Locale"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Existence"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Temporal_collocation"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Quantity"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Point_of_dispute"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Temporal_collocation"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Desiring"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Relational_quantity"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["People_by_age"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Locale"] do sum <s> in Spans : z8[r,s] == 1;
#pairwise exclusion constraint
set Exc1 := {<"Trajector_event","Trajector_period">,<"Landmark_entity","Landmark_event">,<"Landmark_event","Landmark_period">,<"Trajector_entity","Trajector_event">};
subto exclusion1: forall <ri,rj> in Exc1 do z1[ri,"-1_-1"] + z1[rj,"-1_-1"] >= 1;
set Exc2 := {<"Individuals","Mass">};
subto exclusion2: forall <ri,rj> in Exc2 do z2[ri,"-1_-1"] + z2[rj,"-1_-1"] >= 1;
set Exc4 := {<"Trajector_event","Trajector_period">,<"Landmark_entity","Landmark_event">,<"Landmark_event","Landmark_period">,<"Trajector_entity","Trajector_event">};
subto exclusion4: forall <ri,rj> in Exc4 do z4[ri,"-1_-1"] + z4[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
