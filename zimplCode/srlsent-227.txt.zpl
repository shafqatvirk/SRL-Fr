# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Calendric_unit","Creating","Law","Be_in_control","Text","Grant_permission","Exporting","Weapon","Weapon","Artifact"};
set Roles[Frames] :=  <"Calendric_unit"> {"Relative_time","Unit","Count","Name","Salient_event","Whole"}, <"Creating"> {"Purpose","Components","Time","Instrument","Place","Frequency","Created_entity","Means","Role","Cause","Purpose_of_created_entity","Depictive","Creator","Period_of_iterations","Co_participant","Beneficiary","Manner"}, <"Law"> {"Type","Use","Time_of_creation","Required","Name","Law","Jurisdiction","Forbidden","Creator"}, <"Be_in_control"> {"Time","Dependent_entity","Controlling_entity"}, <"Text"> {"Topic","Honoree","Use","Author","Containing_text","Genre","Material","Components","Time_of_creation","Title","Text","Medium"}, <"Grant_permission"> {"Purpose","Circumstances","Time","Reason","Place","Frequency","Means","Period_of_iterations","Grantee","Depictive","Grantor","Manner","Action"}, <"Exporting"> {"Purpose","Type","Exporter","Time","Goods","Path","Re_encoding","Importing_area","Exporting_area","Vehicle","Manner","Explanation"}, <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Artifact"> {"Creator","Type","Use","Material","Time_of_creation","Name","Artifact"};
set Spans := {"-1_-1","0_0","0_19","0_2","10_10","11_11","11_18","12_12","12_13","12_18","13_13","14_14","14_18","15_15","15_18","16_16","17_17","18_18","19_19","1_1","1_2","2_2","3_3","4_4","5_5","6_10","6_18","6_6","7_7","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Calendric_unit"]] binary;
var z1[Assignment["Creating"]] binary;
var z2[Assignment["Law"]] binary;
var z3[Assignment["Be_in_control"]] binary;
var z4[Assignment["Text"]] binary;
var z5[Assignment["Grant_permission"]] binary;
var z6[Assignment["Exporting"]] binary;
var z7[Assignment["Weapon"]] binary;
var z8[Assignment["Weapon"]] binary;
var z9[Assignment["Artifact"]] binary;
param probabilities0[Assignment["Calendric_unit"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Creating"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Law"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Be_in_control"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Text"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Grant_permission"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Exporting"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Weapon"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Weapon"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Artifact"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Calendric_unit"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Creating"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Law"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Be_in_control"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Text"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Grant_permission"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Exporting"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Weapon"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Weapon"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Artifact"] : probabilities9[r,s] * z9[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 19};
set G[I] := <0> {"0_0","0_19","0_2"}, <1> {"0_19","0_2","1_1","1_2"}, <2> {"0_19","0_2","1_2","2_2"}, <3> {"0_19","3_3"}, <4> {"0_19","4_4"}, <5> {"0_19","5_5"}, <6> {"0_19","6_10","6_18","6_6"}, <7> {"0_19","6_10","6_18","7_7"}, <8> {"0_19","6_10","6_18","8_8"}, <9> {"0_19","6_10","6_18","9_9"}, <10> {"0_19","10_10","6_10","6_18"}, <11> {"0_19","11_11","11_18","6_18"}, <12> {"0_19","11_18","12_12","12_13","12_18","6_18"}, <13> {"0_19","11_18","12_13","12_18","13_13","6_18"}, <14> {"0_19","11_18","12_18","14_14","14_18","6_18"}, <15> {"0_19","11_18","12_18","14_18","15_15","15_18","6_18"}, <16> {"0_19","11_18","12_18","14_18","15_18","16_16","6_18"}, <17> {"0_19","11_18","12_18","14_18","15_18","17_17","6_18"}, <18> {"0_19","11_18","12_18","14_18","15_18","18_18","6_18"}, <19> {"0_19","19_19"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Calendric_unit"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Creating"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Law"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Be_in_control"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Text"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Grant_permission"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Exporting"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Artifact"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Calendric_unit"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Creating"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Law"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Be_in_control"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Text"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Grant_permission"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Exporting"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Weapon"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Weapon"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Artifact"] do sum <s> in Spans : z9[r,s] == 1;
#pairwise exclusion constraint
set Exc1 := {<"Cause","Creator">};
subto exclusion1: forall <ri,rj> in Exc1 do z1[ri,"-1_-1"] + z1[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
