# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Motion","Working_on","Becoming","Cardinal_numbers","Duration_attribute","Touring","Attempt"};
set Roles[Frames] :=  <"Motion"> {"Speed","Duration","Area","Theme","Distance","Depictive","Manner","Result","Direction","Time","Source","Containing_event","Place","Goal","Purpose","Path","Carrier","Path_shape"}, <"Working_on"> {"Purpose","Descriptor","Event_description","Time","Goal","Salient_entity","Place","Frequency","Degree","Means","Domain","Depictive","Duration","Particular_iteration","Manner","Agent"}, <"Becoming"> {"Initial_category","Initial_state","Circumstances","Time","Final_state","Place","Duration_of_final_state","Cause","Group","Final_category","Entity","Transitional_period","Reason","Manner","Explanation"}, <"Cardinal_numbers"> {"Precision","Number","Multiplier","Entity"}, <"Duration_attribute"> {"Degree","Period","Eventuality"}, <"Touring"> {"Particular_iteration","Place","Attraction","Manner","Co_participant","Tourist","Time","Means","Purpose"}, <"Attempt"> {"Purpose","Circumstances","Time","Goal","Particular_iteration","Place","Frequency","Degree","Means","Outcome","Condition","Depictive","Duration","Manner","Agent"};
set Spans := {"-1_-1","0_0","0_17","10_10","10_14","10_16","11_11","12_12","13_13","14_14","15_15","15_16","16_16","17_17","1_1","1_17","2_16","2_2","2_3","3_16","3_3","4_16","4_4","5_16","5_5","6_16","6_6","7_16","7_7","8_16","8_8","9_16","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Motion"]] binary;
var z1[Assignment["Working_on"]] binary;
var z2[Assignment["Becoming"]] binary;
var z3[Assignment["Cardinal_numbers"]] binary;
var z4[Assignment["Duration_attribute"]] binary;
var z5[Assignment["Touring"]] binary;
var z6[Assignment["Attempt"]] binary;
param probabilities0[Assignment["Motion"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Working_on"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Becoming"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Cardinal_numbers"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Duration_attribute"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Touring"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Attempt"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Motion"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Working_on"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Becoming"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Cardinal_numbers"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Duration_attribute"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Touring"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Attempt"] : probabilities6[r,s] * z6[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 17};
set G[I] := <0> {"0_0","0_17"}, <1> {"0_17","1_1","1_17"}, <2> {"0_17","1_17","2_16","2_2","2_3"}, <3> {"0_17","1_17","2_16","2_3","3_16","3_3"}, <4> {"0_17","1_17","2_16","3_16","4_16","4_4"}, <5> {"0_17","1_17","2_16","3_16","4_16","5_16","5_5"}, <6> {"0_17","1_17","2_16","3_16","4_16","5_16","6_16","6_6"}, <7> {"0_17","1_17","2_16","3_16","4_16","5_16","6_16","7_16","7_7"}, <8> {"0_17","1_17","2_16","3_16","4_16","5_16","6_16","7_16","8_16","8_8"}, <9> {"0_17","1_17","2_16","3_16","4_16","5_16","6_16","7_16","8_16","9_16","9_9"}, <10> {"0_17","10_10","10_14","10_16","1_17","2_16","3_16","4_16","5_16","6_16","7_16","8_16","9_16"}, <11> {"0_17","10_14","10_16","11_11","1_17","2_16","3_16","4_16","5_16","6_16","7_16","8_16","9_16"}, <12> {"0_17","10_14","10_16","12_12","1_17","2_16","3_16","4_16","5_16","6_16","7_16","8_16","9_16"}, <13> {"0_17","10_14","10_16","13_13","1_17","2_16","3_16","4_16","5_16","6_16","7_16","8_16","9_16"}, <14> {"0_17","10_14","10_16","14_14","1_17","2_16","3_16","4_16","5_16","6_16","7_16","8_16","9_16"}, <15> {"0_17","10_16","15_15","15_16","1_17","2_16","3_16","4_16","5_16","6_16","7_16","8_16","9_16"}, <16> {"0_17","10_16","15_16","16_16","1_17","2_16","3_16","4_16","5_16","6_16","7_16","8_16","9_16"}, <17> {"0_17","17_17","1_17"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Motion"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Working_on"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Becoming"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Cardinal_numbers"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Duration_attribute"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Touring"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Attempt"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Motion"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Working_on"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Becoming"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Cardinal_numbers"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Duration_attribute"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Touring"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Attempt"] do sum <s> in Spans : z6[r,s] == 1;
#pairwise exclusion constraint
set Exc0 := {<"Area","Direction">,<"Area","Distance">,<"Area","Goal">,<"Area","Path">,<"Area","Source">};
subto exclusion0: forall <ri,rj> in Exc0 do z0[ri,"-1_-1"] + z0[rj,"-1_-1"] >= 1;
set Exc1 := {<"Goal","Salient_entity">};
subto exclusion1: forall <ri,rj> in Exc1 do z1[ri,"-1_-1"] + z1[rj,"-1_-1"] >= 1;
set Exc2 := {<"Final_category","Final_state">};
subto exclusion2: forall <ri,rj> in Exc2 do z2[ri,"-1_-1"] + z2[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
