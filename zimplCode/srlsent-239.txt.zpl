# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Temporal_collocation","Statement","Possession","Quantity","Weapon","Store","Leadership","Certainty","Reveal_secret","Completeness","Scope","Project"};
set Roles[Frames] :=  <"Temporal_collocation"> {"Event_description","Landmark_period","Trajector_entity","Landmark_entity","Landmark_event","Trajector_period","Trajector_event"}, <"Statement"> {"Message","Medium","Place","Iteration","Means","Depictive","Manner","Epistemic_stance","Speaker","Event_description","Addressee","Time","Containing_event","Degree","Occasion","Group","Frequency","Particular_iteration","Internal_cause","Topic"}, <"Possession"> {"Explanation","Time","Owner","Possession","Duration","Manner","Depictive"}, <"Quantity"> {"Mass","Q_Prop","Degree","Quantity","Individuals"}, <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Store"> {"Possessor","Descriptor","Supply","Resource"}, <"Leadership"> {"Domain","Leader","Type","Depictive","Descriptor","Degree","Means","Role","Activity","Duration","Governed","Manner","Time"}, <"Certainty"> {"Cognizer","Topic","Content","Manner","Explanation","Degree","Expressor","Concessive"}, <"Reveal_secret"> {"Medium","Place","Means","Depictive","Speaker","Location_of_protagonist","Manner","Completeness","Period_of_iterations","Information","Addressee","Time","Containing_event","Event_description","Frequency","Re-encoding","Internal_cause","Topic","Source_material"}, <"Completeness"> {"Degree","Whole","Time"}, <"Scope"> {"Event","Salient_entity"}, <"Project"> {"Salient_entity","Duration","Agent","Goal","Manner","Name","Project","Field","Descriptor","Activity"};
set Spans := {"-1_-1","0_0","0_10","0_27","10_10","11_11","12_12","12_14","13_13","14_14","15_15","16_16","16_26","17_17","17_26","18_18","18_26","19_19","1_1","1_10","1_2","20_20","20_26","21_21","21_23","21_26","22_22","23_23","24_24","24_26","25_25","25_26","26_26","27_27","2_10","2_2","3_10","3_3","4_10","4_4","4_7","5_5","5_6","6_6","7_7","8_10","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Temporal_collocation"]] binary;
var z1[Assignment["Statement"]] binary;
var z2[Assignment["Possession"]] binary;
var z3[Assignment["Quantity"]] binary;
var z4[Assignment["Weapon"]] binary;
var z5[Assignment["Store"]] binary;
var z6[Assignment["Leadership"]] binary;
var z7[Assignment["Certainty"]] binary;
var z8[Assignment["Reveal_secret"]] binary;
var z9[Assignment["Completeness"]] binary;
var z10[Assignment["Scope"]] binary;
var z11[Assignment["Project"]] binary;
param probabilities0[Assignment["Temporal_collocation"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Statement"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Possession"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Quantity"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Weapon"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Store"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Leadership"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Certainty"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Reveal_secret"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Completeness"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Scope"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;
param probabilities11[Assignment["Project"]] := read "../frameData/frame11.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Temporal_collocation"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Statement"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Possession"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Quantity"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Weapon"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Store"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Leadership"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Certainty"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Reveal_secret"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Completeness"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Scope"] : probabilities10[r,s] * z10[r,s])+(sum <r,s> in Assignment["Project"] : probabilities11[r,s] * z11[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 27};
set G[I] := <0> {"0_0","0_10","0_27"}, <1> {"0_10","0_27","1_1","1_10","1_2"}, <2> {"0_10","0_27","1_10","1_2","2_10","2_2"}, <3> {"0_10","0_27","1_10","2_10","3_10","3_3"}, <4> {"0_10","0_27","1_10","2_10","3_10","4_10","4_4","4_7"}, <5> {"0_10","0_27","1_10","2_10","3_10","4_10","4_7","5_5","5_6"}, <6> {"0_10","0_27","1_10","2_10","3_10","4_10","4_7","5_6","6_6"}, <7> {"0_10","0_27","1_10","2_10","3_10","4_10","4_7","7_7"}, <8> {"0_10","0_27","1_10","2_10","3_10","4_10","8_10","8_8"}, <9> {"0_10","0_27","1_10","2_10","3_10","4_10","8_10","9_9"}, <10> {"0_10","0_27","10_10","1_10","2_10","3_10","4_10","8_10"}, <11> {"0_27","11_11"}, <12> {"0_27","12_12","12_14"}, <13> {"0_27","12_14","13_13"}, <14> {"0_27","12_14","14_14"}, <15> {"0_27","15_15"}, <16> {"0_27","16_16","16_26"}, <17> {"0_27","16_26","17_17","17_26"}, <18> {"0_27","16_26","17_26","18_18","18_26"}, <19> {"0_27","16_26","17_26","18_26","19_19"}, <20> {"0_27","16_26","17_26","18_26","20_20","20_26"}, <21> {"0_27","16_26","17_26","18_26","20_26","21_21","21_23","21_26"}, <22> {"0_27","16_26","17_26","18_26","20_26","21_23","21_26","22_22"}, <23> {"0_27","16_26","17_26","18_26","20_26","21_23","21_26","23_23"}, <24> {"0_27","16_26","17_26","18_26","20_26","21_26","24_24","24_26"}, <25> {"0_27","16_26","17_26","18_26","20_26","21_26","24_26","25_25","25_26"}, <26> {"0_27","16_26","17_26","18_26","20_26","21_26","24_26","25_26","26_26"}, <27> {"0_27","27_27"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Temporal_collocation"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Statement"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Possession"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Quantity"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Store"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Leadership"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Certainty"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Reveal_secret"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Completeness"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Scope"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
subto overlap11: forall <i> in I do 
 sum <r> in Roles["Project"] do 
 sum <s> in G[i] do z11[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Temporal_collocation"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Statement"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Possession"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Quantity"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Weapon"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Store"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Leadership"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Certainty"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Reveal_secret"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Completeness"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Scope"] do sum <s> in Spans : z10[r,s] == 1;
subto unique11: forall <r> in Roles["Project"] do sum <s> in Spans : z11[r,s] == 1;
#pairwise exclusion constraint
set Exc0 := {<"Trajector_event","Trajector_period">,<"Landmark_entity","Landmark_event">,<"Landmark_event","Landmark_period">,<"Trajector_entity","Trajector_event">};
subto exclusion0: forall <ri,rj> in Exc0 do z0[ri,"-1_-1"] + z0[rj,"-1_-1"] >= 1;
set Exc3 := {<"Individuals","Mass">};
subto exclusion3: forall <ri,rj> in Exc3 do z3[ri,"-1_-1"] + z3[rj,"-1_-1"] >= 1;
set Exc10 := {<"Event","Salient_entity">};
subto exclusion10: forall <ri,rj> in Exc10 do z10[ri,"-1_-1"] + z10[rj,"-1_-1"] >= 1;
set Exc11 := {<"Activity","Salient_entity">};
subto exclusion11: forall <ri,rj> in Exc11 do z11[ri,"-1_-1"] + z11[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
