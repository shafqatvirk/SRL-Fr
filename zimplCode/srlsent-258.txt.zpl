# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Accoutrements","Text","Statement","Commerce_sell","Substance","Fields","Hostile_encounter","Supply","Substance","Weapon","Hostile_encounter","Active_substance"};
set Roles[Frames] :=  <"Accoutrements"> {"Use","Wearer","Part","Descriptor","Accoutrement","Material","Style","Body_location"}, <"Text"> {"Topic","Honoree","Use","Author","Containing_text","Genre","Material","Components","Time_of_creation","Title","Text","Medium"}, <"Statement"> {"Message","Medium","Place","Iteration","Means","Depictive","Manner","Epistemic_stance","Speaker","Event_description","Addressee","Time","Containing_event","Degree","Occasion","Group","Frequency","Particular_iteration","Internal_cause","Topic"}, <"Commerce_sell"> {"Purpose","Result","Unit","Purpose_of_Goods","Goods","Place","Seller","Rate","Manner","Relay","Buyer","Means","Time","Money"}, <"Substance"> {"Source","Type","Use","Descriptor","Substance","Constituents"}, <"Fields"> {"Practitioner","Time","Type","Work","Place","Salient_entity","Activity"}, <"Hostile_encounter"> {"Purpose","Result","Depictive","Instrument","Place","Degree","Means","Internal_cause","Reason","Particular_iteration","Duration","Sides","Issue","Side_2","Side_1","Manner","Time"}, <"Supply"> {"Recipient","Circumstances","Time","Supplier","Place","Co_theme","Purpose","Period_of_iterations","Means","Source","Theme","Purpose_of_recipient","Manner"}, <"Substance"> {"Source","Type","Use","Descriptor","Substance","Constituents"}, <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Hostile_encounter"> {"Purpose","Result","Depictive","Instrument","Place","Degree","Means","Internal_cause","Reason","Particular_iteration","Duration","Sides","Issue","Side_2","Side_1","Manner","Time"}, <"Active_substance"> {"Name","Type","Substance","Descriptor","Effect"};
set Spans := {"-1_-1","0_0","0_1","0_38","10_10","11_11","11_14","12_12","12_14","13_13","14_14","15_15","15_37","16_16","16_20","16_37","17_17","18_18","19_19","1_1","20_20","21_21","21_37","22_22","23_23","23_37","24_24","24_37","25_25","26_26","26_28","27_27","27_28","28_28","29_29","29_37","2_2","2_38","30_30","30_37","31_31","31_37","32_32","32_33","32_37","33_33","34_34","34_37","35_35","35_37","36_36","37_37","38_38","3_3","3_37","4_4","5_10","5_5","6_10","6_6","7_7","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Accoutrements"]] binary;
var z1[Assignment["Text"]] binary;
var z2[Assignment["Statement"]] binary;
var z3[Assignment["Commerce_sell"]] binary;
var z4[Assignment["Substance"]] binary;
var z5[Assignment["Fields"]] binary;
var z6[Assignment["Hostile_encounter"]] binary;
var z7[Assignment["Supply"]] binary;
var z8[Assignment["Substance"]] binary;
var z9[Assignment["Weapon"]] binary;
var z10[Assignment["Hostile_encounter"]] binary;
var z11[Assignment["Active_substance"]] binary;
param probabilities0[Assignment["Accoutrements"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Text"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Statement"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Commerce_sell"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Substance"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Fields"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Hostile_encounter"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Supply"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Substance"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Weapon"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Hostile_encounter"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;
param probabilities11[Assignment["Active_substance"]] := read "../frameData/frame11.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Accoutrements"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Text"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Statement"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Commerce_sell"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Substance"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Fields"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Hostile_encounter"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Supply"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Substance"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Weapon"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Hostile_encounter"] : probabilities10[r,s] * z10[r,s])+(sum <r,s> in Assignment["Active_substance"] : probabilities11[r,s] * z11[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 38};
set G[I] := <0> {"0_0","0_1","0_38"}, <1> {"0_1","0_38","1_1"}, <2> {"0_38","2_2","2_38"}, <3> {"0_38","2_38","3_3","3_37"}, <4> {"0_38","2_38","3_37","4_4"}, <5> {"0_38","2_38","3_37","5_10","5_5"}, <6> {"0_38","2_38","3_37","5_10","6_10","6_6"}, <7> {"0_38","2_38","3_37","5_10","6_10","7_7"}, <8> {"0_38","2_38","3_37","5_10","6_10","8_8"}, <9> {"0_38","2_38","3_37","5_10","6_10","9_9"}, <10> {"0_38","10_10","2_38","3_37","5_10","6_10"}, <11> {"0_38","11_11","11_14","2_38","3_37"}, <12> {"0_38","11_14","12_12","12_14","2_38","3_37"}, <13> {"0_38","11_14","12_14","13_13","2_38","3_37"}, <14> {"0_38","11_14","12_14","14_14","2_38","3_37"}, <15> {"0_38","15_15","15_37","2_38","3_37"}, <16> {"0_38","15_37","16_16","16_20","16_37","2_38","3_37"}, <17> {"0_38","15_37","16_20","16_37","17_17","2_38","3_37"}, <18> {"0_38","15_37","16_20","16_37","18_18","2_38","3_37"}, <19> {"0_38","15_37","16_20","16_37","19_19","2_38","3_37"}, <20> {"0_38","15_37","16_20","16_37","20_20","2_38","3_37"}, <21> {"0_38","15_37","16_37","21_21","21_37","2_38","3_37"}, <22> {"0_38","15_37","16_37","21_37","22_22","2_38","3_37"}, <23> {"0_38","15_37","16_37","21_37","23_23","23_37","2_38","3_37"}, <24> {"0_38","15_37","16_37","21_37","23_37","24_24","24_37","2_38","3_37"}, <25> {"0_38","15_37","16_37","21_37","23_37","24_37","25_25","2_38","3_37"}, <26> {"0_38","15_37","16_37","21_37","23_37","24_37","26_26","26_28","2_38","3_37"}, <27> {"0_38","15_37","16_37","21_37","23_37","24_37","26_28","27_27","27_28","2_38","3_37"}, <28> {"0_38","15_37","16_37","21_37","23_37","24_37","26_28","27_28","28_28","2_38","3_37"}, <29> {"0_38","15_37","16_37","21_37","23_37","24_37","29_29","29_37","2_38","3_37"}, <30> {"0_38","15_37","16_37","21_37","23_37","24_37","29_37","2_38","30_30","30_37","3_37"}, <31> {"0_38","15_37","16_37","21_37","23_37","24_37","29_37","2_38","30_37","31_31","31_37","3_37"}, <32> {"0_38","15_37","16_37","21_37","23_37","24_37","29_37","2_38","30_37","31_37","32_32","32_33","32_37","3_37"}, <33> {"0_38","15_37","16_37","21_37","23_37","24_37","29_37","2_38","30_37","31_37","32_33","32_37","33_33","3_37"}, <34> {"0_38","15_37","16_37","21_37","23_37","24_37","29_37","2_38","30_37","31_37","32_37","34_34","34_37","3_37"}, <35> {"0_38","15_37","16_37","21_37","23_37","24_37","29_37","2_38","30_37","31_37","32_37","34_37","35_35","35_37","3_37"}, <36> {"0_38","15_37","16_37","21_37","23_37","24_37","29_37","2_38","30_37","31_37","32_37","34_37","35_37","36_36","3_37"}, <37> {"0_38","15_37","16_37","21_37","23_37","24_37","29_37","2_38","30_37","31_37","32_37","34_37","35_37","37_37","3_37"}, <38> {"0_38","2_38","38_38"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Accoutrements"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Text"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Statement"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Commerce_sell"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Substance"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Fields"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Hostile_encounter"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Supply"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Substance"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Hostile_encounter"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
subto overlap11: forall <i> in I do 
 sum <r> in Roles["Active_substance"] do 
 sum <s> in G[i] do z11[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Accoutrements"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Text"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Statement"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Commerce_sell"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Substance"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Fields"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Hostile_encounter"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Supply"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Substance"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Weapon"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Hostile_encounter"] do sum <s> in Spans : z10[r,s] == 1;
subto unique11: forall <r> in Roles["Active_substance"] do sum <s> in Spans : z11[r,s] == 1;
#pairwise exclusion constraint
set Exc6 := {<"Side_1","Sides">,<"Side_2","Sides">};
subto exclusion6: forall <ri,rj> in Exc6 do z6[ri,"-1_-1"] + z6[rj,"-1_-1"] >= 1;
set Exc10 := {<"Side_1","Sides">,<"Side_2","Sides">};
subto exclusion10: forall <ri,rj> in Exc10 do z10[ri,"-1_-1"] + z10[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
set Reqr6 := {<"Side_1","Side_2">};
subto require6: forall <ri,rj> in Reqr6 do z6[ri,"-1_-1"] - z6[rj,"-1_-1"] == 0;
set Reqr10 := {<"Side_1","Side_2">};
subto require10: forall <ri,rj> in Reqr10 do z10[ri,"-1_-1"] - z10[rj,"-1_-1"] == 0;
