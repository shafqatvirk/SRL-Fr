# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Membership","Weapon","Artifact","Control","Leadership"};
set Roles[Frames] :=  <"Membership"> {"Member","Standing","Group"}, <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Artifact"> {"Creator","Type","Use","Material","Time_of_creation","Name","Artifact"}, <"Control"> {"Manner","Time","Controlling_entity","Dependent_situation","Dependent_entity"}, <"Leadership"> {"Domain","Leader","Type","Depictive","Descriptor","Degree","Means","Role","Activity","Duration","Governed","Manner","Time"};
set Spans := {"-1_-1","0_0","0_9","1_1","1_2","1_8","2_2","3_3","3_8","4_4","4_8","5_5","6_6","7_7","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Membership"]] binary;
var z1[Assignment["Weapon"]] binary;
var z2[Assignment["Artifact"]] binary;
var z3[Assignment["Control"]] binary;
var z4[Assignment["Leadership"]] binary;
param probabilities0[Assignment["Membership"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Weapon"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Artifact"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Control"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Leadership"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Membership"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Weapon"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Artifact"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Control"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Leadership"] : probabilities4[r,s] * z4[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 9};
set G[I] := <0> {"0_0","0_9"}, <1> {"0_9","1_1","1_2","1_8"}, <2> {"0_9","1_2","1_8","2_2"}, <3> {"0_9","1_8","3_3","3_8"}, <4> {"0_9","1_8","3_8","4_4","4_8"}, <5> {"0_9","1_8","3_8","4_8","5_5"}, <6> {"0_9","1_8","3_8","4_8","6_6"}, <7> {"0_9","1_8","3_8","4_8","7_7"}, <8> {"0_9","1_8","3_8","4_8","8_8"}, <9> {"0_9","9_9"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Membership"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Artifact"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Control"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Leadership"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Membership"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Weapon"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Artifact"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Control"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Leadership"] do sum <s> in Spans : z4[r,s] == 1;
#pairwise exclusion constraint
#pairwise requirement constraint
