# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Participation","Quantity","Increment","Commerce_sell","Participation","Weapon","Artifact","Causation","Quantity","Origin","Businesses","People","Confronting_problem","Origin","Revenge"};
set Roles[Frames] :=  <"Participation"> {"Purpose","Time","Place","Institution","Participants","Event","Means","Participant_2","Participant_1","Duration","Degree_of_involvement","Manner"}, <"Quantity"> {"Mass","Q_Prop","Degree","Quantity","Individuals"}, <"Increment"> {"Initial_set","Class","Increment","Added_set"}, <"Commerce_sell"> {"Purpose","Result","Unit","Purpose_of_Goods","Goods","Place","Seller","Rate","Manner","Relay","Buyer","Means","Time","Money"}, <"Participation"> {"Purpose","Time","Place","Institution","Participants","Event","Means","Participant_2","Participant_1","Duration","Degree_of_involvement","Manner"}, <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Artifact"> {"Creator","Type","Use","Material","Time_of_creation","Name","Artifact"}, <"Causation"> {"Circumstances","Time","Actor","Place","Frequency","Means","Effect","Cause","Reason","Affected","Manner","Concessive","Explanation"}, <"Quantity"> {"Mass","Q_Prop","Degree","Quantity","Individuals"}, <"Origin"> {"Entity","Origin"}, <"Businesses"> {"Descriptor","Business_Name","Service_provider","Business","Place","Product","Proprietor"}, <"People"> {"Person","Ethnicity","Persistent_characteristic","Context_of_acquaintance","Descriptor","Age","Origin"}, <"Confronting_problem"> {"Agent","Means","Issue","Particular_iteration","Frequency"}, <"Origin"> {"Entity","Origin"}, <"Revenge"> {"Purpose","Avenger","Depictive","Offender","Instrument","Place","Degree","Injury","Duration","Punishment","Injured_Party","Manner","Time"};
set Spans := {"-1_-1","0_0","0_14","0_29","10_10","11_11","12_12","12_14","13_13","13_14","14_14","15_15","16_16","16_18","17_17","17_18","18_18","19_19","1_1","1_14","20_20","20_24","21_21","22_22","23_23","24_24","25_25","26_26","26_28","27_27","27_28","28_28","29_29","2_2","3_14","3_3","4_10","4_4","5_10","5_5","6_10","6_6","6_8","7_7","8_8","9_10","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Participation"]] binary;
var z1[Assignment["Quantity"]] binary;
var z2[Assignment["Increment"]] binary;
var z3[Assignment["Commerce_sell"]] binary;
var z4[Assignment["Participation"]] binary;
var z5[Assignment["Weapon"]] binary;
var z6[Assignment["Artifact"]] binary;
var z7[Assignment["Causation"]] binary;
var z8[Assignment["Quantity"]] binary;
var z9[Assignment["Origin"]] binary;
var z10[Assignment["Businesses"]] binary;
var z11[Assignment["People"]] binary;
var z12[Assignment["Confronting_problem"]] binary;
var z13[Assignment["Origin"]] binary;
var z14[Assignment["Revenge"]] binary;
param probabilities0[Assignment["Participation"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Quantity"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Increment"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Commerce_sell"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Participation"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Weapon"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Artifact"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Causation"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Quantity"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Origin"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Businesses"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;
param probabilities11[Assignment["People"]] := read "../frameData/frame11.txt" as "<1s,2s> 3n" skip 2;
param probabilities12[Assignment["Confronting_problem"]] := read "../frameData/frame12.txt" as "<1s,2s> 3n" skip 2;
param probabilities13[Assignment["Origin"]] := read "../frameData/frame13.txt" as "<1s,2s> 3n" skip 2;
param probabilities14[Assignment["Revenge"]] := read "../frameData/frame14.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Participation"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Quantity"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Increment"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Commerce_sell"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Participation"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Weapon"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Artifact"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Causation"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Quantity"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Origin"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Businesses"] : probabilities10[r,s] * z10[r,s])+(sum <r,s> in Assignment["People"] : probabilities11[r,s] * z11[r,s])+(sum <r,s> in Assignment["Confronting_problem"] : probabilities12[r,s] * z12[r,s])+(sum <r,s> in Assignment["Origin"] : probabilities13[r,s] * z13[r,s])+(sum <r,s> in Assignment["Revenge"] : probabilities14[r,s] * z14[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 29};
set G[I] := <0> {"0_0","0_14","0_29"}, <1> {"0_14","0_29","1_1","1_14"}, <2> {"0_14","0_29","1_14","2_2"}, <3> {"0_14","0_29","1_14","3_14","3_3"}, <4> {"0_14","0_29","1_14","3_14","4_10","4_4"}, <5> {"0_14","0_29","1_14","3_14","4_10","5_10","5_5"}, <6> {"0_14","0_29","1_14","3_14","4_10","5_10","6_10","6_6","6_8"}, <7> {"0_14","0_29","1_14","3_14","4_10","5_10","6_10","6_8","7_7"}, <8> {"0_14","0_29","1_14","3_14","4_10","5_10","6_10","6_8","8_8"}, <9> {"0_14","0_29","1_14","3_14","4_10","5_10","6_10","9_10","9_9"}, <10> {"0_14","0_29","10_10","1_14","3_14","4_10","5_10","6_10","9_10"}, <11> {"0_14","0_29","11_11","1_14","3_14"}, <12> {"0_14","0_29","12_12","12_14","1_14","3_14"}, <13> {"0_14","0_29","12_14","13_13","13_14","1_14","3_14"}, <14> {"0_14","0_29","12_14","13_14","14_14","1_14","3_14"}, <15> {"0_29","15_15"}, <16> {"0_29","16_16","16_18"}, <17> {"0_29","16_18","17_17","17_18"}, <18> {"0_29","16_18","17_18","18_18"}, <19> {"0_29","19_19"}, <20> {"0_29","20_20","20_24"}, <21> {"0_29","20_24","21_21"}, <22> {"0_29","20_24","22_22"}, <23> {"0_29","20_24","23_23"}, <24> {"0_29","20_24","24_24"}, <25> {"0_29","25_25"}, <26> {"0_29","26_26","26_28"}, <27> {"0_29","26_28","27_27","27_28"}, <28> {"0_29","26_28","27_28","28_28"}, <29> {"0_29","29_29"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Participation"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Quantity"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Increment"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Commerce_sell"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Participation"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Artifact"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Causation"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Quantity"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Origin"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Businesses"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
subto overlap11: forall <i> in I do 
 sum <r> in Roles["People"] do 
 sum <s> in G[i] do z11[r,s] <= 1;
subto overlap12: forall <i> in I do 
 sum <r> in Roles["Confronting_problem"] do 
 sum <s> in G[i] do z12[r,s] <= 1;
subto overlap13: forall <i> in I do 
 sum <r> in Roles["Origin"] do 
 sum <s> in G[i] do z13[r,s] <= 1;
subto overlap14: forall <i> in I do 
 sum <r> in Roles["Revenge"] do 
 sum <s> in G[i] do z14[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Participation"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Quantity"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Increment"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Commerce_sell"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Participation"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Weapon"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Artifact"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Causation"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Quantity"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Origin"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Businesses"] do sum <s> in Spans : z10[r,s] == 1;
subto unique11: forall <r> in Roles["People"] do sum <s> in Spans : z11[r,s] == 1;
subto unique12: forall <r> in Roles["Confronting_problem"] do sum <s> in Spans : z12[r,s] == 1;
subto unique13: forall <r> in Roles["Origin"] do sum <s> in Spans : z13[r,s] == 1;
subto unique14: forall <r> in Roles["Revenge"] do sum <s> in Spans : z14[r,s] == 1;
#pairwise exclusion constraint
set Exc0 := {<"Event","Institution">,<"Participant_2","Participants">,<"Participant_1","Participants">};
subto exclusion0: forall <ri,rj> in Exc0 do z0[ri,"-1_-1"] + z0[rj,"-1_-1"] >= 1;
set Exc1 := {<"Individuals","Mass">};
subto exclusion1: forall <ri,rj> in Exc1 do z1[ri,"-1_-1"] + z1[rj,"-1_-1"] >= 1;
set Exc4 := {<"Event","Institution">,<"Participant_2","Participants">,<"Participant_1","Participants">};
subto exclusion4: forall <ri,rj> in Exc4 do z4[ri,"-1_-1"] + z4[rj,"-1_-1"] >= 1;
set Exc8 := {<"Individuals","Mass">};
subto exclusion8: forall <ri,rj> in Exc8 do z8[ri,"-1_-1"] + z8[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
