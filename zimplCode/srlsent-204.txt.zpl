# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Leadership","Leadership","Aggregate","Leadership","People","Being_employed","Difficulty","Hostile_encounter","Organization","Quantity","Arriving","Money","Leadership","Fame"};
set Roles[Frames] :=  <"Leadership"> {"Domain","Leader","Type","Depictive","Descriptor","Degree","Means","Role","Activity","Duration","Governed","Manner","Time"}, <"Leadership"> {"Domain","Leader","Type","Depictive","Descriptor","Degree","Means","Role","Activity","Duration","Governed","Manner","Time"}, <"Aggregate"> {"Individuals","AggregateProperty","Aggregate","Name","Domain","Container_possessor"}, <"Leadership"> {"Domain","Leader","Type","Depictive","Descriptor","Degree","Means","Role","Activity","Duration","Governed","Manner","Time"}, <"People"> {"Person","Ethnicity","Persistent_characteristic","Context_of_acquaintance","Descriptor","Age","Origin"}, <"Being_employed"> {"Type","Rank","Time","Place","Field","Employer","Place_of_employment","Amount_of_work","Compensation","Event_description","Duration","Frequency","Task","Employee","Contract_basis","Manner","Position"}, <"Difficulty"> {"Time","Standard","Parameter","Circumstances","Experiencer","Degree","Activity"}, <"Hostile_encounter"> {"Purpose","Result","Depictive","Instrument","Place","Degree","Means","Internal_cause","Reason","Particular_iteration","Duration","Sides","Issue","Side_2","Side_1","Manner","Time"}, <"Organization"> {"Period_of_existence","Members","Place","Name","Container_possessor","Organization","Purpose","Descriptor"}, <"Quantity"> {"Mass","Q_Prop","Degree","Quantity","Individuals"}, <"Arriving"> {"Theme","Cotheme","Means","Depictive","Circumstances","Manner","Time","Source","Period_of_iterations","Degree","Event_description","Re_encoding","Goal","Purpose","Goal_conditions","Path","Frequency","Mode_of_transportation"}, <"Money"> {"Possessor","Type","Use","Money","Time_of_creation","Origin"}, <"Leadership"> {"Domain","Leader","Type","Depictive","Descriptor","Degree","Means","Role","Activity","Duration","Governed","Manner","Time"}, <"Fame"> {"Time","Entity","Place","Role","Reason","Means","Degree"};
set Spans := {"-1_-1","0_0","0_10","0_17","0_3","0_46","0_8","0_9","10_10","10_17","11_11","11_17","12_12","12_13","12_17","13_13","13_17","14_14","14_15","14_17","15_15","16_16","16_17","17_17","18_18","19_19","19_20","1_1","20_20","21_21","22_22","22_23","23_23","24_24","24_29","25_25","25_29","26_26","27_27","27_28","28_28","29_29","2_2","30_30","31_31","31_35","32_32","32_35","33_33","33_34","33_35","34_34","34_35","35_35","36_36","37_37","37_45","38_38","39_39","39_45","3_3","40_40","40_43","40_45","41_41","42_42","43_43","44_44","44_45","45_45","46_46","4_4","5_5","5_7","6_6","6_7","7_7","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Leadership"]] binary;
var z1[Assignment["Leadership"]] binary;
var z2[Assignment["Aggregate"]] binary;
var z3[Assignment["Leadership"]] binary;
var z4[Assignment["People"]] binary;
var z5[Assignment["Being_employed"]] binary;
var z6[Assignment["Difficulty"]] binary;
var z7[Assignment["Hostile_encounter"]] binary;
var z8[Assignment["Organization"]] binary;
var z9[Assignment["Quantity"]] binary;
var z10[Assignment["Arriving"]] binary;
var z11[Assignment["Money"]] binary;
var z12[Assignment["Leadership"]] binary;
var z13[Assignment["Fame"]] binary;
param probabilities0[Assignment["Leadership"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Leadership"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Aggregate"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Leadership"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["People"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Being_employed"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Difficulty"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Hostile_encounter"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Organization"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Quantity"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Arriving"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;
param probabilities11[Assignment["Money"]] := read "../frameData/frame11.txt" as "<1s,2s> 3n" skip 2;
param probabilities12[Assignment["Leadership"]] := read "../frameData/frame12.txt" as "<1s,2s> 3n" skip 2;
param probabilities13[Assignment["Fame"]] := read "../frameData/frame13.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Leadership"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Leadership"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Aggregate"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Leadership"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["People"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Being_employed"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Difficulty"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Hostile_encounter"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Organization"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Quantity"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Arriving"] : probabilities10[r,s] * z10[r,s])+(sum <r,s> in Assignment["Money"] : probabilities11[r,s] * z11[r,s])+(sum <r,s> in Assignment["Leadership"] : probabilities12[r,s] * z12[r,s])+(sum <r,s> in Assignment["Fame"] : probabilities13[r,s] * z13[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 46};
set G[I] := <0> {"0_0","0_10","0_17","0_3","0_46","0_8","0_9"}, <1> {"0_10","0_17","0_3","0_46","0_8","0_9","1_1"}, <2> {"0_10","0_17","0_3","0_46","0_8","0_9","2_2"}, <3> {"0_10","0_17","0_3","0_46","0_8","0_9","3_3"}, <4> {"0_10","0_17","0_46","0_8","0_9","4_4"}, <5> {"0_10","0_17","0_46","0_8","0_9","5_5","5_7"}, <6> {"0_10","0_17","0_46","0_8","0_9","5_7","6_6","6_7"}, <7> {"0_10","0_17","0_46","0_8","0_9","5_7","6_7","7_7"}, <8> {"0_10","0_17","0_46","0_8","0_9","8_8"}, <9> {"0_10","0_17","0_46","0_9","9_9"}, <10> {"0_10","0_17","0_46","10_10","10_17"}, <11> {"0_17","0_46","10_17","11_11","11_17"}, <12> {"0_17","0_46","10_17","11_17","12_12","12_13","12_17"}, <13> {"0_17","0_46","10_17","11_17","12_13","12_17","13_13","13_17"}, <14> {"0_17","0_46","10_17","11_17","12_17","13_17","14_14","14_15","14_17"}, <15> {"0_17","0_46","10_17","11_17","12_17","13_17","14_15","14_17","15_15"}, <16> {"0_17","0_46","10_17","11_17","12_17","13_17","14_17","16_16","16_17"}, <17> {"0_17","0_46","10_17","11_17","12_17","13_17","14_17","16_17","17_17"}, <18> {"0_46","18_18"}, <19> {"0_46","19_19","19_20"}, <20> {"0_46","19_20","20_20"}, <21> {"0_46","21_21"}, <22> {"0_46","22_22","22_23"}, <23> {"0_46","22_23","23_23"}, <24> {"0_46","24_24","24_29"}, <25> {"0_46","24_29","25_25","25_29"}, <26> {"0_46","24_29","25_29","26_26"}, <27> {"0_46","24_29","25_29","27_27","27_28"}, <28> {"0_46","24_29","25_29","27_28","28_28"}, <29> {"0_46","24_29","25_29","29_29"}, <30> {"0_46","30_30"}, <31> {"0_46","31_31","31_35"}, <32> {"0_46","31_35","32_32","32_35"}, <33> {"0_46","31_35","32_35","33_33","33_34","33_35"}, <34> {"0_46","31_35","32_35","33_34","33_35","34_34","34_35"}, <35> {"0_46","31_35","32_35","33_35","34_35","35_35"}, <36> {"0_46","36_36"}, <37> {"0_46","37_37","37_45"}, <38> {"0_46","37_45","38_38"}, <39> {"0_46","37_45","39_39","39_45"}, <40> {"0_46","37_45","39_45","40_40","40_43","40_45"}, <41> {"0_46","37_45","39_45","40_43","40_45","41_41"}, <42> {"0_46","37_45","39_45","40_43","40_45","42_42"}, <43> {"0_46","37_45","39_45","40_43","40_45","43_43"}, <44> {"0_46","37_45","39_45","40_45","44_44","44_45"}, <45> {"0_46","37_45","39_45","40_45","44_45","45_45"}, <46> {"0_46","46_46"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Leadership"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Leadership"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Aggregate"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Leadership"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["People"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Being_employed"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Difficulty"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Hostile_encounter"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Organization"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Quantity"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Arriving"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
subto overlap11: forall <i> in I do 
 sum <r> in Roles["Money"] do 
 sum <s> in G[i] do z11[r,s] <= 1;
subto overlap12: forall <i> in I do 
 sum <r> in Roles["Leadership"] do 
 sum <s> in G[i] do z12[r,s] <= 1;
subto overlap13: forall <i> in I do 
 sum <r> in Roles["Fame"] do 
 sum <s> in G[i] do z13[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Leadership"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Leadership"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Aggregate"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Leadership"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["People"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Being_employed"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Difficulty"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Hostile_encounter"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Organization"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Quantity"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Arriving"] do sum <s> in Spans : z10[r,s] == 1;
subto unique11: forall <r> in Roles["Money"] do sum <s> in Spans : z11[r,s] == 1;
subto unique12: forall <r> in Roles["Leadership"] do sum <s> in Spans : z12[r,s] == 1;
subto unique13: forall <r> in Roles["Fame"] do sum <s> in Spans : z13[r,s] == 1;
#pairwise exclusion constraint
set Exc7 := {<"Side_1","Sides">,<"Side_2","Sides">};
subto exclusion7: forall <ri,rj> in Exc7 do z7[ri,"-1_-1"] + z7[rj,"-1_-1"] >= 1;
set Exc9 := {<"Individuals","Mass">};
subto exclusion9: forall <ri,rj> in Exc9 do z9[ri,"-1_-1"] + z9[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
set Reqr7 := {<"Side_1","Side_2">};
subto require7: forall <ri,rj> in Reqr7 do z7[ri,"-1_-1"] - z7[rj,"-1_-1"] == 0;
