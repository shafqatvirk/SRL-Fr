# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Statement","Commerce_pay","Idiosyncrasy","Attention","Eventive_affecting","Food","Medical_specialties","Arriving","Political_locales","Topic","Substance","Project"};
set Roles[Frames] :=  <"Statement"> {"Message","Medium","Place","Iteration","Means","Depictive","Manner","Epistemic_stance","Speaker","Event_description","Addressee","Time","Containing_event","Degree","Occasion","Group","Frequency","Particular_iteration","Internal_cause","Topic"}, <"Commerce_pay"> {"Purpose","Circumstances","Time","Goods","Frequency","Seller","Rate","Reason","Manner","Buyer","Means","Money"}, <"Idiosyncrasy"> {"Degree","Entity","Idiosyncrasy"}, <"Attention"> {"Figure","Perceiver","Circumstances","Manner","Degree","Expressor"}, <"Eventive_affecting"> {"Event","Time","Frequency","Entity"}, <"Food"> {"Type","Descriptor","Food","Constituent_parts"}, <"Medical_specialties"> {"Specialty","Type"}, <"Arriving"> {"Theme","Cotheme","Means","Depictive","Circumstances","Manner","Time","Source","Period_of_iterations","Degree","Event_description","Re_encoding","Goal","Purpose","Goal_conditions","Path","Frequency","Mode_of_transportation"}, <"Political_locales"> {"Relative_location","Constituent_parts","Container_possessor","Descriptor","Name","Population","Locale"}, <"Topic"> {"Text","Topic","Manner","Status","Communicator","Degree"}, <"Substance"> {"Source","Type","Use","Descriptor","Substance","Constituents"}, <"Project"> {"Salient_entity","Duration","Agent","Goal","Manner","Name","Project","Field","Descriptor","Activity"};
set Spans := {"-1_-1","0_0","0_22","10_10","10_21","11_11","11_13","11_21","12_12","13_13","14_14","14_21","15_15","15_16","16_16","17_17","17_21","18_18","18_21","19_19","1_1","1_22","20_20","21_21","22_22","2_2","2_21","2_3","3_21","3_3","4_21","4_4","5_5","5_6","6_6","7_21","7_7","8_21","8_8","9_21","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Statement"]] binary;
var z1[Assignment["Commerce_pay"]] binary;
var z2[Assignment["Idiosyncrasy"]] binary;
var z3[Assignment["Attention"]] binary;
var z4[Assignment["Eventive_affecting"]] binary;
var z5[Assignment["Food"]] binary;
var z6[Assignment["Medical_specialties"]] binary;
var z7[Assignment["Arriving"]] binary;
var z8[Assignment["Political_locales"]] binary;
var z9[Assignment["Topic"]] binary;
var z10[Assignment["Substance"]] binary;
var z11[Assignment["Project"]] binary;
param probabilities0[Assignment["Statement"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Commerce_pay"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Idiosyncrasy"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Attention"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Eventive_affecting"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Food"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Medical_specialties"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Arriving"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Political_locales"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Topic"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Substance"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;
param probabilities11[Assignment["Project"]] := read "../frameData/frame11.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Statement"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Commerce_pay"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Idiosyncrasy"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Attention"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Eventive_affecting"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Food"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Medical_specialties"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Arriving"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Political_locales"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Topic"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Substance"] : probabilities10[r,s] * z10[r,s])+(sum <r,s> in Assignment["Project"] : probabilities11[r,s] * z11[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 22};
set G[I] := <0> {"0_0","0_22"}, <1> {"0_22","1_1","1_22"}, <2> {"0_22","1_22","2_2","2_21","2_3"}, <3> {"0_22","1_22","2_21","2_3","3_21","3_3"}, <4> {"0_22","1_22","2_21","3_21","4_21","4_4"}, <5> {"0_22","1_22","2_21","3_21","4_21","5_5","5_6"}, <6> {"0_22","1_22","2_21","3_21","4_21","5_6","6_6"}, <7> {"0_22","1_22","2_21","3_21","4_21","7_21","7_7"}, <8> {"0_22","1_22","2_21","3_21","4_21","7_21","8_21","8_8"}, <9> {"0_22","1_22","2_21","3_21","4_21","7_21","8_21","9_21","9_9"}, <10> {"0_22","10_10","10_21","1_22","2_21","3_21","4_21","7_21","8_21","9_21"}, <11> {"0_22","10_21","11_11","11_13","11_21","1_22","2_21","3_21","4_21","7_21","8_21","9_21"}, <12> {"0_22","10_21","11_13","11_21","12_12","1_22","2_21","3_21","4_21","7_21","8_21","9_21"}, <13> {"0_22","10_21","11_13","11_21","13_13","1_22","2_21","3_21","4_21","7_21","8_21","9_21"}, <14> {"0_22","10_21","11_21","14_14","14_21","1_22","2_21","3_21","4_21","7_21","8_21","9_21"}, <15> {"0_22","10_21","11_21","14_21","15_15","15_16","1_22","2_21","3_21","4_21","7_21","8_21","9_21"}, <16> {"0_22","10_21","11_21","14_21","15_16","16_16","1_22","2_21","3_21","4_21","7_21","8_21","9_21"}, <17> {"0_22","10_21","11_21","14_21","17_17","17_21","1_22","2_21","3_21","4_21","7_21","8_21","9_21"}, <18> {"0_22","10_21","11_21","14_21","17_21","18_18","18_21","1_22","2_21","3_21","4_21","7_21","8_21","9_21"}, <19> {"0_22","10_21","11_21","14_21","17_21","18_21","19_19","1_22","2_21","3_21","4_21","7_21","8_21","9_21"}, <20> {"0_22","10_21","11_21","14_21","17_21","18_21","1_22","20_20","2_21","3_21","4_21","7_21","8_21","9_21"}, <21> {"0_22","10_21","11_21","14_21","17_21","18_21","1_22","21_21","2_21","3_21","4_21","7_21","8_21","9_21"}, <22> {"0_22","1_22","22_22"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Statement"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Commerce_pay"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Idiosyncrasy"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Attention"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Eventive_affecting"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Food"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Medical_specialties"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Arriving"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Political_locales"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Topic"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Substance"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
subto overlap11: forall <i> in I do 
 sum <r> in Roles["Project"] do 
 sum <s> in G[i] do z11[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Statement"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Commerce_pay"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Idiosyncrasy"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Attention"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Eventive_affecting"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Food"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Medical_specialties"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Arriving"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Political_locales"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Topic"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Substance"] do sum <s> in Spans : z10[r,s] == 1;
subto unique11: forall <r> in Roles["Project"] do sum <s> in Spans : z11[r,s] == 1;
#pairwise exclusion constraint
set Exc3 := {<"Expressor","Perceiver">};
subto exclusion3: forall <ri,rj> in Exc3 do z3[ri,"-1_-1"] + z3[rj,"-1_-1"] >= 1;
set Exc11 := {<"Activity","Salient_entity">};
subto exclusion11: forall <ri,rj> in Exc11 do z11[ri,"-1_-1"] + z11[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
