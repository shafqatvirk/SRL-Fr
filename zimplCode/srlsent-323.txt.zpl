# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Possession","Trust","Information","Causation","Certainty","Capability","Secrecy_status","Project"};
set Roles[Frames] :=  <"Possession"> {"Explanation","Time","Owner","Possession","Duration","Manner","Depictive"}, <"Trust"> {"Manner","Degree","Source","Information","Cognizer"}, <"Information"> {"Means_of_Gathering","Source","Topic","Information","Cognizer"}, <"Causation"> {"Circumstances","Time","Actor","Place","Frequency","Means","Effect","Cause","Reason","Affected","Manner","Concessive","Explanation"}, <"Certainty"> {"Cognizer","Topic","Content","Manner","Explanation","Degree","Expressor","Concessive"}, <"Capability"> {"Degree","Status","Entity","Relevant_feature","Circumstances","Role","Event","Cause"}, <"Secrecy_status"> {"Time","Phenomenon","Degree","Epistemic_stance","Cognizer"}, <"Project"> {"Salient_entity","Duration","Agent","Goal","Manner","Name","Project","Field","Descriptor","Activity"};
set Spans := {"-1_-1","0_0","0_1","0_19","0_4","10_10","10_18","11_11","11_14","11_18","12_12","13_13","14_14","15_15","15_18","16_16","16_18","17_17","18_18","19_19","1_1","2_2","2_4","3_3","3_4","4_4","5_5","6_6","7_18","7_7","8_18","8_8","8_9","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Possession"]] binary;
var z1[Assignment["Trust"]] binary;
var z2[Assignment["Information"]] binary;
var z3[Assignment["Causation"]] binary;
var z4[Assignment["Certainty"]] binary;
var z5[Assignment["Capability"]] binary;
var z6[Assignment["Secrecy_status"]] binary;
var z7[Assignment["Project"]] binary;
param probabilities0[Assignment["Possession"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Trust"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Information"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Causation"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Certainty"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Capability"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Secrecy_status"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Project"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Possession"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Trust"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Information"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Causation"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Certainty"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Capability"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Secrecy_status"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Project"] : probabilities7[r,s] * z7[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 19};
set G[I] := <0> {"0_0","0_1","0_19","0_4"}, <1> {"0_1","0_19","0_4","1_1"}, <2> {"0_19","0_4","2_2","2_4"}, <3> {"0_19","0_4","2_4","3_3","3_4"}, <4> {"0_19","0_4","2_4","3_4","4_4"}, <5> {"0_19","5_5"}, <6> {"0_19","6_6"}, <7> {"0_19","7_18","7_7"}, <8> {"0_19","7_18","8_18","8_8","8_9"}, <9> {"0_19","7_18","8_18","8_9","9_9"}, <10> {"0_19","10_10","10_18","7_18","8_18"}, <11> {"0_19","10_18","11_11","11_14","11_18","7_18","8_18"}, <12> {"0_19","10_18","11_14","11_18","12_12","7_18","8_18"}, <13> {"0_19","10_18","11_14","11_18","13_13","7_18","8_18"}, <14> {"0_19","10_18","11_14","11_18","14_14","7_18","8_18"}, <15> {"0_19","10_18","11_18","15_15","15_18","7_18","8_18"}, <16> {"0_19","10_18","11_18","15_18","16_16","16_18","7_18","8_18"}, <17> {"0_19","10_18","11_18","15_18","16_18","17_17","7_18","8_18"}, <18> {"0_19","10_18","11_18","15_18","16_18","18_18","7_18","8_18"}, <19> {"0_19","19_19"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Possession"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Trust"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Information"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Causation"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Certainty"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Capability"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Secrecy_status"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Project"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Possession"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Trust"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Information"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Causation"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Certainty"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Capability"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Secrecy_status"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Project"] do sum <s> in Spans : z7[r,s] == 1;
#pairwise exclusion constraint
set Exc7 := {<"Activity","Salient_entity">};
subto exclusion7: forall <ri,rj> in Exc7 do z7[ri,"-1_-1"] + z7[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
