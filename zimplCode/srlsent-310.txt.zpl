# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Weapon","Leadership","Text","Documents","Part_orientational","Trust","Military","Possession","Cardinal_numbers","Cardinal_numbers","Measure_mass"};
set Roles[Frames] :=  <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Leadership"> {"Domain","Leader","Type","Depictive","Descriptor","Degree","Means","Role","Activity","Duration","Governed","Manner","Time"}, <"Text"> {"Topic","Honoree","Use","Author","Containing_text","Genre","Material","Components","Time_of_creation","Title","Text","Medium"}, <"Documents"> {"Obligation","Descriptor","Specification","Status","Issuer","Document","Bearer"}, <"Part_orientational"> {"Part_Prop","Part","Whole"}, <"Trust"> {"Manner","Degree","Source","Information","Cognizer"}, <"Military"> {"Members","Descriptor","Possessor","Goal","Domain","Force"}, <"Possession"> {"Explanation","Time","Owner","Possession","Duration","Manner","Depictive"}, <"Cardinal_numbers"> {"Precision","Number","Multiplier","Entity"}, <"Cardinal_numbers"> {"Precision","Number","Multiplier","Entity"}, <"Measure_mass"> {"Unit","Stuff","Count"};
set Spans := {"-1_-1","0_0","0_12","0_30","10_10","10_11","10_12","11_11","11_12","12_12","13_13","14_14","14_17","15_15","16_16","17_17","18_18","18_23","19_19","19_23","1_1","1_12","1_2","1_4","1_8","1_9","20_20","21_21","22_22","23_23","24_24","25_25","26_26","27_27","27_29","28_28","28_29","29_29","2_2","30_30","3_3","4_4","5_5","5_8","6_6","6_7","6_8","7_7","8_8","9_12","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Weapon"]] binary;
var z1[Assignment["Leadership"]] binary;
var z2[Assignment["Text"]] binary;
var z3[Assignment["Documents"]] binary;
var z4[Assignment["Part_orientational"]] binary;
var z5[Assignment["Trust"]] binary;
var z6[Assignment["Military"]] binary;
var z7[Assignment["Possession"]] binary;
var z8[Assignment["Cardinal_numbers"]] binary;
var z9[Assignment["Cardinal_numbers"]] binary;
var z10[Assignment["Measure_mass"]] binary;
param probabilities0[Assignment["Weapon"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Leadership"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Text"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Documents"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Part_orientational"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Trust"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Military"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Possession"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Cardinal_numbers"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Cardinal_numbers"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Measure_mass"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Weapon"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Leadership"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Text"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Documents"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Part_orientational"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Trust"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Military"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Possession"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Cardinal_numbers"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Cardinal_numbers"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Measure_mass"] : probabilities10[r,s] * z10[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 30};
set G[I] := <0> {"0_0","0_12","0_30"}, <1> {"0_12","0_30","1_1","1_12","1_2","1_4","1_8","1_9"}, <2> {"0_12","0_30","1_12","1_2","1_4","1_8","1_9","2_2"}, <3> {"0_12","0_30","1_12","1_4","1_8","1_9","3_3"}, <4> {"0_12","0_30","1_12","1_4","1_8","1_9","4_4"}, <5> {"0_12","0_30","1_12","1_8","1_9","5_5","5_8"}, <6> {"0_12","0_30","1_12","1_8","1_9","5_8","6_6","6_7","6_8"}, <7> {"0_12","0_30","1_12","1_8","1_9","5_8","6_7","6_8","7_7"}, <8> {"0_12","0_30","1_12","1_8","1_9","5_8","6_8","8_8"}, <9> {"0_12","0_30","1_12","1_9","9_12","9_9"}, <10> {"0_12","0_30","10_10","10_11","10_12","1_12","9_12"}, <11> {"0_12","0_30","10_11","10_12","11_11","11_12","1_12","9_12"}, <12> {"0_12","0_30","10_12","11_12","12_12","1_12","9_12"}, <13> {"0_30","13_13"}, <14> {"0_30","14_14","14_17"}, <15> {"0_30","14_17","15_15"}, <16> {"0_30","14_17","16_16"}, <17> {"0_30","14_17","17_17"}, <18> {"0_30","18_18","18_23"}, <19> {"0_30","18_23","19_19","19_23"}, <20> {"0_30","18_23","19_23","20_20"}, <21> {"0_30","18_23","19_23","21_21"}, <22> {"0_30","18_23","19_23","22_22"}, <23> {"0_30","18_23","19_23","23_23"}, <24> {"0_30","24_24"}, <25> {"0_30","25_25"}, <26> {"0_30","26_26"}, <27> {"0_30","27_27","27_29"}, <28> {"0_30","27_29","28_28","28_29"}, <29> {"0_30","27_29","28_29","29_29"}, <30> {"0_30","30_30"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Leadership"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Text"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Documents"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Part_orientational"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Trust"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Military"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Possession"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Cardinal_numbers"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Cardinal_numbers"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Measure_mass"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Weapon"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Leadership"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Text"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Documents"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Part_orientational"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Trust"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Military"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Possession"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Cardinal_numbers"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Cardinal_numbers"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Measure_mass"] do sum <s> in Spans : z10[r,s] == 1;
#pairwise exclusion constraint
#pairwise requirement constraint
