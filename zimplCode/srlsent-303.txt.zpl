# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Weapon","Calendric_unit","Statement","Removing","Quantity","Ingredients","Gizmo","Project","Prohibiting","Political_locales","Aggregate","Taking","Typicality","Intentionally_act","First_experience","Secrecy_status","Reveal_secret","Project","Temporal_collocation","Renunciation"};
set Roles[Frames] :=  <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Calendric_unit"> {"Relative_time","Unit","Count","Name","Salient_event","Whole"}, <"Statement"> {"Message","Medium","Place","Iteration","Means","Depictive","Manner","Epistemic_stance","Speaker","Event_description","Addressee","Time","Containing_event","Degree","Occasion","Group","Frequency","Particular_iteration","Internal_cause","Topic"}, <"Removing"> {"Direction","Subevent","Theme","Distance","Depictive","Circumstances","Agent","Manner","Means","Result","Explanation","Instrument","Cause","Time","Source","Degree","Place","Frequency","Goal","Vehicle","Particular_iteration","Path","Purpose"}, <"Quantity"> {"Mass","Q_Prop","Degree","Quantity","Individuals"}, <"Ingredients"> {"Source","Type","Use","Material","Product","Descriptor"}, <"Gizmo"> {"Descriptor","Power_source","Gizmo","Use","User"}, <"Project"> {"Salient_entity","Duration","Agent","Goal","Manner","Name","Project","Field","Descriptor","Activity"}, <"Prohibiting"> {"Explanation","Time","Place","Circumstances","Principle","State_of_affairs"}, <"Political_locales"> {"Relative_location","Constituent_parts","Container_possessor","Descriptor","Name","Population","Locale"}, <"Aggregate"> {"Individuals","AggregateProperty","Aggregate","Name","Domain","Container_possessor"}, <"Taking"> {"Place","Agent","Containing_event","Theme","Source","Manner","Time","Reason","Purpose"}, <"Typicality"> {"Feature","Comparison_set","Degree","Entity"}, <"Intentionally_act"> {"Purpose","Result","Time","Place","Frequency","Means","Event_dscription","Period_of_iterations","Domain","Act","Particular_iteration","Manner","Explanation","Agent"}, <"First_experience"> {"Experience","Context"}, <"Secrecy_status"> {"Time","Phenomenon","Degree","Epistemic_stance","Cognizer"}, <"Reveal_secret"> {"Medium","Place","Means","Depictive","Speaker","Location_of_protagonist","Manner","Completeness","Period_of_iterations","Information","Addressee","Time","Containing_event","Event_description","Frequency","Re-encoding","Internal_cause","Topic","Source_material"}, <"Project"> {"Salient_entity","Duration","Agent","Goal","Manner","Name","Project","Field","Descriptor","Activity"}, <"Temporal_collocation"> {"Event_description","Landmark_period","Trajector_entity","Landmark_entity","Landmark_event","Trajector_period","Trajector_event"}, <"Renunciation"> {"Content","Medium","Containing_event","Speaker","Manner","Time"};
set Spans := {"-1_-1","0_0","0_20","0_39","10_10","10_15","10_20","11_11","12_12","13_13","14_14","15_15","16_16","16_20","17_17","17_20","18_18","18_20","19_19","1_1","1_20","1_5","20_20","21_21","22_22","23_23","24_24","24_26","24_34","25_25","26_26","27_27","27_34","28_28","28_30","28_34","29_29","2_2","30_30","31_31","31_34","32_32","33_33","34_34","35_35","36_36","37_37","37_38","38_38","39_39","3_3","4_4","5_5","6_20","6_6","7_20","7_7","7_8","8_20","8_8","9_20","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Weapon"]] binary;
var z1[Assignment["Calendric_unit"]] binary;
var z2[Assignment["Statement"]] binary;
var z3[Assignment["Removing"]] binary;
var z4[Assignment["Quantity"]] binary;
var z5[Assignment["Ingredients"]] binary;
var z6[Assignment["Gizmo"]] binary;
var z7[Assignment["Project"]] binary;
var z8[Assignment["Prohibiting"]] binary;
var z9[Assignment["Political_locales"]] binary;
var z10[Assignment["Aggregate"]] binary;
var z11[Assignment["Taking"]] binary;
var z12[Assignment["Typicality"]] binary;
var z13[Assignment["Intentionally_act"]] binary;
var z14[Assignment["First_experience"]] binary;
var z15[Assignment["Secrecy_status"]] binary;
var z16[Assignment["Reveal_secret"]] binary;
var z17[Assignment["Project"]] binary;
var z18[Assignment["Temporal_collocation"]] binary;
var z19[Assignment["Renunciation"]] binary;
param probabilities0[Assignment["Weapon"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Calendric_unit"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Statement"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Removing"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Quantity"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Ingredients"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Gizmo"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Project"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Prohibiting"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Political_locales"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Aggregate"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;
param probabilities11[Assignment["Taking"]] := read "../frameData/frame11.txt" as "<1s,2s> 3n" skip 2;
param probabilities12[Assignment["Typicality"]] := read "../frameData/frame12.txt" as "<1s,2s> 3n" skip 2;
param probabilities13[Assignment["Intentionally_act"]] := read "../frameData/frame13.txt" as "<1s,2s> 3n" skip 2;
param probabilities14[Assignment["First_experience"]] := read "../frameData/frame14.txt" as "<1s,2s> 3n" skip 2;
param probabilities15[Assignment["Secrecy_status"]] := read "../frameData/frame15.txt" as "<1s,2s> 3n" skip 2;
param probabilities16[Assignment["Reveal_secret"]] := read "../frameData/frame16.txt" as "<1s,2s> 3n" skip 2;
param probabilities17[Assignment["Project"]] := read "../frameData/frame17.txt" as "<1s,2s> 3n" skip 2;
param probabilities18[Assignment["Temporal_collocation"]] := read "../frameData/frame18.txt" as "<1s,2s> 3n" skip 2;
param probabilities19[Assignment["Renunciation"]] := read "../frameData/frame19.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Weapon"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Calendric_unit"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Statement"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Removing"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Quantity"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Ingredients"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Gizmo"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Project"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Prohibiting"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Political_locales"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Aggregate"] : probabilities10[r,s] * z10[r,s])+(sum <r,s> in Assignment["Taking"] : probabilities11[r,s] * z11[r,s])+(sum <r,s> in Assignment["Typicality"] : probabilities12[r,s] * z12[r,s])+(sum <r,s> in Assignment["Intentionally_act"] : probabilities13[r,s] * z13[r,s])+(sum <r,s> in Assignment["First_experience"] : probabilities14[r,s] * z14[r,s])+(sum <r,s> in Assignment["Secrecy_status"] : probabilities15[r,s] * z15[r,s])+(sum <r,s> in Assignment["Reveal_secret"] : probabilities16[r,s] * z16[r,s])+(sum <r,s> in Assignment["Project"] : probabilities17[r,s] * z17[r,s])+(sum <r,s> in Assignment["Temporal_collocation"] : probabilities18[r,s] * z18[r,s])+(sum <r,s> in Assignment["Renunciation"] : probabilities19[r,s] * z19[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 39};
set G[I] := <0> {"0_0","0_20","0_39"}, <1> {"0_20","0_39","1_1","1_20","1_5"}, <2> {"0_20","0_39","1_20","1_5","2_2"}, <3> {"0_20","0_39","1_20","1_5","3_3"}, <4> {"0_20","0_39","1_20","1_5","4_4"}, <5> {"0_20","0_39","1_20","1_5","5_5"}, <6> {"0_20","0_39","1_20","6_20","6_6"}, <7> {"0_20","0_39","1_20","6_20","7_20","7_7","7_8"}, <8> {"0_20","0_39","1_20","6_20","7_20","7_8","8_20","8_8"}, <9> {"0_20","0_39","1_20","6_20","7_20","8_20","9_20","9_9"}, <10> {"0_20","0_39","10_10","10_15","10_20","1_20","6_20","7_20","8_20","9_20"}, <11> {"0_20","0_39","10_15","10_20","11_11","1_20","6_20","7_20","8_20","9_20"}, <12> {"0_20","0_39","10_15","10_20","12_12","1_20","6_20","7_20","8_20","9_20"}, <13> {"0_20","0_39","10_15","10_20","13_13","1_20","6_20","7_20","8_20","9_20"}, <14> {"0_20","0_39","10_15","10_20","14_14","1_20","6_20","7_20","8_20","9_20"}, <15> {"0_20","0_39","10_15","10_20","15_15","1_20","6_20","7_20","8_20","9_20"}, <16> {"0_20","0_39","10_20","16_16","16_20","1_20","6_20","7_20","8_20","9_20"}, <17> {"0_20","0_39","10_20","16_20","17_17","17_20","1_20","6_20","7_20","8_20","9_20"}, <18> {"0_20","0_39","10_20","16_20","17_20","18_18","18_20","1_20","6_20","7_20","8_20","9_20"}, <19> {"0_20","0_39","10_20","16_20","17_20","18_20","19_19","1_20","6_20","7_20","8_20","9_20"}, <20> {"0_20","0_39","10_20","16_20","17_20","18_20","1_20","20_20","6_20","7_20","8_20","9_20"}, <21> {"0_39","21_21"}, <22> {"0_39","22_22"}, <23> {"0_39","23_23"}, <24> {"0_39","24_24","24_26","24_34"}, <25> {"0_39","24_26","24_34","25_25"}, <26> {"0_39","24_26","24_34","26_26"}, <27> {"0_39","24_34","27_27","27_34"}, <28> {"0_39","24_34","27_34","28_28","28_30","28_34"}, <29> {"0_39","24_34","27_34","28_30","28_34","29_29"}, <30> {"0_39","24_34","27_34","28_30","28_34","30_30"}, <31> {"0_39","24_34","27_34","28_34","31_31","31_34"}, <32> {"0_39","24_34","27_34","28_34","31_34","32_32"}, <33> {"0_39","24_34","27_34","28_34","31_34","33_33"}, <34> {"0_39","24_34","27_34","28_34","31_34","34_34"}, <35> {"0_39","35_35"}, <36> {"0_39","36_36"}, <37> {"0_39","37_37","37_38"}, <38> {"0_39","37_38","38_38"}, <39> {"0_39","39_39"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Calendric_unit"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Statement"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Removing"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Quantity"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Ingredients"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Gizmo"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Project"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Prohibiting"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Political_locales"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Aggregate"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
subto overlap11: forall <i> in I do 
 sum <r> in Roles["Taking"] do 
 sum <s> in G[i] do z11[r,s] <= 1;
subto overlap12: forall <i> in I do 
 sum <r> in Roles["Typicality"] do 
 sum <s> in G[i] do z12[r,s] <= 1;
subto overlap13: forall <i> in I do 
 sum <r> in Roles["Intentionally_act"] do 
 sum <s> in G[i] do z13[r,s] <= 1;
subto overlap14: forall <i> in I do 
 sum <r> in Roles["First_experience"] do 
 sum <s> in G[i] do z14[r,s] <= 1;
subto overlap15: forall <i> in I do 
 sum <r> in Roles["Secrecy_status"] do 
 sum <s> in G[i] do z15[r,s] <= 1;
subto overlap16: forall <i> in I do 
 sum <r> in Roles["Reveal_secret"] do 
 sum <s> in G[i] do z16[r,s] <= 1;
subto overlap17: forall <i> in I do 
 sum <r> in Roles["Project"] do 
 sum <s> in G[i] do z17[r,s] <= 1;
subto overlap18: forall <i> in I do 
 sum <r> in Roles["Temporal_collocation"] do 
 sum <s> in G[i] do z18[r,s] <= 1;
subto overlap19: forall <i> in I do 
 sum <r> in Roles["Renunciation"] do 
 sum <s> in G[i] do z19[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Weapon"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Calendric_unit"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Statement"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Removing"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Quantity"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Ingredients"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Gizmo"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Project"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Prohibiting"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Political_locales"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Aggregate"] do sum <s> in Spans : z10[r,s] == 1;
subto unique11: forall <r> in Roles["Taking"] do sum <s> in Spans : z11[r,s] == 1;
subto unique12: forall <r> in Roles["Typicality"] do sum <s> in Spans : z12[r,s] == 1;
subto unique13: forall <r> in Roles["Intentionally_act"] do sum <s> in Spans : z13[r,s] == 1;
subto unique14: forall <r> in Roles["First_experience"] do sum <s> in Spans : z14[r,s] == 1;
subto unique15: forall <r> in Roles["Secrecy_status"] do sum <s> in Spans : z15[r,s] == 1;
subto unique16: forall <r> in Roles["Reveal_secret"] do sum <s> in Spans : z16[r,s] == 1;
subto unique17: forall <r> in Roles["Project"] do sum <s> in Spans : z17[r,s] == 1;
subto unique18: forall <r> in Roles["Temporal_collocation"] do sum <s> in Spans : z18[r,s] == 1;
subto unique19: forall <r> in Roles["Renunciation"] do sum <s> in Spans : z19[r,s] == 1;
#pairwise exclusion constraint
set Exc3 := {<"Agent","Cause">};
subto exclusion3: forall <ri,rj> in Exc3 do z3[ri,"-1_-1"] + z3[rj,"-1_-1"] >= 1;
set Exc4 := {<"Individuals","Mass">};
subto exclusion4: forall <ri,rj> in Exc4 do z4[ri,"-1_-1"] + z4[rj,"-1_-1"] >= 1;
set Exc7 := {<"Activity","Salient_entity">};
subto exclusion7: forall <ri,rj> in Exc7 do z7[ri,"-1_-1"] + z7[rj,"-1_-1"] >= 1;
set Exc17 := {<"Activity","Salient_entity">};
subto exclusion17: forall <ri,rj> in Exc17 do z17[ri,"-1_-1"] + z17[rj,"-1_-1"] >= 1;
set Exc18 := {<"Trajector_event","Trajector_period">,<"Landmark_entity","Landmark_event">,<"Landmark_event","Landmark_period">,<"Trajector_entity","Trajector_event">};
subto exclusion18: forall <ri,rj> in Exc18 do z18[ri,"-1_-1"] + z18[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
