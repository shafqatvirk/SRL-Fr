# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Collaboration","Quantity","Natural_features","Origin","Political_locales","Make_agreement_on_action","Intentionally_create","Project","Containing","Natural_features"};
set Roles[Frames] :=  <"Collaboration"> {"Duration","Place","Undertaking","Partner_2","Partner_1","Time","Partners","Manner","Degree"}, <"Quantity"> {"Mass","Q_Prop","Degree","Quantity","Individuals"}, <"Natural_features"> {"Type","Locale","Relative_location","Name","Formational_cause","Container_possessor","Constituent_parts","Descriptor"}, <"Origin"> {"Entity","Origin"}, <"Political_locales"> {"Relative_location","Constituent_parts","Container_possessor","Descriptor","Name","Population","Locale"}, <"Make_agreement_on_action"> {"Place","Party_2","Party_1","Medium","Topic","Manner","Time","Parties","Obligation","Descriptor"}, <"Intentionally_create"> {"Created_entity","Place","Role","Manner","Components","Creator","Time","Means","Purpose","Co_participant"}, <"Project"> {"Salient_entity","Duration","Agent","Goal","Manner","Name","Project","Field","Descriptor","Activity"}, <"Containing"> {"Container","Time","Contents"}, <"Natural_features"> {"Type","Locale","Relative_location","Name","Formational_cause","Container_possessor","Constituent_parts","Descriptor"};
set Spans := {"-1_-1","0_0","0_1","0_27","0_4","10_10","11_11","11_26","12_12","12_13","12_15","12_26","13_13","14_14","15_15","16_16","16_26","17_17","17_26","18_18","19_19","19_26","1_1","20_20","20_26","21_21","21_26","22_22","22_26","23_23","23_24","23_26","24_24","25_25","25_26","26_26","27_27","2_2","3_3","4_4","5_27","5_5","6_6","6_7","6_8","7_7","7_8","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Collaboration"]] binary;
var z1[Assignment["Quantity"]] binary;
var z2[Assignment["Natural_features"]] binary;
var z3[Assignment["Origin"]] binary;
var z4[Assignment["Political_locales"]] binary;
var z5[Assignment["Make_agreement_on_action"]] binary;
var z6[Assignment["Intentionally_create"]] binary;
var z7[Assignment["Project"]] binary;
var z8[Assignment["Containing"]] binary;
var z9[Assignment["Natural_features"]] binary;
param probabilities0[Assignment["Collaboration"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Quantity"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Natural_features"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Origin"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Political_locales"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Make_agreement_on_action"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Intentionally_create"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Project"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Containing"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Natural_features"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Collaboration"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Quantity"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Natural_features"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Origin"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Political_locales"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Make_agreement_on_action"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Intentionally_create"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Project"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Containing"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Natural_features"] : probabilities9[r,s] * z9[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 27};
set G[I] := <0> {"0_0","0_1","0_27","0_4"}, <1> {"0_1","0_27","0_4","1_1"}, <2> {"0_27","0_4","2_2"}, <3> {"0_27","0_4","3_3"}, <4> {"0_27","0_4","4_4"}, <5> {"0_27","5_27","5_5"}, <6> {"0_27","5_27","6_6","6_7","6_8"}, <7> {"0_27","5_27","6_7","6_8","7_7","7_8"}, <8> {"0_27","5_27","6_8","7_8","8_8"}, <9> {"0_27","5_27","9_9"}, <10> {"0_27","10_10","5_27"}, <11> {"0_27","11_11","11_26","5_27"}, <12> {"0_27","11_26","12_12","12_13","12_15","12_26","5_27"}, <13> {"0_27","11_26","12_13","12_15","12_26","13_13","5_27"}, <14> {"0_27","11_26","12_15","12_26","14_14","5_27"}, <15> {"0_27","11_26","12_15","12_26","15_15","5_27"}, <16> {"0_27","11_26","12_26","16_16","16_26","5_27"}, <17> {"0_27","11_26","12_26","16_26","17_17","17_26","5_27"}, <18> {"0_27","11_26","12_26","16_26","17_26","18_18","5_27"}, <19> {"0_27","11_26","12_26","16_26","17_26","19_19","19_26","5_27"}, <20> {"0_27","11_26","12_26","16_26","17_26","19_26","20_20","20_26","5_27"}, <21> {"0_27","11_26","12_26","16_26","17_26","19_26","20_26","21_21","21_26","5_27"}, <22> {"0_27","11_26","12_26","16_26","17_26","19_26","20_26","21_26","22_22","22_26","5_27"}, <23> {"0_27","11_26","12_26","16_26","17_26","19_26","20_26","21_26","22_26","23_23","23_24","23_26","5_27"}, <24> {"0_27","11_26","12_26","16_26","17_26","19_26","20_26","21_26","22_26","23_24","23_26","24_24","5_27"}, <25> {"0_27","11_26","12_26","16_26","17_26","19_26","20_26","21_26","22_26","23_26","25_25","25_26","5_27"}, <26> {"0_27","11_26","12_26","16_26","17_26","19_26","20_26","21_26","22_26","23_26","25_26","26_26","5_27"}, <27> {"0_27","27_27","5_27"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Collaboration"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Quantity"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Natural_features"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Origin"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Political_locales"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Make_agreement_on_action"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Intentionally_create"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Project"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Containing"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Natural_features"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Collaboration"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Quantity"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Natural_features"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Origin"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Political_locales"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Make_agreement_on_action"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Intentionally_create"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Project"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Containing"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Natural_features"] do sum <s> in Spans : z9[r,s] == 1;
#pairwise exclusion constraint
set Exc0 := {<"Partner_2","Partners">,<"Partner_1","Partners">};
subto exclusion0: forall <ri,rj> in Exc0 do z0[ri,"-1_-1"] + z0[rj,"-1_-1"] >= 1;
set Exc1 := {<"Individuals","Mass">};
subto exclusion1: forall <ri,rj> in Exc1 do z1[ri,"-1_-1"] + z1[rj,"-1_-1"] >= 1;
set Exc5 := {<"Parties","Party_2">,<"Parties","Party_1">};
subto exclusion5: forall <ri,rj> in Exc5 do z5[ri,"-1_-1"] + z5[rj,"-1_-1"] >= 1;
set Exc7 := {<"Activity","Salient_entity">};
subto exclusion7: forall <ri,rj> in Exc7 do z7[ri,"-1_-1"] + z7[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
set Reqr0 := {<"Partner_1","Partner_2">};
subto require0: forall <ri,rj> in Reqr0 do z0[ri,"-1_-1"] - z0[rj,"-1_-1"] == 0;
