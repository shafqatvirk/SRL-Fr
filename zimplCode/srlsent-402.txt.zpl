# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Coming_to_believe","Event","Make_noise","Buildings"};
set Roles[Frames] :=  <"Coming_to_believe"> {"Cognizer","Topic","Content","Manner","Time","Means","Medium","Degree","Evidence"}, <"Event"> {"Time","Duration","Place","Manner","Reason","Event","Frequency"}, <"Make_noise"> {"Sound","Circumstances","Depictive","Place","Addressee","Degree","Sound_source","Iterations","Internal_cause","Reason","Particular_iteration","Path","Location_of_source","Noisy_event","Subregion","Manner","Time"}, <"Buildings"> {"Type","Place","Function","Time_of_creation","Relative_location","Name","Building","Descriptor","Material","Builder"};
set Spans := {"-1_-1","0_0","0_13","10_10","10_12","11_11","11_12","12_12","13_13","1_1","1_13","2_2","2_4","3_3","3_4","4_4","5_5","6_12","6_6","7_7","7_9","8_8","8_9","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Coming_to_believe"]] binary;
var z1[Assignment["Event"]] binary;
var z2[Assignment["Make_noise"]] binary;
var z3[Assignment["Buildings"]] binary;
param probabilities0[Assignment["Coming_to_believe"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Event"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Make_noise"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Buildings"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Coming_to_believe"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Event"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Make_noise"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Buildings"] : probabilities3[r,s] * z3[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 13};
set G[I] := <0> {"0_0","0_13"}, <1> {"0_13","1_1","1_13"}, <2> {"0_13","1_13","2_2","2_4"}, <3> {"0_13","1_13","2_4","3_3","3_4"}, <4> {"0_13","1_13","2_4","3_4","4_4"}, <5> {"0_13","1_13","5_5"}, <6> {"0_13","1_13","6_12","6_6"}, <7> {"0_13","1_13","6_12","7_7","7_9"}, <8> {"0_13","1_13","6_12","7_9","8_8","8_9"}, <9> {"0_13","1_13","6_12","7_9","8_9","9_9"}, <10> {"0_13","10_10","10_12","1_13","6_12"}, <11> {"0_13","10_12","11_11","11_12","1_13","6_12"}, <12> {"0_13","10_12","11_12","12_12","1_13","6_12"}, <13> {"0_13","13_13","1_13"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Coming_to_believe"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Event"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Make_noise"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Buildings"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Coming_to_believe"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Event"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Make_noise"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Buildings"] do sum <s> in Spans : z3[r,s] == 1;
#pairwise exclusion constraint
#pairwise requirement constraint
