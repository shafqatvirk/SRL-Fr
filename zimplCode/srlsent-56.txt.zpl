# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Posture","Locale_by_use","Roadways","Roadways","Leadership","Commerce_buy","Cardinal_numbers","Cardinal_numbers","Compatibility","Measure_linear_extent","Biological_area","Biological_area"};
set Roles[Frames] :=  <"Posture"> {"Duration","Agent","Dependent_state","Degree","Manner","Location","Time","Point_of_contact","Depictive","Purpose"}, <"Locale_by_use"> {"Formational_cause","Use","Locale","Relative_location","Name","Container_possessor","Constituent_parts","Descriptor"}, <"Roadways"> {"Characteristic","Length","Use","Frequency_of_use","Goal","Relative_location","Endpoints","Direction","Source","Material","Path","Roadway","Name","Abundant_entities"}, <"Roadways"> {"Characteristic","Length","Use","Frequency_of_use","Goal","Relative_location","Endpoints","Direction","Source","Material","Path","Roadway","Name","Abundant_entities"}, <"Leadership"> {"Domain","Leader","Type","Depictive","Descriptor","Degree","Means","Role","Activity","Duration","Governed","Manner","Time"}, <"Commerce_buy"> {"Recipient","Time","Goods","Place","Purpose_of_goods","Seller","Purpose","Rate","Manner","Buyer","Means","Money"}, <"Cardinal_numbers"> {"Precision","Number","Multiplier","Entity"}, <"Cardinal_numbers"> {"Precision","Number","Multiplier","Entity"}, <"Compatibility"> {"Item_2","Item_1","Degree","Items","Parameter"}, <"Measure_linear_extent"> {"Count","Dimension","Unit","Stuff"}, <"Biological_area"> {"Relative_location","Constituent_parts","Container_possessor","Formational_cause","Descriptor","Name","Locale"}, <"Biological_area"> {"Relative_location","Constituent_parts","Container_possessor","Formational_cause","Descriptor","Name","Locale"};
set Spans := {"-1_-1","0_0","0_25","0_8","10_10","10_11","11_11","12_12","13_13","13_14","13_24","14_14","14_24","15_15","15_16","15_24","16_16","16_24","17_17","17_24","18_18","18_24","19_19","19_21","19_24","1_1","1_3","20_20","21_21","22_22","22_24","23_23","23_24","24_24","25_25","2_2","2_3","3_3","4_4","4_8","5_5","5_8","6_6","7_7","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Posture"]] binary;
var z1[Assignment["Locale_by_use"]] binary;
var z2[Assignment["Roadways"]] binary;
var z3[Assignment["Roadways"]] binary;
var z4[Assignment["Leadership"]] binary;
var z5[Assignment["Commerce_buy"]] binary;
var z6[Assignment["Cardinal_numbers"]] binary;
var z7[Assignment["Cardinal_numbers"]] binary;
var z8[Assignment["Compatibility"]] binary;
var z9[Assignment["Measure_linear_extent"]] binary;
var z10[Assignment["Biological_area"]] binary;
var z11[Assignment["Biological_area"]] binary;
param probabilities0[Assignment["Posture"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Locale_by_use"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Roadways"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Roadways"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Leadership"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Commerce_buy"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Cardinal_numbers"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Cardinal_numbers"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Compatibility"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Measure_linear_extent"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Biological_area"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;
param probabilities11[Assignment["Biological_area"]] := read "../frameData/frame11.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Posture"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Locale_by_use"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Roadways"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Roadways"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Leadership"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Commerce_buy"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Cardinal_numbers"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Cardinal_numbers"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Compatibility"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Measure_linear_extent"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Biological_area"] : probabilities10[r,s] * z10[r,s])+(sum <r,s> in Assignment["Biological_area"] : probabilities11[r,s] * z11[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 25};
set G[I] := <0> {"0_0","0_25","0_8"}, <1> {"0_25","0_8","1_1","1_3"}, <2> {"0_25","0_8","1_3","2_2","2_3"}, <3> {"0_25","0_8","1_3","2_3","3_3"}, <4> {"0_25","0_8","4_4","4_8"}, <5> {"0_25","0_8","4_8","5_5","5_8"}, <6> {"0_25","0_8","4_8","5_8","6_6"}, <7> {"0_25","0_8","4_8","5_8","7_7"}, <8> {"0_25","0_8","4_8","5_8","8_8"}, <9> {"0_25","9_9"}, <10> {"0_25","10_10","10_11"}, <11> {"0_25","10_11","11_11"}, <12> {"0_25","12_12"}, <13> {"0_25","13_13","13_14","13_24"}, <14> {"0_25","13_14","13_24","14_14","14_24"}, <15> {"0_25","13_24","14_24","15_15","15_16","15_24"}, <16> {"0_25","13_24","14_24","15_16","15_24","16_16","16_24"}, <17> {"0_25","13_24","14_24","15_24","16_24","17_17","17_24"}, <18> {"0_25","13_24","14_24","15_24","16_24","17_24","18_18","18_24"}, <19> {"0_25","13_24","14_24","15_24","16_24","17_24","18_24","19_19","19_21","19_24"}, <20> {"0_25","13_24","14_24","15_24","16_24","17_24","18_24","19_21","19_24","20_20"}, <21> {"0_25","13_24","14_24","15_24","16_24","17_24","18_24","19_21","19_24","21_21"}, <22> {"0_25","13_24","14_24","15_24","16_24","17_24","18_24","19_24","22_22","22_24"}, <23> {"0_25","13_24","14_24","15_24","16_24","17_24","18_24","19_24","22_24","23_23","23_24"}, <24> {"0_25","13_24","14_24","15_24","16_24","17_24","18_24","19_24","22_24","23_24","24_24"}, <25> {"0_25","25_25"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Posture"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Locale_by_use"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Roadways"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Roadways"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Leadership"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Commerce_buy"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Cardinal_numbers"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Cardinal_numbers"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Compatibility"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Measure_linear_extent"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Biological_area"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
subto overlap11: forall <i> in I do 
 sum <r> in Roles["Biological_area"] do 
 sum <s> in G[i] do z11[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Posture"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Locale_by_use"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Roadways"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Roadways"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Leadership"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Commerce_buy"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Cardinal_numbers"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Cardinal_numbers"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Compatibility"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Measure_linear_extent"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Biological_area"] do sum <s> in Spans : z10[r,s] == 1;
subto unique11: forall <r> in Roles["Biological_area"] do sum <s> in Spans : z11[r,s] == 1;
#pairwise exclusion constraint
set Exc8 := {<"Item_2","Items">,<"Item_1","Items">};
subto exclusion8: forall <ri,rj> in Exc8 do z8[ri,"-1_-1"] + z8[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
set Reqr8 := {<"Item_1","Item_2">};
subto require8: forall <ri,rj> in Reqr8 do z8[ri,"-1_-1"] - z8[rj,"-1_-1"] == 0;
