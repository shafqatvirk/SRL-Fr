# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Natural_features","Direction","Relational_natural_features","Natural_features","Inclusion","Natural_features","Locale_by_use","Secrecy_status","Frequency","Cardinal_numbers","Statement","People_by_age","People_by_age","Becoming","Cardinal_numbers","Size"};
set Roles[Frames] :=  <"Natural_features"> {"Type","Locale","Relative_location","Name","Formational_cause","Container_possessor","Constituent_parts","Descriptor"}, <"Direction"> {"Base_position","Independent_variable","Degree","Path"}, <"Relational_natural_features"> {"Focal_feature","Relative_location","Landmark_feature","Container_possessor"}, <"Natural_features"> {"Type","Locale","Relative_location","Name","Formational_cause","Container_possessor","Constituent_parts","Descriptor"}, <"Inclusion"> {"Purpose","Total","Contrast_set","Subregion","Frequency","Part"}, <"Natural_features"> {"Type","Locale","Relative_location","Name","Formational_cause","Container_possessor","Constituent_parts","Descriptor"}, <"Locale_by_use"> {"Formational_cause","Use","Locale","Relative_location","Name","Container_possessor","Constituent_parts","Descriptor"}, <"Secrecy_status"> {"Time","Phenomenon","Degree","Epistemic_stance","Cognizer"}, <"Frequency"> {"Time_span","Attribute","Degree","Time","Event","Interval","Rate","Salient_entity"}, <"Cardinal_numbers"> {"Precision","Number","Multiplier","Entity"}, <"Statement"> {"Message","Medium","Place","Iteration","Means","Depictive","Manner","Epistemic_stance","Speaker","Event_description","Addressee","Time","Containing_event","Degree","Occasion","Group","Frequency","Particular_iteration","Internal_cause","Topic"}, <"People_by_age"> {"Person","Ethnicity","Persistent_characteristic","Context_of_acquaintance","Descriptor","Age","Origin"}, <"People_by_age"> {"Person","Ethnicity","Persistent_characteristic","Context_of_acquaintance","Descriptor","Age","Origin"}, <"Becoming"> {"Initial_category","Initial_state","Circumstances","Time","Final_state","Place","Duration_of_final_state","Cause","Group","Final_category","Entity","Transitional_period","Reason","Manner","Explanation"}, <"Cardinal_numbers"> {"Precision","Number","Multiplier","Entity"}, <"Size"> {"Degree","Entity"};
set Spans := {"-1_-1","0_0","0_1","0_10","0_45","10_10","11_11","11_45","12_12","12_44","13_13","13_44","14_14","14_33","15_15","16_16","16_17","16_21","17_17","18_18","18_19","19_19","1_1","20_20","21_21","22_22","23_23","24_24","24_27","25_25","25_26","25_27","26_26","27_27","28_28","29_29","29_32","2_10","2_2","30_30","30_31","30_32","31_31","32_32","33_33","34_34","35_35","35_44","36_36","36_44","37_37","37_44","38_38","38_44","39_39","39_44","3_10","3_3","3_5","40_40","40_42","40_44","41_41","42_42","43_43","44_44","45_45","4_4","5_5","6_10","6_6","7_10","7_7","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Natural_features"]] binary;
var z1[Assignment["Direction"]] binary;
var z2[Assignment["Relational_natural_features"]] binary;
var z3[Assignment["Natural_features"]] binary;
var z4[Assignment["Inclusion"]] binary;
var z5[Assignment["Natural_features"]] binary;
var z6[Assignment["Locale_by_use"]] binary;
var z7[Assignment["Secrecy_status"]] binary;
var z8[Assignment["Frequency"]] binary;
var z9[Assignment["Cardinal_numbers"]] binary;
var z10[Assignment["Statement"]] binary;
var z11[Assignment["People_by_age"]] binary;
var z12[Assignment["People_by_age"]] binary;
var z13[Assignment["Becoming"]] binary;
var z14[Assignment["Cardinal_numbers"]] binary;
var z15[Assignment["Size"]] binary;
param probabilities0[Assignment["Natural_features"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Direction"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Relational_natural_features"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Natural_features"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Inclusion"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Natural_features"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Locale_by_use"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Secrecy_status"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Frequency"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Cardinal_numbers"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Statement"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;
param probabilities11[Assignment["People_by_age"]] := read "../frameData/frame11.txt" as "<1s,2s> 3n" skip 2;
param probabilities12[Assignment["People_by_age"]] := read "../frameData/frame12.txt" as "<1s,2s> 3n" skip 2;
param probabilities13[Assignment["Becoming"]] := read "../frameData/frame13.txt" as "<1s,2s> 3n" skip 2;
param probabilities14[Assignment["Cardinal_numbers"]] := read "../frameData/frame14.txt" as "<1s,2s> 3n" skip 2;
param probabilities15[Assignment["Size"]] := read "../frameData/frame15.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Natural_features"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Direction"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Relational_natural_features"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Natural_features"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Inclusion"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Natural_features"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Locale_by_use"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Secrecy_status"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Frequency"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Cardinal_numbers"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Statement"] : probabilities10[r,s] * z10[r,s])+(sum <r,s> in Assignment["People_by_age"] : probabilities11[r,s] * z11[r,s])+(sum <r,s> in Assignment["People_by_age"] : probabilities12[r,s] * z12[r,s])+(sum <r,s> in Assignment["Becoming"] : probabilities13[r,s] * z13[r,s])+(sum <r,s> in Assignment["Cardinal_numbers"] : probabilities14[r,s] * z14[r,s])+(sum <r,s> in Assignment["Size"] : probabilities15[r,s] * z15[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 45};
set G[I] := <0> {"0_0","0_1","0_10","0_45"}, <1> {"0_1","0_10","0_45","1_1"}, <2> {"0_10","0_45","2_10","2_2"}, <3> {"0_10","0_45","2_10","3_10","3_3","3_5"}, <4> {"0_10","0_45","2_10","3_10","3_5","4_4"}, <5> {"0_10","0_45","2_10","3_10","3_5","5_5"}, <6> {"0_10","0_45","2_10","3_10","6_10","6_6"}, <7> {"0_10","0_45","2_10","3_10","6_10","7_10","7_7"}, <8> {"0_10","0_45","2_10","3_10","6_10","7_10","8_8"}, <9> {"0_10","0_45","2_10","3_10","6_10","7_10","9_9"}, <10> {"0_10","0_45","10_10","2_10","3_10","6_10","7_10"}, <11> {"0_45","11_11","11_45"}, <12> {"0_45","11_45","12_12","12_44"}, <13> {"0_45","11_45","12_44","13_13","13_44"}, <14> {"0_45","11_45","12_44","13_44","14_14","14_33"}, <15> {"0_45","11_45","12_44","13_44","14_33","15_15"}, <16> {"0_45","11_45","12_44","13_44","14_33","16_16","16_17","16_21"}, <17> {"0_45","11_45","12_44","13_44","14_33","16_17","16_21","17_17"}, <18> {"0_45","11_45","12_44","13_44","14_33","16_21","18_18","18_19"}, <19> {"0_45","11_45","12_44","13_44","14_33","16_21","18_19","19_19"}, <20> {"0_45","11_45","12_44","13_44","14_33","16_21","20_20"}, <21> {"0_45","11_45","12_44","13_44","14_33","16_21","21_21"}, <22> {"0_45","11_45","12_44","13_44","14_33","22_22"}, <23> {"0_45","11_45","12_44","13_44","14_33","23_23"}, <24> {"0_45","11_45","12_44","13_44","14_33","24_24","24_27"}, <25> {"0_45","11_45","12_44","13_44","14_33","24_27","25_25","25_26","25_27"}, <26> {"0_45","11_45","12_44","13_44","14_33","24_27","25_26","25_27","26_26"}, <27> {"0_45","11_45","12_44","13_44","14_33","24_27","25_27","27_27"}, <28> {"0_45","11_45","12_44","13_44","14_33","28_28"}, <29> {"0_45","11_45","12_44","13_44","14_33","29_29","29_32"}, <30> {"0_45","11_45","12_44","13_44","14_33","29_32","30_30","30_31","30_32"}, <31> {"0_45","11_45","12_44","13_44","14_33","29_32","30_31","30_32","31_31"}, <32> {"0_45","11_45","12_44","13_44","14_33","29_32","30_32","32_32"}, <33> {"0_45","11_45","12_44","13_44","14_33","33_33"}, <34> {"0_45","11_45","12_44","13_44","34_34"}, <35> {"0_45","11_45","12_44","13_44","35_35","35_44"}, <36> {"0_45","11_45","12_44","13_44","35_44","36_36","36_44"}, <37> {"0_45","11_45","12_44","13_44","35_44","36_44","37_37","37_44"}, <38> {"0_45","11_45","12_44","13_44","35_44","36_44","37_44","38_38","38_44"}, <39> {"0_45","11_45","12_44","13_44","35_44","36_44","37_44","38_44","39_39","39_44"}, <40> {"0_45","11_45","12_44","13_44","35_44","36_44","37_44","38_44","39_44","40_40","40_42","40_44"}, <41> {"0_45","11_45","12_44","13_44","35_44","36_44","37_44","38_44","39_44","40_42","40_44","41_41"}, <42> {"0_45","11_45","12_44","13_44","35_44","36_44","37_44","38_44","39_44","40_42","40_44","42_42"}, <43> {"0_45","11_45","12_44","13_44","35_44","36_44","37_44","38_44","39_44","40_44","43_43"}, <44> {"0_45","11_45","12_44","13_44","35_44","36_44","37_44","38_44","39_44","40_44","44_44"}, <45> {"0_45","11_45","45_45"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Natural_features"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Direction"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Relational_natural_features"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Natural_features"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Inclusion"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Natural_features"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Locale_by_use"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Secrecy_status"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Frequency"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Cardinal_numbers"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Statement"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
subto overlap11: forall <i> in I do 
 sum <r> in Roles["People_by_age"] do 
 sum <s> in G[i] do z11[r,s] <= 1;
subto overlap12: forall <i> in I do 
 sum <r> in Roles["People_by_age"] do 
 sum <s> in G[i] do z12[r,s] <= 1;
subto overlap13: forall <i> in I do 
 sum <r> in Roles["Becoming"] do 
 sum <s> in G[i] do z13[r,s] <= 1;
subto overlap14: forall <i> in I do 
 sum <r> in Roles["Cardinal_numbers"] do 
 sum <s> in G[i] do z14[r,s] <= 1;
subto overlap15: forall <i> in I do 
 sum <r> in Roles["Size"] do 
 sum <s> in G[i] do z15[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Natural_features"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Direction"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Relational_natural_features"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Natural_features"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Inclusion"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Natural_features"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Locale_by_use"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Secrecy_status"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Frequency"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Cardinal_numbers"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Statement"] do sum <s> in Spans : z10[r,s] == 1;
subto unique11: forall <r> in Roles["People_by_age"] do sum <s> in Spans : z11[r,s] == 1;
subto unique12: forall <r> in Roles["People_by_age"] do sum <s> in Spans : z12[r,s] == 1;
subto unique13: forall <r> in Roles["Becoming"] do sum <s> in Spans : z13[r,s] == 1;
subto unique14: forall <r> in Roles["Cardinal_numbers"] do sum <s> in Spans : z14[r,s] == 1;
subto unique15: forall <r> in Roles["Size"] do sum <s> in Spans : z15[r,s] == 1;
#pairwise exclusion constraint
set Exc8 := {<"Degree","Rate">,<"Interval","Salient_entity">,<"Event","Salient_entity">};
subto exclusion8: forall <ri,rj> in Exc8 do z8[ri,"-1_-1"] + z8[rj,"-1_-1"] >= 1;
set Exc13 := {<"Final_category","Final_state">};
subto exclusion13: forall <ri,rj> in Exc13 do z13[ri,"-1_-1"] + z13[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
