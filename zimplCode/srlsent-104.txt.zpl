# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Buildings","Self_motion","Lively_place","Roadways","Shopping","Roadways","Abounding_with","Locale_by_use","Buildings","Locale_by_use"};
set Roles[Frames] :=  <"Buildings"> {"Type","Place","Function","Time_of_creation","Relative_location","Name","Building","Descriptor","Material","Builder"}, <"Self_motion"> {"Speed","Duration","Area","Purpose","Cotheme","Means","Depictive","Coordinated_event","Manner","Path","Result","Distance","Self_mover","Time","Source","External_cause","Place","Goal","Reason","Direction","Concessive","Internal_cause","Path_shape"}, <"Lively_place"> {"Duration","Place","Degree","Manner","Explanation","Individuals","Time","Circumstances","Location","Activity"}, <"Roadways"> {"Characteristic","Length","Use","Frequency_of_use","Goal","Relative_location","Endpoints","Direction","Source","Material","Path","Roadway","Name","Abundant_entities"}, <"Shopping"> {"Place","Goods","Shopper","Manner","Co_participant","Ground","Time","Depictive"}, <"Roadways"> {"Characteristic","Length","Use","Frequency_of_use","Goal","Relative_location","Endpoints","Direction","Source","Material","Path","Roadway","Name","Abundant_entities"}, <"Abounding_with"> {"Time","Location","Theme","Degree","Depictive"}, <"Locale_by_use"> {"Formational_cause","Use","Locale","Relative_location","Name","Container_possessor","Constituent_parts","Descriptor"}, <"Buildings"> {"Type","Place","Function","Time_of_creation","Relative_location","Name","Building","Descriptor","Material","Builder"}, <"Locale_by_use"> {"Formational_cause","Use","Locale","Relative_location","Name","Container_possessor","Constituent_parts","Descriptor"};
set Spans := {"-1_-1","0_0","0_23","10_10","11_11","12_12","13_13","14_14","15_15","15_22","16_16","16_22","17_17","17_22","18_18","19_19","1_1","1_2","20_20","21_21","22_22","23_23","2_2","3_3","4_22","4_4","4_6","5_5","6_6","7_7","8_10","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Buildings"]] binary;
var z1[Assignment["Self_motion"]] binary;
var z2[Assignment["Lively_place"]] binary;
var z3[Assignment["Roadways"]] binary;
var z4[Assignment["Shopping"]] binary;
var z5[Assignment["Roadways"]] binary;
var z6[Assignment["Abounding_with"]] binary;
var z7[Assignment["Locale_by_use"]] binary;
var z8[Assignment["Buildings"]] binary;
var z9[Assignment["Locale_by_use"]] binary;
param probabilities0[Assignment["Buildings"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Self_motion"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Lively_place"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Roadways"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Shopping"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Roadways"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Abounding_with"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Locale_by_use"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Buildings"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Locale_by_use"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Buildings"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Self_motion"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Lively_place"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Roadways"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Shopping"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Roadways"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Abounding_with"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Locale_by_use"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Buildings"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Locale_by_use"] : probabilities9[r,s] * z9[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 23};
set G[I] := <0> {"0_0","0_23"}, <1> {"0_23","1_1","1_2"}, <2> {"0_23","1_2","2_2"}, <3> {"0_23","3_3"}, <4> {"0_23","4_22","4_4","4_6"}, <5> {"0_23","4_22","4_6","5_5"}, <6> {"0_23","4_22","4_6","6_6"}, <7> {"0_23","4_22","7_7"}, <8> {"0_23","4_22","8_10","8_8"}, <9> {"0_23","4_22","8_10","9_9"}, <10> {"0_23","10_10","4_22","8_10"}, <11> {"0_23","11_11","4_22"}, <12> {"0_23","12_12","4_22"}, <13> {"0_23","13_13","4_22"}, <14> {"0_23","14_14","4_22"}, <15> {"0_23","15_15","15_22","4_22"}, <16> {"0_23","15_22","16_16","16_22","4_22"}, <17> {"0_23","15_22","16_22","17_17","17_22","4_22"}, <18> {"0_23","15_22","16_22","17_22","18_18","4_22"}, <19> {"0_23","15_22","16_22","17_22","19_19","4_22"}, <20> {"0_23","15_22","16_22","17_22","20_20","4_22"}, <21> {"0_23","15_22","16_22","17_22","21_21","4_22"}, <22> {"0_23","15_22","16_22","17_22","22_22","4_22"}, <23> {"0_23","23_23"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Buildings"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Self_motion"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Lively_place"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Roadways"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Shopping"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Roadways"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Abounding_with"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Locale_by_use"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Buildings"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Locale_by_use"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Buildings"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Self_motion"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Lively_place"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Roadways"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Shopping"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Roadways"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Abounding_with"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Locale_by_use"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Buildings"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Locale_by_use"] do sum <s> in Spans : z9[r,s] == 1;
#pairwise exclusion constraint
set Exc1 := {<"Area","Direction">,<"Area","Goal">,<"Area","Path">,<"Area","Source">};
subto exclusion1: forall <ri,rj> in Exc1 do z1[ri,"-1_-1"] + z1[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
