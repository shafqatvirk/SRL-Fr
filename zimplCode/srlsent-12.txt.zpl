# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Attempt","Thwarting","Commitment","People_by_religion","Age","Military","Direction","Military","Becoming_a_member","People","Natural_features"};
set Roles[Frames] :=  <"Attempt"> {"Purpose","Circumstances","Time","Goal","Particular_iteration","Place","Frequency","Degree","Means","Outcome","Condition","Depictive","Duration","Manner","Agent"}, <"Thwarting"> {"Place","Degree","Action","Preventing_cause","Explanation","Time","Protagonist","Manner","Frequency"}, <"Commitment"> {"Addressee","Medium","Topic","Manner","Speaker","Time","Message","Purpose"}, <"People_by_religion"> {"Person","Religion","Ethnicity","Persistent_characteristic","Descriptor","Age","Origin"}, <"Age"> {"Attribute","Degree","Entity","Time","Expressor","Duration","Age","Descriptor"}, <"Military"> {"Members","Descriptor","Possessor","Goal","Domain","Force"}, <"Direction"> {"Base_position","Independent_variable","Degree","Path"}, <"Military"> {"Members","Descriptor","Possessor","Goal","Domain","Force"}, <"Becoming_a_member"> {"Purpose","Circumstances","Time","Place","New_member","Role","Group","Depictive","Reciprocation","Re_encoding","Manner","Explanation"}, <"People"> {"Person","Ethnicity","Persistent_characteristic","Context_of_acquaintance","Descriptor","Age","Origin"}, <"Natural_features"> {"Type","Locale","Relative_location","Name","Formational_cause","Container_possessor","Constituent_parts","Descriptor"};
set Spans := {"-1_-1","0_0","0_19","0_31","10_10","11_11","12_12","13_13","14_14","15_15","16_16","17_17","17_19","18_18","18_19","19_19","1_1","1_19","1_2","20_20","21_21","21_23","22_22","23_23","24_24","25_25","26_26","26_27","26_30","27_27","28_28","28_30","29_29","29_30","2_2","30_30","31_31","3_19","3_3","3_4","4_19","4_4","5_19","5_5","5_6","6_6","7_19","7_7","8_10","8_16","8_19","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Attempt"]] binary;
var z1[Assignment["Thwarting"]] binary;
var z2[Assignment["Commitment"]] binary;
var z3[Assignment["People_by_religion"]] binary;
var z4[Assignment["Age"]] binary;
var z5[Assignment["Military"]] binary;
var z6[Assignment["Direction"]] binary;
var z7[Assignment["Military"]] binary;
var z8[Assignment["Becoming_a_member"]] binary;
var z9[Assignment["People"]] binary;
var z10[Assignment["Natural_features"]] binary;
param probabilities0[Assignment["Attempt"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Thwarting"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Commitment"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["People_by_religion"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Age"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Military"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Direction"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Military"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Becoming_a_member"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["People"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Natural_features"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Attempt"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Thwarting"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Commitment"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["People_by_religion"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Age"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Military"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Direction"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Military"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Becoming_a_member"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["People"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Natural_features"] : probabilities10[r,s] * z10[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 31};
set G[I] := <0> {"0_0","0_19","0_31"}, <1> {"0_19","0_31","1_1","1_19","1_2"}, <2> {"0_19","0_31","1_19","1_2","2_2"}, <3> {"0_19","0_31","1_19","3_19","3_3","3_4"}, <4> {"0_19","0_31","1_19","3_19","3_4","4_19","4_4"}, <5> {"0_19","0_31","1_19","3_19","4_19","5_19","5_5","5_6"}, <6> {"0_19","0_31","1_19","3_19","4_19","5_19","5_6","6_6"}, <7> {"0_19","0_31","1_19","3_19","4_19","5_19","7_19","7_7"}, <8> {"0_19","0_31","1_19","3_19","4_19","5_19","7_19","8_10","8_16","8_19","8_8"}, <9> {"0_19","0_31","1_19","3_19","4_19","5_19","7_19","8_10","8_16","8_19","9_9"}, <10> {"0_19","0_31","10_10","1_19","3_19","4_19","5_19","7_19","8_10","8_16","8_19"}, <11> {"0_19","0_31","11_11","1_19","3_19","4_19","5_19","7_19","8_16","8_19"}, <12> {"0_19","0_31","12_12","1_19","3_19","4_19","5_19","7_19","8_16","8_19"}, <13> {"0_19","0_31","13_13","1_19","3_19","4_19","5_19","7_19","8_16","8_19"}, <14> {"0_19","0_31","14_14","1_19","3_19","4_19","5_19","7_19","8_16","8_19"}, <15> {"0_19","0_31","15_15","1_19","3_19","4_19","5_19","7_19","8_16","8_19"}, <16> {"0_19","0_31","16_16","1_19","3_19","4_19","5_19","7_19","8_16","8_19"}, <17> {"0_19","0_31","17_17","17_19","1_19","3_19","4_19","5_19","7_19","8_19"}, <18> {"0_19","0_31","17_19","18_18","18_19","1_19","3_19","4_19","5_19","7_19","8_19"}, <19> {"0_19","0_31","17_19","18_19","19_19","1_19","3_19","4_19","5_19","7_19","8_19"}, <20> {"0_31","20_20"}, <21> {"0_31","21_21","21_23"}, <22> {"0_31","21_23","22_22"}, <23> {"0_31","21_23","23_23"}, <24> {"0_31","24_24"}, <25> {"0_31","25_25"}, <26> {"0_31","26_26","26_27","26_30"}, <27> {"0_31","26_27","26_30","27_27"}, <28> {"0_31","26_30","28_28","28_30"}, <29> {"0_31","26_30","28_30","29_29","29_30"}, <30> {"0_31","26_30","28_30","29_30","30_30"}, <31> {"0_31","31_31"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Attempt"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Thwarting"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Commitment"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["People_by_religion"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Age"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Military"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Direction"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Military"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Becoming_a_member"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["People"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Natural_features"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Attempt"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Thwarting"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Commitment"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["People_by_religion"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Age"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Military"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Direction"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Military"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Becoming_a_member"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["People"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Natural_features"] do sum <s> in Spans : z10[r,s] == 1;
#pairwise exclusion constraint
set Exc4 := {<"Entity","Expressor">,<"Age","Degree">};
subto exclusion4: forall <ri,rj> in Exc4 do z4[ri,"-1_-1"] + z4[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
set Reqr1 := {<"Action","Protagonist">};
subto require1: forall <ri,rj> in Reqr1 do z1[ri,"-1_-1"] - z1[rj,"-1_-1"] == 0;
