# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Residence","Leadership","Aggregate","Dimension","Manipulation","Cause_change","Travel","Natural_features","Relative_time","Calendric_unit","Statement","Increment","Natural_features","Locale"};
set Roles[Frames] :=  <"Residence"> {"Co_resident","Manner","Location","Time","Circumstances","Resident","Depictive","Frequency"}, <"Leadership"> {"Domain","Leader","Type","Depictive","Descriptor","Degree","Means","Role","Activity","Duration","Governed","Manner","Time"}, <"Aggregate"> {"Individuals","AggregateProperty","Aggregate","Name","Domain","Container_possessor"}, <"Dimension"> {"Object","Domain","Measurement","Dimension","Location"}, <"Manipulation"> {"Purpose","Result","Time","Instrument","Place","Means","Locus","Reason","Particular_iteration","Depictive","Duration","Bodypart_of_agent","Entity","Manner","Agent"}, <"Cause_change"> {"Duration","Purpose","Attribute","Initial_value","Role","Circumstances","Agent","Manner","Means","Event_description","Final_category","Cause","Time","Period_of_iterations","Containing_event","Degree","Place","Re_encoding","Reason","Initial_category","Final_value","Entity"}, <"Travel"> {"Mode_of_transportation","Area","Time","Path","Reason","Depictive","Traveler","Means","Frequency","Place","Manner","Co_participant","Source","Distance","Descriptor","Speed","Purpose","Travel_means","Duration","Goal","Baggage","Period_of_Iterations","Direction","Iterations"}, <"Natural_features"> {"Type","Locale","Relative_location","Name","Formational_cause","Container_possessor","Constituent_parts","Descriptor"}, <"Relative_time"> {"Focal_participant","Interval","Degree","Focal_occasion","Landmark_occasion"}, <"Calendric_unit"> {"Relative_time","Unit","Count","Name","Salient_event","Whole"}, <"Statement"> {"Message","Medium","Place","Iteration","Means","Depictive","Manner","Epistemic_stance","Speaker","Event_description","Addressee","Time","Containing_event","Degree","Occasion","Group","Frequency","Particular_iteration","Internal_cause","Topic"}, <"Increment"> {"Initial_set","Class","Increment","Added_set"}, <"Natural_features"> {"Type","Locale","Relative_location","Name","Formational_cause","Container_possessor","Constituent_parts","Descriptor"}, <"Locale"> {"Formational_cause","Locale","Relative_location","Name","Container_possessor","Related_event","Constituent_parts","Descriptor"};
set Spans := {"-1_-1","0_0","0_2","0_37","10_10","11_11","11_36","12_12","12_13","12_36","13_13","14_14","14_36","15_15","15_36","16_16","17_17","17_36","18_18","18_19","18_36","19_19","1_1","1_2","20_20","20_36","21_21","21_22","21_23","21_36","22_22","23_23","23_36","24_24","24_36","25_25","25_26","26_26","27_27","28_28","28_36","29_29","2_2","30_30","30_36","31_31","31_33","31_36","32_32","33_33","34_34","34_36","35_35","35_36","36_36","37_37","3_3","4_4","4_7","5_5","6_6","7_7","8_8","9_10","9_36","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Residence"]] binary;
var z1[Assignment["Leadership"]] binary;
var z2[Assignment["Aggregate"]] binary;
var z3[Assignment["Dimension"]] binary;
var z4[Assignment["Manipulation"]] binary;
var z5[Assignment["Cause_change"]] binary;
var z6[Assignment["Travel"]] binary;
var z7[Assignment["Natural_features"]] binary;
var z8[Assignment["Relative_time"]] binary;
var z9[Assignment["Calendric_unit"]] binary;
var z10[Assignment["Statement"]] binary;
var z11[Assignment["Increment"]] binary;
var z12[Assignment["Natural_features"]] binary;
var z13[Assignment["Locale"]] binary;
param probabilities0[Assignment["Residence"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Leadership"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Aggregate"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Dimension"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Manipulation"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Cause_change"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Travel"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Natural_features"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Relative_time"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Calendric_unit"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Statement"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;
param probabilities11[Assignment["Increment"]] := read "../frameData/frame11.txt" as "<1s,2s> 3n" skip 2;
param probabilities12[Assignment["Natural_features"]] := read "../frameData/frame12.txt" as "<1s,2s> 3n" skip 2;
param probabilities13[Assignment["Locale"]] := read "../frameData/frame13.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Residence"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Leadership"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Aggregate"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Dimension"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Manipulation"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Cause_change"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Travel"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Natural_features"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Relative_time"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Calendric_unit"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Statement"] : probabilities10[r,s] * z10[r,s])+(sum <r,s> in Assignment["Increment"] : probabilities11[r,s] * z11[r,s])+(sum <r,s> in Assignment["Natural_features"] : probabilities12[r,s] * z12[r,s])+(sum <r,s> in Assignment["Locale"] : probabilities13[r,s] * z13[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 37};
set G[I] := <0> {"0_0","0_2","0_37"}, <1> {"0_2","0_37","1_1","1_2"}, <2> {"0_2","0_37","1_2","2_2"}, <3> {"0_37","3_3"}, <4> {"0_37","4_4","4_7"}, <5> {"0_37","4_7","5_5"}, <6> {"0_37","4_7","6_6"}, <7> {"0_37","4_7","7_7"}, <8> {"0_37","8_8"}, <9> {"0_37","9_10","9_36","9_9"}, <10> {"0_37","10_10","9_10","9_36"}, <11> {"0_37","11_11","11_36","9_36"}, <12> {"0_37","11_36","12_12","12_13","12_36","9_36"}, <13> {"0_37","11_36","12_13","12_36","13_13","9_36"}, <14> {"0_37","11_36","12_36","14_14","14_36","9_36"}, <15> {"0_37","11_36","12_36","14_36","15_15","15_36","9_36"}, <16> {"0_37","11_36","12_36","14_36","15_36","16_16","9_36"}, <17> {"0_37","11_36","12_36","14_36","15_36","17_17","17_36","9_36"}, <18> {"0_37","11_36","12_36","14_36","15_36","17_36","18_18","18_19","18_36","9_36"}, <19> {"0_37","11_36","12_36","14_36","15_36","17_36","18_19","18_36","19_19","9_36"}, <20> {"0_37","11_36","12_36","14_36","15_36","17_36","18_36","20_20","20_36","9_36"}, <21> {"0_37","11_36","12_36","14_36","15_36","17_36","18_36","20_36","21_21","21_22","21_23","21_36","9_36"}, <22> {"0_37","11_36","12_36","14_36","15_36","17_36","18_36","20_36","21_22","21_23","21_36","22_22","9_36"}, <23> {"0_37","11_36","12_36","14_36","15_36","17_36","18_36","20_36","21_23","21_36","23_23","23_36","9_36"}, <24> {"0_37","11_36","12_36","14_36","15_36","17_36","18_36","20_36","21_36","23_36","24_24","24_36","9_36"}, <25> {"0_37","11_36","12_36","14_36","15_36","17_36","18_36","20_36","21_36","23_36","24_36","25_25","25_26","9_36"}, <26> {"0_37","11_36","12_36","14_36","15_36","17_36","18_36","20_36","21_36","23_36","24_36","25_26","26_26","9_36"}, <27> {"0_37","11_36","12_36","14_36","15_36","17_36","18_36","20_36","21_36","23_36","24_36","27_27","9_36"}, <28> {"0_37","11_36","12_36","14_36","15_36","17_36","18_36","20_36","21_36","23_36","24_36","28_28","28_36","9_36"}, <29> {"0_37","11_36","12_36","14_36","15_36","17_36","18_36","20_36","21_36","23_36","24_36","28_36","29_29","9_36"}, <30> {"0_37","11_36","12_36","14_36","15_36","17_36","18_36","20_36","21_36","23_36","24_36","28_36","30_30","30_36","9_36"}, <31> {"0_37","11_36","12_36","14_36","15_36","17_36","18_36","20_36","21_36","23_36","24_36","28_36","30_36","31_31","31_33","31_36","9_36"}, <32> {"0_37","11_36","12_36","14_36","15_36","17_36","18_36","20_36","21_36","23_36","24_36","28_36","30_36","31_33","31_36","32_32","9_36"}, <33> {"0_37","11_36","12_36","14_36","15_36","17_36","18_36","20_36","21_36","23_36","24_36","28_36","30_36","31_33","31_36","33_33","9_36"}, <34> {"0_37","11_36","12_36","14_36","15_36","17_36","18_36","20_36","21_36","23_36","24_36","28_36","30_36","31_36","34_34","34_36","9_36"}, <35> {"0_37","11_36","12_36","14_36","15_36","17_36","18_36","20_36","21_36","23_36","24_36","28_36","30_36","31_36","34_36","35_35","35_36","9_36"}, <36> {"0_37","11_36","12_36","14_36","15_36","17_36","18_36","20_36","21_36","23_36","24_36","28_36","30_36","31_36","34_36","35_36","36_36","9_36"}, <37> {"0_37","37_37"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Residence"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Leadership"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Aggregate"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Dimension"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Manipulation"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Cause_change"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Travel"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Natural_features"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Relative_time"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Calendric_unit"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Statement"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
subto overlap11: forall <i> in I do 
 sum <r> in Roles["Increment"] do 
 sum <s> in G[i] do z11[r,s] <= 1;
subto overlap12: forall <i> in I do 
 sum <r> in Roles["Natural_features"] do 
 sum <s> in G[i] do z12[r,s] <= 1;
subto overlap13: forall <i> in I do 
 sum <r> in Roles["Locale"] do 
 sum <s> in G[i] do z13[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Residence"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Leadership"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Aggregate"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Dimension"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Manipulation"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Cause_change"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Travel"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Natural_features"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Relative_time"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Calendric_unit"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Statement"] do sum <s> in Spans : z10[r,s] == 1;
subto unique11: forall <r> in Roles["Increment"] do sum <s> in Spans : z11[r,s] == 1;
subto unique12: forall <r> in Roles["Natural_features"] do sum <s> in Spans : z12[r,s] == 1;
subto unique13: forall <r> in Roles["Locale"] do sum <s> in Spans : z13[r,s] == 1;
#pairwise exclusion constraint
set Exc5 := {<"Final_category","Initial_value">,<"Attribute","Final_category">,<"Agent","Cause">,<"Final_category","Final_value">,<"Initial_category","Initial_value">};
subto exclusion5: forall <ri,rj> in Exc5 do z5[ri,"-1_-1"] + z5[rj,"-1_-1"] >= 1;
set Exc6 := {<"Area","Direction">,<"Area","Goal">,<"Area","Path">,<"Area","Source">};
subto exclusion6: forall <ri,rj> in Exc6 do z6[ri,"-1_-1"] + z6[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
set Reqr5 := {<"Attribute","Final_value">,<"Attribute","Initial_value">};
subto require5: forall <ri,rj> in Reqr5 do z5[ri,"-1_-1"] - z5[rj,"-1_-1"] == 0;
