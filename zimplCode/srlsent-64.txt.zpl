# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Quantity","Ambient_temperature","Weather","Aesthetics","Natural_features","Desirability","Buildings","Likelihood","Supply","Stimulus_focus","Stimulus_focus"};
set Roles[Frames] :=  <"Quantity"> {"Mass","Q_Prop","Degree","Quantity","Individuals"}, <"Ambient_temperature"> {"Time","Attribute","Place","Temperature","Weather","Degree"}, <"Weather"> {"Place","Specification","Time"}, <"Aesthetics"> {"Time","Entity","Attribute","Place","Judge","Circumstances","Degree"}, <"Natural_features"> {"Type","Locale","Relative_location","Name","Formational_cause","Container_possessor","Constituent_parts","Descriptor"}, <"Desirability"> {"Parameter","Affected_party","Circumstances","Depictive","Comparison_set","Degree","Evaluee"}, <"Buildings"> {"Type","Place","Function","Time_of_creation","Relative_location","Name","Building","Descriptor","Material","Builder"}, <"Likelihood"> {"Time","Place","Circumstances","Reason","Hypothetical_event","Degree"}, <"Supply"> {"Recipient","Circumstances","Time","Supplier","Place","Co_theme","Purpose","Period_of_iterations","Means","Source","Theme","Purpose_of_recipient","Manner"}, <"Stimulus_focus"> {"Stimulus","Parameter","Circumstances","Property","Experiencer","Comparison_set","Degree"}, <"Stimulus_focus"> {"Stimulus","Parameter","Circumstances","Property","Experiencer","Comparison_set","Degree"};
set Spans := {"-1_-1","0_0","0_13","0_25","10_10","11_11","12_12","13_13","14_14","15_15","16_16","17_17","17_24","18_18","18_19","18_24","19_19","19_24","1_1","1_13","1_2","20_20","20_24","21_21","22_22","23_23","24_24","25_25","2_2","3_3","4_4","4_5","5_5","6_6","7_7","7_9","8_8","8_9","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Quantity"]] binary;
var z1[Assignment["Ambient_temperature"]] binary;
var z2[Assignment["Weather"]] binary;
var z3[Assignment["Aesthetics"]] binary;
var z4[Assignment["Natural_features"]] binary;
var z5[Assignment["Desirability"]] binary;
var z6[Assignment["Buildings"]] binary;
var z7[Assignment["Likelihood"]] binary;
var z8[Assignment["Supply"]] binary;
var z9[Assignment["Stimulus_focus"]] binary;
var z10[Assignment["Stimulus_focus"]] binary;
param probabilities0[Assignment["Quantity"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Ambient_temperature"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Weather"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Aesthetics"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Natural_features"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Desirability"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Buildings"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Likelihood"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Supply"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Stimulus_focus"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Stimulus_focus"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Quantity"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Ambient_temperature"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Weather"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Aesthetics"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Natural_features"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Desirability"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Buildings"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Likelihood"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Supply"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Stimulus_focus"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Stimulus_focus"] : probabilities10[r,s] * z10[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 25};
set G[I] := <0> {"0_0","0_13","0_25"}, <1> {"0_13","0_25","1_1","1_13","1_2"}, <2> {"0_13","0_25","1_13","1_2","2_2"}, <3> {"0_13","0_25","1_13","3_3"}, <4> {"0_13","0_25","1_13","4_4","4_5"}, <5> {"0_13","0_25","1_13","4_5","5_5"}, <6> {"0_13","0_25","1_13","6_6"}, <7> {"0_13","0_25","1_13","7_7","7_9"}, <8> {"0_13","0_25","1_13","7_9","8_8","8_9"}, <9> {"0_13","0_25","1_13","7_9","8_9","9_9"}, <10> {"0_13","0_25","10_10","1_13"}, <11> {"0_13","0_25","11_11","1_13"}, <12> {"0_13","0_25","12_12","1_13"}, <13> {"0_13","0_25","13_13","1_13"}, <14> {"0_25","14_14"}, <15> {"0_25","15_15"}, <16> {"0_25","16_16"}, <17> {"0_25","17_17","17_24"}, <18> {"0_25","17_24","18_18","18_19","18_24"}, <19> {"0_25","17_24","18_19","18_24","19_19","19_24"}, <20> {"0_25","17_24","18_24","19_24","20_20","20_24"}, <21> {"0_25","17_24","18_24","19_24","20_24","21_21"}, <22> {"0_25","17_24","18_24","19_24","20_24","22_22"}, <23> {"0_25","17_24","18_24","19_24","20_24","23_23"}, <24> {"0_25","17_24","18_24","19_24","20_24","24_24"}, <25> {"0_25","25_25"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Quantity"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Ambient_temperature"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Weather"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Aesthetics"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Natural_features"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Desirability"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Buildings"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Likelihood"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Supply"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Stimulus_focus"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Stimulus_focus"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Quantity"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Ambient_temperature"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Weather"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Aesthetics"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Natural_features"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Desirability"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Buildings"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Likelihood"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Supply"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Stimulus_focus"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Stimulus_focus"] do sum <s> in Spans : z10[r,s] == 1;
#pairwise exclusion constraint
set Exc0 := {<"Individuals","Mass">};
subto exclusion0: forall <ri,rj> in Exc0 do z0[ri,"-1_-1"] + z0[rj,"-1_-1"] >= 1;
set Exc1 := {<"Degree","Temperature">};
subto exclusion1: forall <ri,rj> in Exc1 do z1[ri,"-1_-1"] + z1[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
