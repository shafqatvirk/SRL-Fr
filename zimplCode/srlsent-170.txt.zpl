# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Locale_by_use","Purpose","Part_inner_outer","Required_event","Appointing","Locale","Vehicle","Protecting","Offenses"};
set Roles[Frames] :=  <"Locale_by_use"> {"Formational_cause","Use","Locale","Relative_location","Name","Container_possessor","Constituent_parts","Descriptor"}, <"Purpose"> {"Attribute","Agent","Goal","Time","Restrictor","Value","Domain","Means"}, <"Part_inner_outer"> {"Part_Prop","Part","Whole"}, <"Required_event"> {"Explanation","Time","Purpose","Circumstances","Negative_consequences","Required_situation"}, <"Appointing"> {"Selector","Function","Result","Degree","Time","Circumstances","Role","Official","Body"}, <"Locale"> {"Formational_cause","Locale","Relative_location","Name","Container_possessor","Related_event","Constituent_parts","Descriptor"}, <"Vehicle"> {"Itinerary","Possessor","Descriptor","Vehicle","Use"}, <"Protecting"> {"Protection","Time","Descriptor","Instrument","Place","Degree","Asset","Means","Depictive","Danger","Duration","Beneficiary","Manner","Explanation"}, <"Offenses"> {"Offense","Degree","Victim","Perpetrator","Specification"};
set Spans := {"-1_-1","0_0","0_20","0_3","10_10","11_11","12_12","13_13","13_19","14_14","15_15","15_19","16_16","16_19","17_17","18_18","18_19","19_19","1_1","20_20","2_2","3_3","4_20","4_4","5_19","5_5","6_19","6_6","7_19","7_7","8_12","8_8","9_11","9_12","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Locale_by_use"]] binary;
var z1[Assignment["Purpose"]] binary;
var z2[Assignment["Part_inner_outer"]] binary;
var z3[Assignment["Required_event"]] binary;
var z4[Assignment["Appointing"]] binary;
var z5[Assignment["Locale"]] binary;
var z6[Assignment["Vehicle"]] binary;
var z7[Assignment["Protecting"]] binary;
var z8[Assignment["Offenses"]] binary;
param probabilities0[Assignment["Locale_by_use"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Purpose"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Part_inner_outer"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Required_event"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Appointing"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Locale"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Vehicle"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Protecting"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Offenses"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Locale_by_use"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Purpose"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Part_inner_outer"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Required_event"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Appointing"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Locale"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Vehicle"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Protecting"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Offenses"] : probabilities8[r,s] * z8[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 20};
set G[I] := <0> {"0_0","0_20","0_3"}, <1> {"0_20","0_3","1_1"}, <2> {"0_20","0_3","2_2"}, <3> {"0_20","0_3","3_3"}, <4> {"0_20","4_20","4_4"}, <5> {"0_20","4_20","5_19","5_5"}, <6> {"0_20","4_20","5_19","6_19","6_6"}, <7> {"0_20","4_20","5_19","6_19","7_19","7_7"}, <8> {"0_20","4_20","5_19","6_19","7_19","8_12","8_8"}, <9> {"0_20","4_20","5_19","6_19","7_19","8_12","9_11","9_12","9_9"}, <10> {"0_20","10_10","4_20","5_19","6_19","7_19","8_12","9_11","9_12"}, <11> {"0_20","11_11","4_20","5_19","6_19","7_19","8_12","9_11","9_12"}, <12> {"0_20","12_12","4_20","5_19","6_19","7_19","8_12","9_12"}, <13> {"0_20","13_13","13_19","4_20","5_19","6_19","7_19"}, <14> {"0_20","13_19","14_14","4_20","5_19","6_19","7_19"}, <15> {"0_20","13_19","15_15","15_19","4_20","5_19","6_19","7_19"}, <16> {"0_20","13_19","15_19","16_16","16_19","4_20","5_19","6_19","7_19"}, <17> {"0_20","13_19","15_19","16_19","17_17","4_20","5_19","6_19","7_19"}, <18> {"0_20","13_19","15_19","16_19","18_18","18_19","4_20","5_19","6_19","7_19"}, <19> {"0_20","13_19","15_19","16_19","18_19","19_19","4_20","5_19","6_19","7_19"}, <20> {"0_20","20_20","4_20"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Locale_by_use"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Purpose"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Part_inner_outer"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Required_event"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Appointing"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Locale"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Vehicle"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Protecting"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Offenses"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Locale_by_use"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Purpose"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Part_inner_outer"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Required_event"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Appointing"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Locale"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Vehicle"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Protecting"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Offenses"] do sum <s> in Spans : z8[r,s] == 1;
#pairwise exclusion constraint
set Exc1 := {<"Attribute","Goal">,<"Goal","Value">};
subto exclusion1: forall <ri,rj> in Exc1 do z1[ri,"-1_-1"] + z1[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
set Reqr1 := {<"Attribute","Value">};
subto require1: forall <ri,rj> in Reqr1 do z1[ri,"-1_-1"] - z1[rj,"-1_-1"] == 0;
