# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Roadways","Travel","Locale_by_use"};
set Roles[Frames] :=  <"Roadways"> {"Characteristic","Length","Use","Frequency_of_use","Goal","Relative_location","Endpoints","Direction","Source","Material","Path","Roadway","Name","Abundant_entities"}, <"Travel"> {"Mode_of_transportation","Area","Time","Path","Reason","Depictive","Traveler","Means","Frequency","Place","Manner","Co_participant","Source","Distance","Descriptor","Speed","Purpose","Travel_means","Duration","Goal","Baggage","Period_of_Iterations","Direction","Iterations"}, <"Locale_by_use"> {"Formational_cause","Use","Locale","Relative_location","Name","Container_possessor","Constituent_parts","Descriptor"};
set Spans := {"-1_-1","0_0","0_1","0_14","10_10","11_11","12_12","13_13","14_14","1_1","2_2","3_3","3_4","4_4","5_5","6_6","7_13","7_7","8_10","8_13","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Roadways"]] binary;
var z1[Assignment["Travel"]] binary;
var z2[Assignment["Locale_by_use"]] binary;
param probabilities0[Assignment["Roadways"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Travel"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Locale_by_use"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Roadways"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Travel"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Locale_by_use"] : probabilities2[r,s] * z2[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 14};
set G[I] := <0> {"0_0","0_1","0_14"}, <1> {"0_1","0_14","1_1"}, <2> {"0_14","2_2"}, <3> {"0_14","3_3","3_4"}, <4> {"0_14","3_4","4_4"}, <5> {"0_14","5_5"}, <6> {"0_14","6_6"}, <7> {"0_14","7_13","7_7"}, <8> {"0_14","7_13","8_10","8_13","8_8"}, <9> {"0_14","7_13","8_10","8_13","9_9"}, <10> {"0_14","10_10","7_13","8_10","8_13"}, <11> {"0_14","11_11","7_13","8_13"}, <12> {"0_14","12_12","7_13","8_13"}, <13> {"0_14","13_13","7_13","8_13"}, <14> {"0_14","14_14"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Roadways"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Travel"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Locale_by_use"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Roadways"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Travel"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Locale_by_use"] do sum <s> in Spans : z2[r,s] == 1;
#pairwise exclusion constraint
set Exc1 := {<"Area","Direction">,<"Area","Goal">,<"Area","Path">,<"Area","Source">};
subto exclusion1: forall <ri,rj> in Exc1 do z1[ri,"-1_-1"] + z1[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
