# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Existence","Locale_by_use","Building_subparts","Capability","Causation","Roadways","Building_subparts","Ground_up","Architectural_part"};
set Roles[Frames] :=  <"Existence"> {"Place","Duration","Inherent_purpose","Entity","Point_of_view","Time","Circumstances","State","Cause"}, <"Locale_by_use"> {"Formational_cause","Use","Locale","Relative_location","Name","Container_possessor","Constituent_parts","Descriptor"}, <"Building_subparts"> {"Whole","Type","Building_part","Use"}, <"Capability"> {"Degree","Status","Entity","Relevant_feature","Circumstances","Role","Event","Cause"}, <"Causation"> {"Circumstances","Time","Actor","Place","Frequency","Means","Effect","Cause","Reason","Affected","Manner","Concessive","Explanation"}, <"Roadways"> {"Characteristic","Length","Use","Frequency_of_use","Goal","Relative_location","Endpoints","Direction","Source","Material","Path","Roadway","Name","Abundant_entities"}, <"Building_subparts"> {"Whole","Type","Building_part","Use"}, <"Ground_up"> {"Result","Undergoer"}, <"Architectural_part"> {"Part","Whole","Descriptor","Material","Orientation"};
set Spans := {"-1_-1","0_0","0_1","0_2","0_26","10_10","11_11","12_12","13_13","14_14","14_25","15_15","15_18","16_16","17_17","18_18","19_19","19_25","1_1","1_2","20_20","20_21","20_25","21_21","22_22","22_25","23_23","23_25","24_24","25_25","26_26","2_2","3_3","4_4","4_5","5_5","6_6","7_13","7_25","7_7","7_9","8_8","8_9","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Existence"]] binary;
var z1[Assignment["Locale_by_use"]] binary;
var z2[Assignment["Building_subparts"]] binary;
var z3[Assignment["Capability"]] binary;
var z4[Assignment["Causation"]] binary;
var z5[Assignment["Roadways"]] binary;
var z6[Assignment["Building_subparts"]] binary;
var z7[Assignment["Ground_up"]] binary;
var z8[Assignment["Architectural_part"]] binary;
param probabilities0[Assignment["Existence"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Locale_by_use"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Building_subparts"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Capability"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Causation"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Roadways"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Building_subparts"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Ground_up"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Architectural_part"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Existence"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Locale_by_use"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Building_subparts"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Capability"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Causation"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Roadways"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Building_subparts"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Ground_up"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Architectural_part"] : probabilities8[r,s] * z8[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 26};
set G[I] := <0> {"0_0","0_1","0_2","0_26"}, <1> {"0_1","0_2","0_26","1_1","1_2"}, <2> {"0_2","0_26","1_2","2_2"}, <3> {"0_26","3_3"}, <4> {"0_26","4_4","4_5"}, <5> {"0_26","4_5","5_5"}, <6> {"0_26","6_6"}, <7> {"0_26","7_13","7_25","7_7","7_9"}, <8> {"0_26","7_13","7_25","7_9","8_8","8_9"}, <9> {"0_26","7_13","7_25","7_9","8_9","9_9"}, <10> {"0_26","10_10","7_13","7_25"}, <11> {"0_26","11_11","7_13","7_25"}, <12> {"0_26","12_12","7_13","7_25"}, <13> {"0_26","13_13","7_13","7_25"}, <14> {"0_26","14_14","14_25","7_25"}, <15> {"0_26","14_25","15_15","15_18","7_25"}, <16> {"0_26","14_25","15_18","16_16","7_25"}, <17> {"0_26","14_25","15_18","17_17","7_25"}, <18> {"0_26","14_25","15_18","18_18","7_25"}, <19> {"0_26","14_25","19_19","19_25","7_25"}, <20> {"0_26","14_25","19_25","20_20","20_21","20_25","7_25"}, <21> {"0_26","14_25","19_25","20_21","20_25","21_21","7_25"}, <22> {"0_26","14_25","19_25","20_25","22_22","22_25","7_25"}, <23> {"0_26","14_25","19_25","20_25","22_25","23_23","23_25","7_25"}, <24> {"0_26","14_25","19_25","20_25","22_25","23_25","24_24","7_25"}, <25> {"0_26","14_25","19_25","20_25","22_25","23_25","25_25","7_25"}, <26> {"0_26","26_26"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Existence"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Locale_by_use"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Building_subparts"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Capability"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Causation"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Roadways"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Building_subparts"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Ground_up"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Architectural_part"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Existence"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Locale_by_use"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Building_subparts"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Capability"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Causation"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Roadways"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Building_subparts"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Ground_up"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Architectural_part"] do sum <s> in Spans : z8[r,s] == 1;
#pairwise exclusion constraint
#pairwise requirement constraint
