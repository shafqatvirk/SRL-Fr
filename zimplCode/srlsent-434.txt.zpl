# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Weapon","Causation","Temporal_subregion","Causation","Position_on_a_scale","Project","Response","Type","Substance","Attack","Becoming_aware","Origin","Attempt","Stage_of_progress","Active_substance","Process_continue","Stimulus_focus","Active_substance"};
set Roles[Frames] :=  <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Causation"> {"Circumstances","Time","Actor","Place","Frequency","Means","Effect","Cause","Reason","Affected","Manner","Concessive","Explanation"}, <"Temporal_subregion"> {"Time_period","Time","Degree","Sub_part"}, <"Causation"> {"Circumstances","Time","Actor","Place","Frequency","Means","Effect","Cause","Reason","Affected","Manner","Concessive","Explanation"}, <"Position_on_a_scale"> {"Domain","Value","Item","Variable","Degree"}, <"Project"> {"Salient_entity","Duration","Agent","Goal","Manner","Name","Project","Field","Descriptor","Activity"}, <"Response"> {"Responding_entity","Response","Agent","Manner","Dimension","Time","Role","Purpose","Trigger","Place"}, <"Type"> {"Item_Property","Category","Subtype","Type_Property"}, <"Substance"> {"Source","Type","Use","Descriptor","Substance","Constituents"}, <"Attack"> {"Particular_iteration","Iteration","Event_description","Means","Depictive","Circumstances","Manner","Result","Explanation","Time","Source","Containing_event","Place","Re_encoding","Weapon","Purpose","Victim","Path","Assailant"}, <"Becoming_aware"> {"Purpose","Circumstances","Topic","Time","Instrument","Frequency","Degree","Means","Period_of_iterations","Cognizer","State","Particular_iteration","Phenomenon","Ground","Manner","Evidence","Explanation"}, <"Origin"> {"Entity","Origin"}, <"Attempt"> {"Purpose","Circumstances","Time","Goal","Particular_iteration","Place","Frequency","Degree","Means","Outcome","Condition","Depictive","Duration","Manner","Agent"}, <"Stage_of_progress"> {"Degree","Entity"}, <"Active_substance"> {"Name","Type","Substance","Descriptor","Effect"}, <"Process_continue"> {"Duration","Place","Manner","Time","Circumstances","Depictive","Event","Concessive"}, <"Stimulus_focus"> {"Stimulus","Parameter","Circumstances","Property","Experiencer","Comparison_set","Degree"}, <"Active_substance"> {"Name","Type","Substance","Descriptor","Effect"};
set Spans := {"-1_-1","0_0","0_3","0_48","10_10","11_11","11_15","12_12","12_15","13_13","14_14","15_15","16_16","16_19","17_17","18_18","18_19","19_19","1_1","1_3","20_20","20_47","21_21","21_47","22_22","22_23","23_23","24_24","24_47","25_25","25_26","25_28","25_31","25_47","26_26","27_27","28_28","29_29","2_2","30_30","31_31","32_32","32_47","33_33","33_47","34_34","35_35","36_36","36_38","37_37","37_38","38_38","39_39","3_3","40_40","40_41","40_47","41_41","42_42","42_47","43_43","43_44","44_44","45_45","46_46","47_47","48_48","4_4","5_5","6_6","7_47","7_7","8_10","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Weapon"]] binary;
var z1[Assignment["Causation"]] binary;
var z2[Assignment["Temporal_subregion"]] binary;
var z3[Assignment["Causation"]] binary;
var z4[Assignment["Position_on_a_scale"]] binary;
var z5[Assignment["Project"]] binary;
var z6[Assignment["Response"]] binary;
var z7[Assignment["Type"]] binary;
var z8[Assignment["Substance"]] binary;
var z9[Assignment["Attack"]] binary;
var z10[Assignment["Becoming_aware"]] binary;
var z11[Assignment["Origin"]] binary;
var z12[Assignment["Attempt"]] binary;
var z13[Assignment["Stage_of_progress"]] binary;
var z14[Assignment["Active_substance"]] binary;
var z15[Assignment["Process_continue"]] binary;
var z16[Assignment["Stimulus_focus"]] binary;
var z17[Assignment["Active_substance"]] binary;
param probabilities0[Assignment["Weapon"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Causation"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Temporal_subregion"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Causation"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Position_on_a_scale"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Project"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Response"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Type"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Substance"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Attack"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Becoming_aware"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;
param probabilities11[Assignment["Origin"]] := read "../frameData/frame11.txt" as "<1s,2s> 3n" skip 2;
param probabilities12[Assignment["Attempt"]] := read "../frameData/frame12.txt" as "<1s,2s> 3n" skip 2;
param probabilities13[Assignment["Stage_of_progress"]] := read "../frameData/frame13.txt" as "<1s,2s> 3n" skip 2;
param probabilities14[Assignment["Active_substance"]] := read "../frameData/frame14.txt" as "<1s,2s> 3n" skip 2;
param probabilities15[Assignment["Process_continue"]] := read "../frameData/frame15.txt" as "<1s,2s> 3n" skip 2;
param probabilities16[Assignment["Stimulus_focus"]] := read "../frameData/frame16.txt" as "<1s,2s> 3n" skip 2;
param probabilities17[Assignment["Active_substance"]] := read "../frameData/frame17.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Weapon"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Causation"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Temporal_subregion"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Causation"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Position_on_a_scale"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Project"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Response"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Type"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Substance"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Attack"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Becoming_aware"] : probabilities10[r,s] * z10[r,s])+(sum <r,s> in Assignment["Origin"] : probabilities11[r,s] * z11[r,s])+(sum <r,s> in Assignment["Attempt"] : probabilities12[r,s] * z12[r,s])+(sum <r,s> in Assignment["Stage_of_progress"] : probabilities13[r,s] * z13[r,s])+(sum <r,s> in Assignment["Active_substance"] : probabilities14[r,s] * z14[r,s])+(sum <r,s> in Assignment["Process_continue"] : probabilities15[r,s] * z15[r,s])+(sum <r,s> in Assignment["Stimulus_focus"] : probabilities16[r,s] * z16[r,s])+(sum <r,s> in Assignment["Active_substance"] : probabilities17[r,s] * z17[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 48};
set G[I] := <0> {"0_0","0_3","0_48"}, <1> {"0_3","0_48","1_1","1_3"}, <2> {"0_3","0_48","1_3","2_2"}, <3> {"0_3","0_48","1_3","3_3"}, <4> {"0_48","4_4"}, <5> {"0_48","5_5"}, <6> {"0_48","6_6"}, <7> {"0_48","7_47","7_7"}, <8> {"0_48","7_47","8_10","8_8"}, <9> {"0_48","7_47","8_10","9_9"}, <10> {"0_48","10_10","7_47","8_10"}, <11> {"0_48","11_11","11_15","7_47"}, <12> {"0_48","11_15","12_12","12_15","7_47"}, <13> {"0_48","11_15","12_15","13_13","7_47"}, <14> {"0_48","11_15","12_15","14_14","7_47"}, <15> {"0_48","11_15","12_15","15_15","7_47"}, <16> {"0_48","16_16","16_19","7_47"}, <17> {"0_48","16_19","17_17","7_47"}, <18> {"0_48","16_19","18_18","18_19","7_47"}, <19> {"0_48","16_19","18_19","19_19","7_47"}, <20> {"0_48","20_20","20_47","7_47"}, <21> {"0_48","20_47","21_21","21_47","7_47"}, <22> {"0_48","20_47","21_47","22_22","22_23","7_47"}, <23> {"0_48","20_47","21_47","22_23","23_23","7_47"}, <24> {"0_48","20_47","21_47","24_24","24_47","7_47"}, <25> {"0_48","20_47","21_47","24_47","25_25","25_26","25_28","25_31","25_47","7_47"}, <26> {"0_48","20_47","21_47","24_47","25_26","25_28","25_31","25_47","26_26","7_47"}, <27> {"0_48","20_47","21_47","24_47","25_28","25_31","25_47","27_27","7_47"}, <28> {"0_48","20_47","21_47","24_47","25_28","25_31","25_47","28_28","7_47"}, <29> {"0_48","20_47","21_47","24_47","25_31","25_47","29_29","7_47"}, <30> {"0_48","20_47","21_47","24_47","25_31","25_47","30_30","7_47"}, <31> {"0_48","20_47","21_47","24_47","25_31","25_47","31_31","7_47"}, <32> {"0_48","20_47","21_47","24_47","25_47","32_32","32_47","7_47"}, <33> {"0_48","20_47","21_47","24_47","25_47","32_47","33_33","33_47","7_47"}, <34> {"0_48","20_47","21_47","24_47","25_47","32_47","33_47","34_34","7_47"}, <35> {"0_48","20_47","21_47","24_47","25_47","32_47","33_47","35_35","7_47"}, <36> {"0_48","20_47","21_47","24_47","25_47","32_47","33_47","36_36","36_38","7_47"}, <37> {"0_48","20_47","21_47","24_47","25_47","32_47","33_47","36_38","37_37","37_38","7_47"}, <38> {"0_48","20_47","21_47","24_47","25_47","32_47","33_47","36_38","37_38","38_38","7_47"}, <39> {"0_48","20_47","21_47","24_47","25_47","32_47","33_47","39_39","7_47"}, <40> {"0_48","20_47","21_47","24_47","25_47","32_47","33_47","40_40","40_41","40_47","7_47"}, <41> {"0_48","20_47","21_47","24_47","25_47","32_47","33_47","40_41","40_47","41_41","7_47"}, <42> {"0_48","20_47","21_47","24_47","25_47","32_47","33_47","40_47","42_42","42_47","7_47"}, <43> {"0_48","20_47","21_47","24_47","25_47","32_47","33_47","40_47","42_47","43_43","43_44","7_47"}, <44> {"0_48","20_47","21_47","24_47","25_47","32_47","33_47","40_47","42_47","43_44","44_44","7_47"}, <45> {"0_48","20_47","21_47","24_47","25_47","32_47","33_47","40_47","42_47","45_45","7_47"}, <46> {"0_48","20_47","21_47","24_47","25_47","32_47","33_47","40_47","42_47","46_46","7_47"}, <47> {"0_48","20_47","21_47","24_47","25_47","32_47","33_47","40_47","42_47","47_47","7_47"}, <48> {"0_48","48_48"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Causation"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Temporal_subregion"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Causation"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Position_on_a_scale"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Project"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Response"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Type"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Substance"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Attack"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Becoming_aware"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
subto overlap11: forall <i> in I do 
 sum <r> in Roles["Origin"] do 
 sum <s> in G[i] do z11[r,s] <= 1;
subto overlap12: forall <i> in I do 
 sum <r> in Roles["Attempt"] do 
 sum <s> in G[i] do z12[r,s] <= 1;
subto overlap13: forall <i> in I do 
 sum <r> in Roles["Stage_of_progress"] do 
 sum <s> in G[i] do z13[r,s] <= 1;
subto overlap14: forall <i> in I do 
 sum <r> in Roles["Active_substance"] do 
 sum <s> in G[i] do z14[r,s] <= 1;
subto overlap15: forall <i> in I do 
 sum <r> in Roles["Process_continue"] do 
 sum <s> in G[i] do z15[r,s] <= 1;
subto overlap16: forall <i> in I do 
 sum <r> in Roles["Stimulus_focus"] do 
 sum <s> in G[i] do z16[r,s] <= 1;
subto overlap17: forall <i> in I do 
 sum <r> in Roles["Active_substance"] do 
 sum <s> in G[i] do z17[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Weapon"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Causation"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Temporal_subregion"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Causation"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Position_on_a_scale"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Project"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Response"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Type"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Substance"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Attack"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Becoming_aware"] do sum <s> in Spans : z10[r,s] == 1;
subto unique11: forall <r> in Roles["Origin"] do sum <s> in Spans : z11[r,s] == 1;
subto unique12: forall <r> in Roles["Attempt"] do sum <s> in Spans : z12[r,s] == 1;
subto unique13: forall <r> in Roles["Stage_of_progress"] do sum <s> in Spans : z13[r,s] == 1;
subto unique14: forall <r> in Roles["Active_substance"] do sum <s> in Spans : z14[r,s] == 1;
subto unique15: forall <r> in Roles["Process_continue"] do sum <s> in Spans : z15[r,s] == 1;
subto unique16: forall <r> in Roles["Stimulus_focus"] do sum <s> in Spans : z16[r,s] == 1;
subto unique17: forall <r> in Roles["Active_substance"] do sum <s> in Spans : z17[r,s] == 1;
#pairwise exclusion constraint
set Exc5 := {<"Activity","Salient_entity">};
subto exclusion5: forall <ri,rj> in Exc5 do z5[ri,"-1_-1"] + z5[rj,"-1_-1"] >= 1;
set Exc6 := {<"Agent","Responding_entity">};
subto exclusion6: forall <ri,rj> in Exc6 do z6[ri,"-1_-1"] + z6[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
