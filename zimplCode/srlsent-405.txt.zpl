# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Summarizing","Desirable_event","Grant_permission","Intentionally_act","Awareness","Education_teaching","Education_teaching","Reforming_a_system","Intentionally_act","Usefulness","Intentionally_act","Usefulness","Kinship","Participation"};
set Roles[Frames] :=  <"Summarizing"> {"Place","Summary","Addressee","Containing_event","Medium","Manner","State_of_affairs","Time","Circumstances","Means","Communicator"}, <"Desirable_event"> {"State_of_affairs","Purpose"}, <"Grant_permission"> {"Purpose","Circumstances","Time","Reason","Place","Frequency","Means","Period_of_iterations","Grantee","Depictive","Grantor","Manner","Action"}, <"Intentionally_act"> {"Purpose","Result","Time","Place","Frequency","Means","Event_dscription","Period_of_iterations","Domain","Act","Particular_iteration","Manner","Explanation","Agent"}, <"Awareness"> {"Cognizer","Topic","Degree","Role","Manner","Evidence","Explanation","Time","Content","Expressor","Paradigm"}, <"Education_teaching"> {"Duration","Depictive","Purpose","Means","Role","Institution","Level","Manner","Result","Subject","Teacher","Course","Time","Material","Degree","Place","Skill","Qualification","Student","Fact","Precept"}, <"Education_teaching"> {"Duration","Depictive","Purpose","Means","Role","Institution","Level","Manner","Result","Subject","Teacher","Course","Time","Material","Degree","Place","Skill","Qualification","Student","Fact","Precept"}, <"Reforming_a_system"> {"Purpose","Circumstances","Re-encoding","Time","Initial_category","Place","Degree","Means","Cause","Final_category","Event_description","Duration","Entity","Manner","Explanation","Agent"}, <"Intentionally_act"> {"Purpose","Result","Time","Place","Frequency","Means","Event_dscription","Period_of_iterations","Domain","Act","Particular_iteration","Manner","Explanation","Agent"}, <"Usefulness"> {"Purpose","Domain","Time","Degree","Entity"}, <"Intentionally_act"> {"Purpose","Result","Time","Place","Frequency","Means","Event_dscription","Period_of_iterations","Domain","Act","Particular_iteration","Manner","Explanation","Agent"}, <"Usefulness"> {"Purpose","Domain","Time","Degree","Entity"}, <"Kinship"> {"Relatives","Descriptor","Ego","Degree","Alter"}, <"Participation"> {"Purpose","Time","Place","Institution","Participants","Event","Means","Participant_2","Participant_1","Duration","Degree_of_involvement","Manner"};
set Spans := {"-1_-1","0_0","0_21","0_32","10_10","11_11","11_21","12_12","12_14","12_21","13_13","14_14","15_15","15_21","16_16","16_21","17_17","18_18","19_19","19_21","1_1","1_21","20_20","21_21","22_22","23_23","24_24","25_25","25_26","26_26","27_27","28_28","29_29","29_31","2_2","2_21","30_30","31_31","32_32","3_3","4_21","4_4","5_21","5_5","5_6","6_21","6_6","7_21","7_7","8_21","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Summarizing"]] binary;
var z1[Assignment["Desirable_event"]] binary;
var z2[Assignment["Grant_permission"]] binary;
var z3[Assignment["Intentionally_act"]] binary;
var z4[Assignment["Awareness"]] binary;
var z5[Assignment["Education_teaching"]] binary;
var z6[Assignment["Education_teaching"]] binary;
var z7[Assignment["Reforming_a_system"]] binary;
var z8[Assignment["Intentionally_act"]] binary;
var z9[Assignment["Usefulness"]] binary;
var z10[Assignment["Intentionally_act"]] binary;
var z11[Assignment["Usefulness"]] binary;
var z12[Assignment["Kinship"]] binary;
var z13[Assignment["Participation"]] binary;
param probabilities0[Assignment["Summarizing"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Desirable_event"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Grant_permission"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Intentionally_act"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Awareness"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Education_teaching"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Education_teaching"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Reforming_a_system"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Intentionally_act"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Usefulness"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Intentionally_act"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;
param probabilities11[Assignment["Usefulness"]] := read "../frameData/frame11.txt" as "<1s,2s> 3n" skip 2;
param probabilities12[Assignment["Kinship"]] := read "../frameData/frame12.txt" as "<1s,2s> 3n" skip 2;
param probabilities13[Assignment["Participation"]] := read "../frameData/frame13.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Summarizing"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Desirable_event"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Grant_permission"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Intentionally_act"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Awareness"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Education_teaching"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Education_teaching"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Reforming_a_system"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Intentionally_act"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Usefulness"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Intentionally_act"] : probabilities10[r,s] * z10[r,s])+(sum <r,s> in Assignment["Usefulness"] : probabilities11[r,s] * z11[r,s])+(sum <r,s> in Assignment["Kinship"] : probabilities12[r,s] * z12[r,s])+(sum <r,s> in Assignment["Participation"] : probabilities13[r,s] * z13[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 32};
set G[I] := <0> {"0_0","0_21","0_32"}, <1> {"0_21","0_32","1_1","1_21"}, <2> {"0_21","0_32","1_21","2_2","2_21"}, <3> {"0_21","0_32","1_21","2_21","3_3"}, <4> {"0_21","0_32","1_21","2_21","4_21","4_4"}, <5> {"0_21","0_32","1_21","2_21","4_21","5_21","5_5","5_6"}, <6> {"0_21","0_32","1_21","2_21","4_21","5_21","5_6","6_21","6_6"}, <7> {"0_21","0_32","1_21","2_21","4_21","5_21","6_21","7_21","7_7"}, <8> {"0_21","0_32","1_21","2_21","4_21","5_21","6_21","7_21","8_21","8_8"}, <9> {"0_21","0_32","1_21","2_21","4_21","5_21","6_21","7_21","8_21","9_9"}, <10> {"0_21","0_32","10_10","1_21","2_21","4_21","5_21","6_21","7_21","8_21"}, <11> {"0_21","0_32","11_11","11_21","1_21","2_21","4_21","5_21","6_21","7_21","8_21"}, <12> {"0_21","0_32","11_21","12_12","12_14","12_21","1_21","2_21","4_21","5_21","6_21","7_21","8_21"}, <13> {"0_21","0_32","11_21","12_14","12_21","13_13","1_21","2_21","4_21","5_21","6_21","7_21","8_21"}, <14> {"0_21","0_32","11_21","12_14","12_21","14_14","1_21","2_21","4_21","5_21","6_21","7_21","8_21"}, <15> {"0_21","0_32","11_21","12_21","15_15","15_21","1_21","2_21","4_21","5_21","6_21","7_21","8_21"}, <16> {"0_21","0_32","11_21","12_21","15_21","16_16","16_21","1_21","2_21","4_21","5_21","6_21","7_21","8_21"}, <17> {"0_21","0_32","11_21","12_21","15_21","16_21","17_17","1_21","2_21","4_21","5_21","6_21","7_21","8_21"}, <18> {"0_21","0_32","11_21","12_21","15_21","16_21","18_18","1_21","2_21","4_21","5_21","6_21","7_21","8_21"}, <19> {"0_21","0_32","11_21","12_21","15_21","16_21","19_19","19_21","1_21","2_21","4_21","5_21","6_21","7_21","8_21"}, <20> {"0_21","0_32","11_21","12_21","15_21","16_21","19_21","1_21","20_20","2_21","4_21","5_21","6_21","7_21","8_21"}, <21> {"0_21","0_32","11_21","12_21","15_21","16_21","19_21","1_21","21_21","2_21","4_21","5_21","6_21","7_21","8_21"}, <22> {"0_32","22_22"}, <23> {"0_32","23_23"}, <24> {"0_32","24_24"}, <25> {"0_32","25_25","25_26"}, <26> {"0_32","25_26","26_26"}, <27> {"0_32","27_27"}, <28> {"0_32","28_28"}, <29> {"0_32","29_29","29_31"}, <30> {"0_32","29_31","30_30"}, <31> {"0_32","29_31","31_31"}, <32> {"0_32","32_32"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Summarizing"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Desirable_event"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Grant_permission"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Intentionally_act"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Awareness"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Education_teaching"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Education_teaching"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Reforming_a_system"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Intentionally_act"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Usefulness"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Intentionally_act"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
subto overlap11: forall <i> in I do 
 sum <r> in Roles["Usefulness"] do 
 sum <s> in G[i] do z11[r,s] <= 1;
subto overlap12: forall <i> in I do 
 sum <r> in Roles["Kinship"] do 
 sum <s> in G[i] do z12[r,s] <= 1;
subto overlap13: forall <i> in I do 
 sum <r> in Roles["Participation"] do 
 sum <s> in G[i] do z13[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Summarizing"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Desirable_event"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Grant_permission"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Intentionally_act"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Awareness"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Education_teaching"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Education_teaching"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Reforming_a_system"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Intentionally_act"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Usefulness"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Intentionally_act"] do sum <s> in Spans : z10[r,s] == 1;
subto unique11: forall <r> in Roles["Usefulness"] do sum <s> in Spans : z11[r,s] == 1;
subto unique12: forall <r> in Roles["Kinship"] do sum <s> in Spans : z12[r,s] == 1;
subto unique13: forall <r> in Roles["Participation"] do sum <s> in Spans : z13[r,s] == 1;
#pairwise exclusion constraint
set Exc4 := {<"Cognizer","Expressor">};
subto exclusion4: forall <ri,rj> in Exc4 do z4[ri,"-1_-1"] + z4[rj,"-1_-1"] >= 1;
set Exc5 := {<"Precept","Subject">,<"Precept","Skill">,<"Skill","Subject">,<"Fact","Precept">,<"Fact","Qualification">};
subto exclusion5: forall <ri,rj> in Exc5 do z5[ri,"-1_-1"] + z5[rj,"-1_-1"] >= 1;
set Exc6 := {<"Precept","Subject">,<"Precept","Skill">,<"Skill","Subject">,<"Fact","Precept">,<"Fact","Qualification">};
subto exclusion6: forall <ri,rj> in Exc6 do z6[ri,"-1_-1"] + z6[rj,"-1_-1"] >= 1;
set Exc7 := {<"Agent","Cause">};
subto exclusion7: forall <ri,rj> in Exc7 do z7[ri,"-1_-1"] + z7[rj,"-1_-1"] >= 1;
set Exc12 := {<"Ego","Relatives">,<"Alter","Relatives">};
subto exclusion12: forall <ri,rj> in Exc12 do z12[ri,"-1_-1"] + z12[rj,"-1_-1"] >= 1;
set Exc13 := {<"Event","Institution">,<"Participant_2","Participants">,<"Participant_1","Participants">};
subto exclusion13: forall <ri,rj> in Exc13 do z13[ri,"-1_-1"] + z13[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
set Reqr12 := {<"Alter","Ego">};
subto require12: forall <ri,rj> in Reqr12 do z12[ri,"-1_-1"] - z12[rj,"-1_-1"] == 0;
