# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Killing","Weapon","Practice","Causation","Relational_quantity","Cardinal_numbers","Political_locales","People","Intentionally_act","Calendric_unit","Calendric_unit"};
set Roles[Frames] :=  <"Killing"> {"Purpose","Means","Depictive","Circumstances","Manner","Result","Explanation","Instrument","Cause","Time","Killer","Beneficiary","Degree","Place","Frequency","Reason","Period_of_iterations","Victim"}, <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Practice"> {"Place","Duration","Agent","Action","Iteration","Co_participant","Time","Means","Manner","Purpose","Occasion"}, <"Causation"> {"Circumstances","Time","Actor","Place","Frequency","Means","Effect","Cause","Reason","Affected","Manner","Concessive","Explanation"}, <"Relational_quantity"> {"Mass","Denoted_quantity","Reference_quantity","Individuals"}, <"Cardinal_numbers"> {"Precision","Number","Multiplier","Entity"}, <"Political_locales"> {"Relative_location","Constituent_parts","Container_possessor","Descriptor","Name","Population","Locale"}, <"People"> {"Person","Ethnicity","Persistent_characteristic","Context_of_acquaintance","Descriptor","Age","Origin"}, <"Intentionally_act"> {"Purpose","Result","Time","Place","Frequency","Means","Event_dscription","Period_of_iterations","Domain","Act","Particular_iteration","Manner","Explanation","Agent"}, <"Calendric_unit"> {"Relative_time","Unit","Count","Name","Salient_event","Whole"}, <"Calendric_unit"> {"Relative_time","Unit","Count","Name","Salient_event","Whole"};
set Spans := {"-1_-1","0_0","0_17","10_10","11_11","12_12","13_13","13_14","14_14","15_15","15_16","16_16","17_17","1_1","1_5","2_2","3_3","4_4","5_5","6_6","7_12","7_7","7_8","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Killing"]] binary;
var z1[Assignment["Weapon"]] binary;
var z2[Assignment["Practice"]] binary;
var z3[Assignment["Causation"]] binary;
var z4[Assignment["Relational_quantity"]] binary;
var z5[Assignment["Cardinal_numbers"]] binary;
var z6[Assignment["Political_locales"]] binary;
var z7[Assignment["People"]] binary;
var z8[Assignment["Intentionally_act"]] binary;
var z9[Assignment["Calendric_unit"]] binary;
var z10[Assignment["Calendric_unit"]] binary;
param probabilities0[Assignment["Killing"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Weapon"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Practice"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Causation"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Relational_quantity"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Cardinal_numbers"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Political_locales"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["People"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Intentionally_act"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Calendric_unit"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Calendric_unit"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Killing"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Weapon"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Practice"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Causation"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Relational_quantity"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Cardinal_numbers"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Political_locales"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["People"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Intentionally_act"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Calendric_unit"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Calendric_unit"] : probabilities10[r,s] * z10[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 17};
set G[I] := <0> {"0_0","0_17"}, <1> {"0_17","1_1","1_5"}, <2> {"0_17","1_5","2_2"}, <3> {"0_17","1_5","3_3"}, <4> {"0_17","1_5","4_4"}, <5> {"0_17","1_5","5_5"}, <6> {"0_17","6_6"}, <7> {"0_17","7_12","7_7","7_8"}, <8> {"0_17","7_12","7_8","8_8"}, <9> {"0_17","7_12","9_9"}, <10> {"0_17","10_10","7_12"}, <11> {"0_17","11_11","7_12"}, <12> {"0_17","12_12","7_12"}, <13> {"0_17","13_13","13_14"}, <14> {"0_17","13_14","14_14"}, <15> {"0_17","15_15","15_16"}, <16> {"0_17","15_16","16_16"}, <17> {"0_17","17_17"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Killing"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Practice"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Causation"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Relational_quantity"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Cardinal_numbers"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Political_locales"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["People"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Intentionally_act"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Calendric_unit"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Calendric_unit"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Killing"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Weapon"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Practice"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Causation"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Relational_quantity"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Cardinal_numbers"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Political_locales"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["People"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Intentionally_act"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Calendric_unit"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Calendric_unit"] do sum <s> in Spans : z10[r,s] == 1;
#pairwise exclusion constraint
set Exc0 := {<"Cause","Killer">,<"Cause","Means">,<"Cause","Instrument">};
subto exclusion0: forall <ri,rj> in Exc0 do z0[ri,"-1_-1"] + z0[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
