# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Giving","Assistance","Intentionally_act","Increment","Calendric_unit","Giving","Using","Supporting","Working_on"};
set Roles[Frames] :=  <"Giving"> {"Recipient","Donor","Circumstances","Time","Place","Theme","Purpose","Means","Period_of_iterations","Reason","Depictive","Purpose_of_theme","Manner"}, <"Assistance"> {"Purpose","Time","Goal","Place","Frequency","Degree","Helper","Means","Benefited_party","Domain","Duration","Focal_entity","Manner","Explanation"}, <"Intentionally_act"> {"Purpose","Result","Time","Place","Frequency","Means","Event_dscription","Period_of_iterations","Domain","Act","Particular_iteration","Manner","Explanation","Agent"}, <"Increment"> {"Initial_set","Class","Increment","Added_set"}, <"Calendric_unit"> {"Relative_time","Unit","Count","Name","Salient_event","Whole"}, <"Giving"> {"Recipient","Donor","Circumstances","Time","Place","Theme","Purpose","Means","Period_of_iterations","Reason","Depictive","Purpose_of_theme","Manner"}, <"Using"> {"Duration","Depictive","Purpose","Means","Role","Circumstances","Agent","Manner","Explanation","Outcome","Instrument","Time","Period_of_iterations","Containing_event","Degree","Place","Frequency","Group"}, <"Supporting"> {"Event_description","Place","Supported","Degree","Manner","Time","Supporter","Means"}, <"Working_on"> {"Purpose","Descriptor","Event_description","Time","Goal","Salient_entity","Place","Frequency","Degree","Means","Domain","Depictive","Duration","Particular_iteration","Manner","Agent"};
set Spans := {"-1_-1","0_0","0_1","0_23","0_3","10_10","10_11","11_11","12_12","12_22","13_13","13_14","13_15","13_22","14_14","15_15","15_22","16_16","16_22","17_17","17_22","18_18","18_20","18_22","19_19","1_1","1_3","20_20","21_21","21_22","22_22","23_23","2_2","2_3","3_3","4_23","4_4","5_22","5_5","6_22","6_6","7_22","7_7","8_8","8_9","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Giving"]] binary;
var z1[Assignment["Assistance"]] binary;
var z2[Assignment["Intentionally_act"]] binary;
var z3[Assignment["Increment"]] binary;
var z4[Assignment["Calendric_unit"]] binary;
var z5[Assignment["Giving"]] binary;
var z6[Assignment["Using"]] binary;
var z7[Assignment["Supporting"]] binary;
var z8[Assignment["Working_on"]] binary;
param probabilities0[Assignment["Giving"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Assistance"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Intentionally_act"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Increment"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Calendric_unit"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Giving"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Using"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Supporting"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Working_on"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Giving"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Assistance"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Intentionally_act"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Increment"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Calendric_unit"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Giving"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Using"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Supporting"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Working_on"] : probabilities8[r,s] * z8[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 23};
set G[I] := <0> {"0_0","0_1","0_23","0_3"}, <1> {"0_1","0_23","0_3","1_1","1_3"}, <2> {"0_23","0_3","1_3","2_2","2_3"}, <3> {"0_23","0_3","1_3","2_3","3_3"}, <4> {"0_23","4_23","4_4"}, <5> {"0_23","4_23","5_22","5_5"}, <6> {"0_23","4_23","5_22","6_22","6_6"}, <7> {"0_23","4_23","5_22","6_22","7_22","7_7"}, <8> {"0_23","4_23","5_22","6_22","7_22","8_8","8_9"}, <9> {"0_23","4_23","5_22","6_22","7_22","8_9","9_9"}, <10> {"0_23","10_10","10_11","4_23","5_22","6_22","7_22"}, <11> {"0_23","10_11","11_11","4_23","5_22","6_22","7_22"}, <12> {"0_23","12_12","12_22","4_23","5_22","6_22","7_22"}, <13> {"0_23","12_22","13_13","13_14","13_15","13_22","4_23","5_22","6_22","7_22"}, <14> {"0_23","12_22","13_14","13_15","13_22","14_14","4_23","5_22","6_22","7_22"}, <15> {"0_23","12_22","13_15","13_22","15_15","15_22","4_23","5_22","6_22","7_22"}, <16> {"0_23","12_22","13_22","15_22","16_16","16_22","4_23","5_22","6_22","7_22"}, <17> {"0_23","12_22","13_22","15_22","16_22","17_17","17_22","4_23","5_22","6_22","7_22"}, <18> {"0_23","12_22","13_22","15_22","16_22","17_22","18_18","18_20","18_22","4_23","5_22","6_22","7_22"}, <19> {"0_23","12_22","13_22","15_22","16_22","17_22","18_20","18_22","19_19","4_23","5_22","6_22","7_22"}, <20> {"0_23","12_22","13_22","15_22","16_22","17_22","18_20","18_22","20_20","4_23","5_22","6_22","7_22"}, <21> {"0_23","12_22","13_22","15_22","16_22","17_22","18_22","21_21","21_22","4_23","5_22","6_22","7_22"}, <22> {"0_23","12_22","13_22","15_22","16_22","17_22","18_22","21_22","22_22","4_23","5_22","6_22","7_22"}, <23> {"0_23","23_23","4_23"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Giving"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Assistance"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Intentionally_act"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Increment"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Calendric_unit"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Giving"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Using"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Supporting"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Working_on"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Giving"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Assistance"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Intentionally_act"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Increment"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Calendric_unit"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Giving"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Using"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Supporting"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Working_on"] do sum <s> in Spans : z8[r,s] == 1;
#pairwise exclusion constraint
set Exc8 := {<"Goal","Salient_entity">};
subto exclusion8: forall <ri,rj> in Exc8 do z8[ri,"-1_-1"] + z8[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
