# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Activity_ongoing","Process_end","Direction","Lively_place","Political_locales","Building","Increment","Cardinal_numbers","Measure_area","Measure_area","Political_locales"};
set Roles[Frames] :=  <"Activity_ongoing"> {"Purpose","Circumstances","Depictive","Activity","Event_description","Duration","Manner","Time","Explanation","Means","Subevent","Agent"}, <"Process_end"> {"Last_subevent","Place","Result","Degree","Manner","Time","Reason","Depictive","Process"}, <"Direction"> {"Base_position","Independent_variable","Degree","Path"}, <"Lively_place"> {"Duration","Place","Degree","Manner","Explanation","Individuals","Time","Circumstances","Location","Activity"}, <"Political_locales"> {"Relative_location","Constituent_parts","Container_possessor","Descriptor","Name","Population","Locale"}, <"Building"> {"Purpose","Result","Components","Time","Descriptor","Instrument","Place","Created_entity","Means","Period_of_iterations","Particular_iteration","Duration","Beneficiary","Manner","Agent"}, <"Increment"> {"Initial_set","Class","Increment","Added_set"}, <"Cardinal_numbers"> {"Precision","Number","Multiplier","Entity"}, <"Measure_area"> {"Count","Occupant","Area","Unit"}, <"Measure_area"> {"Count","Occupant","Area","Unit"}, <"Political_locales"> {"Relative_location","Constituent_parts","Container_possessor","Descriptor","Name","Population","Locale"};
set Spans := {"-1_-1","0_0","0_36","0_8","10_10","11_11","12_12","12_35","13_13","13_35","14_14","14_17","14_22","14_35","15_15","16_16","17_17","18_18","19_19","1_1","1_2","1_8","20_20","21_21","22_22","23_23","23_35","24_24","24_35","25_25","25_26","25_27","25_28","25_35","26_26","26_27","27_27","28_28","28_35","29_29","29_35","2_2","2_8","30_30","31_31","32_32","33_33","33_35","34_34","34_35","35_35","36_36","3_3","3_8","4_4","4_5","4_8","5_5","6_6","6_8","7_7","7_8","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Activity_ongoing"]] binary;
var z1[Assignment["Process_end"]] binary;
var z2[Assignment["Direction"]] binary;
var z3[Assignment["Lively_place"]] binary;
var z4[Assignment["Political_locales"]] binary;
var z5[Assignment["Building"]] binary;
var z6[Assignment["Increment"]] binary;
var z7[Assignment["Cardinal_numbers"]] binary;
var z8[Assignment["Measure_area"]] binary;
var z9[Assignment["Measure_area"]] binary;
var z10[Assignment["Political_locales"]] binary;
param probabilities0[Assignment["Activity_ongoing"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Process_end"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Direction"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Lively_place"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Political_locales"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Building"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Increment"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Cardinal_numbers"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Measure_area"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Measure_area"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Political_locales"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Activity_ongoing"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Process_end"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Direction"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Lively_place"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Political_locales"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Building"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Increment"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Cardinal_numbers"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Measure_area"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Measure_area"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Political_locales"] : probabilities10[r,s] * z10[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 36};
set G[I] := <0> {"0_0","0_36","0_8"}, <1> {"0_36","0_8","1_1","1_2","1_8"}, <2> {"0_36","0_8","1_2","1_8","2_2","2_8"}, <3> {"0_36","0_8","1_8","2_8","3_3","3_8"}, <4> {"0_36","0_8","1_8","2_8","3_8","4_4","4_5","4_8"}, <5> {"0_36","0_8","1_8","2_8","3_8","4_5","4_8","5_5"}, <6> {"0_36","0_8","1_8","2_8","3_8","4_8","6_6","6_8"}, <7> {"0_36","0_8","1_8","2_8","3_8","4_8","6_8","7_7","7_8"}, <8> {"0_36","0_8","1_8","2_8","3_8","4_8","6_8","7_8","8_8"}, <9> {"0_36","9_9"}, <10> {"0_36","10_10"}, <11> {"0_36","11_11"}, <12> {"0_36","12_12","12_35"}, <13> {"0_36","12_35","13_13","13_35"}, <14> {"0_36","12_35","13_35","14_14","14_17","14_22","14_35"}, <15> {"0_36","12_35","13_35","14_17","14_22","14_35","15_15"}, <16> {"0_36","12_35","13_35","14_17","14_22","14_35","16_16"}, <17> {"0_36","12_35","13_35","14_17","14_22","14_35","17_17"}, <18> {"0_36","12_35","13_35","14_22","14_35","18_18"}, <19> {"0_36","12_35","13_35","14_22","14_35","19_19"}, <20> {"0_36","12_35","13_35","14_22","14_35","20_20"}, <21> {"0_36","12_35","13_35","14_22","14_35","21_21"}, <22> {"0_36","12_35","13_35","14_22","14_35","22_22"}, <23> {"0_36","12_35","13_35","14_35","23_23","23_35"}, <24> {"0_36","12_35","13_35","14_35","23_35","24_24","24_35"}, <25> {"0_36","12_35","13_35","14_35","23_35","24_35","25_25","25_26","25_27","25_28","25_35"}, <26> {"0_36","12_35","13_35","14_35","23_35","24_35","25_26","25_27","25_28","25_35","26_26","26_27"}, <27> {"0_36","12_35","13_35","14_35","23_35","24_35","25_27","25_28","25_35","26_27","27_27"}, <28> {"0_36","12_35","13_35","14_35","23_35","24_35","25_28","25_35","28_28","28_35"}, <29> {"0_36","12_35","13_35","14_35","23_35","24_35","25_35","28_35","29_29","29_35"}, <30> {"0_36","12_35","13_35","14_35","23_35","24_35","25_35","28_35","29_35","30_30"}, <31> {"0_36","12_35","13_35","14_35","23_35","24_35","25_35","28_35","29_35","31_31"}, <32> {"0_36","12_35","13_35","14_35","23_35","24_35","25_35","28_35","29_35","32_32"}, <33> {"0_36","12_35","13_35","14_35","23_35","24_35","25_35","28_35","29_35","33_33","33_35"}, <34> {"0_36","12_35","13_35","14_35","23_35","24_35","25_35","28_35","29_35","33_35","34_34","34_35"}, <35> {"0_36","12_35","13_35","14_35","23_35","24_35","25_35","28_35","29_35","33_35","34_35","35_35"}, <36> {"0_36","36_36"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Activity_ongoing"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Process_end"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Direction"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Lively_place"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Political_locales"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Building"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Increment"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Cardinal_numbers"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Measure_area"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Measure_area"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Political_locales"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Activity_ongoing"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Process_end"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Direction"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Lively_place"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Political_locales"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Building"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Increment"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Cardinal_numbers"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Measure_area"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Measure_area"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Political_locales"] do sum <s> in Spans : z10[r,s] == 1;
#pairwise exclusion constraint
set Exc8 := {<"Area","Occupant">};
subto exclusion8: forall <ri,rj> in Exc8 do z8[ri,"-1_-1"] + z8[rj,"-1_-1"] >= 1;
set Exc9 := {<"Area","Occupant">};
subto exclusion9: forall <ri,rj> in Exc9 do z9[ri,"-1_-1"] + z9[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
