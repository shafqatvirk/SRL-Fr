# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Existence","Waking_up","Kinship","Killing","Cardinal_numbers","Perception_active","Aggregate","Ordinal_numbers","Measure_duration","Quantity","Response","Kinship","Request","Contrition","Activity_ready_state","Collaboration"};
set Roles[Frames] :=  <"Existence"> {"Place","Duration","Inherent_purpose","Entity","Point_of_view","Time","Circumstances","State","Cause"}, <"Waking_up"> {"Particular_iteration","Place","Sleeper","World_state","Sleep_state","Manner","Explanation","Time","Circumstances","Depictive","Frequency"}, <"Kinship"> {"Relatives","Descriptor","Ego","Degree","Alter"}, <"Killing"> {"Purpose","Means","Depictive","Circumstances","Manner","Result","Explanation","Instrument","Cause","Time","Killer","Beneficiary","Degree","Place","Frequency","Reason","Period_of_iterations","Victim"}, <"Cardinal_numbers"> {"Precision","Number","Multiplier","Entity"}, <"Perception_active"> {"Purpose","Depictive","Place","Location_of_perceiver","Expected_entity","Body_part","Direction","State","Means","Phenomenon","Duration","Manner","Perceiver_agentive","Time"}, <"Aggregate"> {"Individuals","AggregateProperty","Aggregate","Name","Domain","Container_possessor"}, <"Ordinal_numbers"> {"Type","Item","Starting_point","Comparison_set","Basis_of_order"}, <"Measure_duration"> {"Agent","Count","Unit","Process"}, <"Quantity"> {"Mass","Q_Prop","Degree","Quantity","Individuals"}, <"Response"> {"Responding_entity","Response","Agent","Manner","Dimension","Time","Role","Purpose","Trigger","Place"}, <"Kinship"> {"Relatives","Descriptor","Ego","Degree","Alter"}, <"Request"> {"Addressee","Containing_event","Medium","Topic","Speaker","Time","Message","Iteration","Means","Manner","Depictive"}, <"Contrition"> {"Emotional_state","Degree","Action","Experiencer","Time","Expressor","Authenticity","Depictive"}, <"Activity_ready_state"> {"Time","Duration","Activity","Salient_entity","Degree","Protagonist"}, <"Collaboration"> {"Duration","Place","Undertaking","Partner_2","Partner_1","Time","Partners","Manner","Degree"};
set Spans := {"-1_-1","0_0","0_39","0_4","0_47","10_10","10_12","11_11","11_12","12_12","13_13","13_15","14_14","14_15","15_15","16_16","17_17","18_18","18_28","19_19","19_21","19_28","1_1","1_2","1_4","20_20","21_21","22_22","22_23","22_28","23_23","23_28","24_24","24_25","24_28","25_25","26_26","26_28","27_27","27_28","28_28","29_29","2_2","30_30","31_31","32_32","33_33","34_34","34_35","35_35","36_36","37_37","37_39","38_38","38_39","39_39","3_3","3_4","40_40","41_41","42_42","43_43","44_44","44_46","45_45","45_46","46_46","47_47","4_4","5_5","6_15","6_6","6_7","6_8","7_7","8_15","8_8","9_12","9_13","9_15","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Existence"]] binary;
var z1[Assignment["Waking_up"]] binary;
var z2[Assignment["Kinship"]] binary;
var z3[Assignment["Killing"]] binary;
var z4[Assignment["Cardinal_numbers"]] binary;
var z5[Assignment["Perception_active"]] binary;
var z6[Assignment["Aggregate"]] binary;
var z7[Assignment["Ordinal_numbers"]] binary;
var z8[Assignment["Measure_duration"]] binary;
var z9[Assignment["Quantity"]] binary;
var z10[Assignment["Response"]] binary;
var z11[Assignment["Kinship"]] binary;
var z12[Assignment["Request"]] binary;
var z13[Assignment["Contrition"]] binary;
var z14[Assignment["Activity_ready_state"]] binary;
var z15[Assignment["Collaboration"]] binary;
param probabilities0[Assignment["Existence"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Waking_up"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Kinship"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Killing"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Cardinal_numbers"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Perception_active"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Aggregate"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Ordinal_numbers"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Measure_duration"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Quantity"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Response"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;
param probabilities11[Assignment["Kinship"]] := read "../frameData/frame11.txt" as "<1s,2s> 3n" skip 2;
param probabilities12[Assignment["Request"]] := read "../frameData/frame12.txt" as "<1s,2s> 3n" skip 2;
param probabilities13[Assignment["Contrition"]] := read "../frameData/frame13.txt" as "<1s,2s> 3n" skip 2;
param probabilities14[Assignment["Activity_ready_state"]] := read "../frameData/frame14.txt" as "<1s,2s> 3n" skip 2;
param probabilities15[Assignment["Collaboration"]] := read "../frameData/frame15.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Existence"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Waking_up"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Kinship"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Killing"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Cardinal_numbers"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Perception_active"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Aggregate"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Ordinal_numbers"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Measure_duration"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Quantity"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Response"] : probabilities10[r,s] * z10[r,s])+(sum <r,s> in Assignment["Kinship"] : probabilities11[r,s] * z11[r,s])+(sum <r,s> in Assignment["Request"] : probabilities12[r,s] * z12[r,s])+(sum <r,s> in Assignment["Contrition"] : probabilities13[r,s] * z13[r,s])+(sum <r,s> in Assignment["Activity_ready_state"] : probabilities14[r,s] * z14[r,s])+(sum <r,s> in Assignment["Collaboration"] : probabilities15[r,s] * z15[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 47};
set G[I] := <0> {"0_0","0_39","0_4","0_47"}, <1> {"0_39","0_4","0_47","1_1","1_2","1_4"}, <2> {"0_39","0_4","0_47","1_2","1_4","2_2"}, <3> {"0_39","0_4","0_47","1_4","3_3","3_4"}, <4> {"0_39","0_4","0_47","1_4","3_4","4_4"}, <5> {"0_39","0_47","5_5"}, <6> {"0_39","0_47","6_15","6_6","6_7","6_8"}, <7> {"0_39","0_47","6_15","6_7","6_8","7_7"}, <8> {"0_39","0_47","6_15","6_8","8_15","8_8"}, <9> {"0_39","0_47","6_15","8_15","9_12","9_13","9_15","9_9"}, <10> {"0_39","0_47","10_10","10_12","6_15","8_15","9_12","9_13","9_15"}, <11> {"0_39","0_47","10_12","11_11","11_12","6_15","8_15","9_12","9_13","9_15"}, <12> {"0_39","0_47","10_12","11_12","12_12","6_15","8_15","9_12","9_13","9_15"}, <13> {"0_39","0_47","13_13","13_15","6_15","8_15","9_13","9_15"}, <14> {"0_39","0_47","13_15","14_14","14_15","6_15","8_15","9_15"}, <15> {"0_39","0_47","13_15","14_15","15_15","6_15","8_15","9_15"}, <16> {"0_39","0_47","16_16"}, <17> {"0_39","0_47","17_17"}, <18> {"0_39","0_47","18_18","18_28"}, <19> {"0_39","0_47","18_28","19_19","19_21","19_28"}, <20> {"0_39","0_47","18_28","19_21","19_28","20_20"}, <21> {"0_39","0_47","18_28","19_21","19_28","21_21"}, <22> {"0_39","0_47","18_28","19_28","22_22","22_23","22_28"}, <23> {"0_39","0_47","18_28","19_28","22_23","22_28","23_23","23_28"}, <24> {"0_39","0_47","18_28","19_28","22_28","23_28","24_24","24_25","24_28"}, <25> {"0_39","0_47","18_28","19_28","22_28","23_28","24_25","24_28","25_25"}, <26> {"0_39","0_47","18_28","19_28","22_28","23_28","24_28","26_26","26_28"}, <27> {"0_39","0_47","18_28","19_28","22_28","23_28","24_28","26_28","27_27","27_28"}, <28> {"0_39","0_47","18_28","19_28","22_28","23_28","24_28","26_28","27_28","28_28"}, <29> {"0_39","0_47","29_29"}, <30> {"0_39","0_47","30_30"}, <31> {"0_39","0_47","31_31"}, <32> {"0_39","0_47","32_32"}, <33> {"0_39","0_47","33_33"}, <34> {"0_39","0_47","34_34","34_35"}, <35> {"0_39","0_47","34_35","35_35"}, <36> {"0_39","0_47","36_36"}, <37> {"0_39","0_47","37_37","37_39"}, <38> {"0_39","0_47","37_39","38_38","38_39"}, <39> {"0_39","0_47","37_39","38_39","39_39"}, <40> {"0_47","40_40"}, <41> {"0_47","41_41"}, <42> {"0_47","42_42"}, <43> {"0_47","43_43"}, <44> {"0_47","44_44","44_46"}, <45> {"0_47","44_46","45_45","45_46"}, <46> {"0_47","44_46","45_46","46_46"}, <47> {"0_47","47_47"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Existence"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Waking_up"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Kinship"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Killing"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Cardinal_numbers"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Perception_active"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Aggregate"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Ordinal_numbers"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Measure_duration"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Quantity"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Response"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
subto overlap11: forall <i> in I do 
 sum <r> in Roles["Kinship"] do 
 sum <s> in G[i] do z11[r,s] <= 1;
subto overlap12: forall <i> in I do 
 sum <r> in Roles["Request"] do 
 sum <s> in G[i] do z12[r,s] <= 1;
subto overlap13: forall <i> in I do 
 sum <r> in Roles["Contrition"] do 
 sum <s> in G[i] do z13[r,s] <= 1;
subto overlap14: forall <i> in I do 
 sum <r> in Roles["Activity_ready_state"] do 
 sum <s> in G[i] do z14[r,s] <= 1;
subto overlap15: forall <i> in I do 
 sum <r> in Roles["Collaboration"] do 
 sum <s> in G[i] do z15[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Existence"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Waking_up"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Kinship"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Killing"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Cardinal_numbers"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Perception_active"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Aggregate"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Ordinal_numbers"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Measure_duration"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Quantity"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Response"] do sum <s> in Spans : z10[r,s] == 1;
subto unique11: forall <r> in Roles["Kinship"] do sum <s> in Spans : z11[r,s] == 1;
subto unique12: forall <r> in Roles["Request"] do sum <s> in Spans : z12[r,s] == 1;
subto unique13: forall <r> in Roles["Contrition"] do sum <s> in Spans : z13[r,s] == 1;
subto unique14: forall <r> in Roles["Activity_ready_state"] do sum <s> in Spans : z14[r,s] == 1;
subto unique15: forall <r> in Roles["Collaboration"] do sum <s> in Spans : z15[r,s] == 1;
#pairwise exclusion constraint
set Exc2 := {<"Ego","Relatives">,<"Alter","Relatives">};
subto exclusion2: forall <ri,rj> in Exc2 do z2[ri,"-1_-1"] + z2[rj,"-1_-1"] >= 1;
set Exc3 := {<"Cause","Killer">,<"Cause","Means">,<"Cause","Instrument">};
subto exclusion3: forall <ri,rj> in Exc3 do z3[ri,"-1_-1"] + z3[rj,"-1_-1"] >= 1;
set Exc7 := {<"Basis_of_order","Starting_point">};
subto exclusion7: forall <ri,rj> in Exc7 do z7[ri,"-1_-1"] + z7[rj,"-1_-1"] >= 1;
set Exc9 := {<"Individuals","Mass">};
subto exclusion9: forall <ri,rj> in Exc9 do z9[ri,"-1_-1"] + z9[rj,"-1_-1"] >= 1;
set Exc10 := {<"Agent","Responding_entity">};
subto exclusion10: forall <ri,rj> in Exc10 do z10[ri,"-1_-1"] + z10[rj,"-1_-1"] >= 1;
set Exc11 := {<"Ego","Relatives">,<"Alter","Relatives">};
subto exclusion11: forall <ri,rj> in Exc11 do z11[ri,"-1_-1"] + z11[rj,"-1_-1"] >= 1;
set Exc15 := {<"Partner_2","Partners">,<"Partner_1","Partners">};
subto exclusion15: forall <ri,rj> in Exc15 do z15[ri,"-1_-1"] + z15[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
set Reqr2 := {<"Alter","Ego">};
subto require2: forall <ri,rj> in Reqr2 do z2[ri,"-1_-1"] - z2[rj,"-1_-1"] == 0;
set Reqr11 := {<"Alter","Ego">};
subto require11: forall <ri,rj> in Reqr11 do z11[ri,"-1_-1"] - z11[rj,"-1_-1"] == 0;
set Reqr15 := {<"Partner_1","Partner_2">};
subto require15: forall <ri,rj> in Reqr15 do z15[ri,"-1_-1"] - z15[rj,"-1_-1"] == 0;
