# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Weapon","Calendric_unit","Information","Unattributed_information","Becoming_aware","Familiarity","Evidence","Transfer","Artifact","Ingredients","Exchange"};
set Roles[Frames] :=  <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Calendric_unit"> {"Relative_time","Unit","Count","Name","Salient_event","Whole"}, <"Information"> {"Means_of_Gathering","Source","Topic","Information","Cognizer"}, <"Unattributed_information"> {"Reported_fact","Time","Explanation","Duration"}, <"Becoming_aware"> {"Purpose","Circumstances","Topic","Time","Instrument","Frequency","Degree","Means","Period_of_iterations","Cognizer","State","Particular_iteration","Phenomenon","Ground","Manner","Evidence","Explanation"}, <"Familiarity"> {"Entity","Role","Depictive","Context","Degree","Cognizer"}, <"Evidence"> {"Domain_of_Relevance","Support","Manner","Depictive","Proposition","Degree","Cognizer"}, <"Transfer"> {"Place","Theme","Manner","Donor","Time","Transferors","Reason","Means","Recipient","Purpose"}, <"Artifact"> {"Creator","Type","Use","Material","Time_of_creation","Name","Artifact"}, <"Ingredients"> {"Source","Type","Use","Material","Product","Descriptor"}, <"Exchange"> {"Theme_2","Place","Period_of_iterations","Manner","Exchangers","Time","Themes","Frequency","Exchanger_2","Exchanger_1","Theme_1"};
set Spans := {"-1_-1","0_0","0_26","0_4","10_10","10_11","10_25","11_11","12_12","12_25","13_13","13_25","14_14","14_25","15_15","15_25","16_16","17_17","18_18","19_19","19_20","1_1","1_2","1_4","20_20","21_21","21_25","22_22","22_25","23_23","23_25","24_24","24_25","25_25","26_26","2_2","3_3","3_4","4_4","5_5","6_6","7_7","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Weapon"]] binary;
var z1[Assignment["Calendric_unit"]] binary;
var z2[Assignment["Information"]] binary;
var z3[Assignment["Unattributed_information"]] binary;
var z4[Assignment["Becoming_aware"]] binary;
var z5[Assignment["Familiarity"]] binary;
var z6[Assignment["Evidence"]] binary;
var z7[Assignment["Transfer"]] binary;
var z8[Assignment["Artifact"]] binary;
var z9[Assignment["Ingredients"]] binary;
var z10[Assignment["Exchange"]] binary;
param probabilities0[Assignment["Weapon"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Calendric_unit"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Information"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Unattributed_information"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Becoming_aware"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Familiarity"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Evidence"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Transfer"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Artifact"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Ingredients"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Exchange"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Weapon"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Calendric_unit"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Information"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Unattributed_information"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Becoming_aware"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Familiarity"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Evidence"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Transfer"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Artifact"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Ingredients"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Exchange"] : probabilities10[r,s] * z10[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 26};
set G[I] := <0> {"0_0","0_26","0_4"}, <1> {"0_26","0_4","1_1","1_2","1_4"}, <2> {"0_26","0_4","1_2","1_4","2_2"}, <3> {"0_26","0_4","1_4","3_3","3_4"}, <4> {"0_26","0_4","1_4","3_4","4_4"}, <5> {"0_26","5_5"}, <6> {"0_26","6_6"}, <7> {"0_26","7_7"}, <8> {"0_26","8_8"}, <9> {"0_26","9_9"}, <10> {"0_26","10_10","10_11","10_25"}, <11> {"0_26","10_11","10_25","11_11"}, <12> {"0_26","10_25","12_12","12_25"}, <13> {"0_26","10_25","12_25","13_13","13_25"}, <14> {"0_26","10_25","12_25","13_25","14_14","14_25"}, <15> {"0_26","10_25","12_25","13_25","14_25","15_15","15_25"}, <16> {"0_26","10_25","12_25","13_25","14_25","15_25","16_16"}, <17> {"0_26","10_25","12_25","13_25","14_25","15_25","17_17"}, <18> {"0_26","10_25","12_25","13_25","14_25","15_25","18_18"}, <19> {"0_26","10_25","12_25","13_25","14_25","15_25","19_19","19_20"}, <20> {"0_26","10_25","12_25","13_25","14_25","15_25","19_20","20_20"}, <21> {"0_26","10_25","12_25","13_25","14_25","15_25","21_21","21_25"}, <22> {"0_26","10_25","12_25","13_25","14_25","15_25","21_25","22_22","22_25"}, <23> {"0_26","10_25","12_25","13_25","14_25","15_25","21_25","22_25","23_23","23_25"}, <24> {"0_26","10_25","12_25","13_25","14_25","15_25","21_25","22_25","23_25","24_24","24_25"}, <25> {"0_26","10_25","12_25","13_25","14_25","15_25","21_25","22_25","23_25","24_25","25_25"}, <26> {"0_26","26_26"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Calendric_unit"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Information"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Unattributed_information"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Becoming_aware"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Familiarity"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Evidence"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Transfer"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Artifact"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Ingredients"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Exchange"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Weapon"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Calendric_unit"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Information"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Unattributed_information"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Becoming_aware"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Familiarity"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Evidence"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Transfer"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Artifact"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Ingredients"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Exchange"] do sum <s> in Spans : z10[r,s] == 1;
#pairwise exclusion constraint
set Exc7 := {<"Donor","Transferors">,<"Recipient","Transferors">};
subto exclusion7: forall <ri,rj> in Exc7 do z7[ri,"-1_-1"] + z7[rj,"-1_-1"] >= 1;
set Exc10 := {<"Theme_2","Themes">,<"Theme_1","Themes">,<"Exchanger_2","Exchangers">,<"Exchanger_1","Exchangers">};
subto exclusion10: forall <ri,rj> in Exc10 do z10[ri,"-1_-1"] + z10[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
set Reqr10 := {<"Exchanger_1","Exchanger_2">,<"Theme_1","Theme_2">,<"Exchangers","Themes">};
subto require10: forall <ri,rj> in Reqr10 do z10[ri,"-1_-1"] - z10[rj,"-1_-1"] == 0;
