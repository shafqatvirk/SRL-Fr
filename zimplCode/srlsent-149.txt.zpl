# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Weapon","Intentionally_act","Possession","Artifact","Manufacturing"};
set Roles[Frames] :=  <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Intentionally_act"> {"Purpose","Result","Time","Place","Frequency","Means","Event_dscription","Period_of_iterations","Domain","Act","Particular_iteration","Manner","Explanation","Agent"}, <"Possession"> {"Explanation","Time","Owner","Possession","Duration","Manner","Depictive"}, <"Artifact"> {"Creator","Type","Use","Material","Time_of_creation","Name","Artifact"}, <"Manufacturing"> {"Purpose","Circumstances","Time","Manufacturer","Instrument","Place","Frequency","Resource","Means","Locus","Consumer","Depictive","Factory","Product","Manner"};
set Spans := {"-1_-1","0_0","0_1","0_11","10_10","11_11","1_1","2_11","2_2","3_3","4_10","4_4","5_10","5_5","5_6","6_6","7_10","7_7","7_8","8_10","8_8","9_10","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Weapon"]] binary;
var z1[Assignment["Intentionally_act"]] binary;
var z2[Assignment["Possession"]] binary;
var z3[Assignment["Artifact"]] binary;
var z4[Assignment["Manufacturing"]] binary;
param probabilities0[Assignment["Weapon"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Intentionally_act"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Possession"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Artifact"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Manufacturing"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Weapon"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Intentionally_act"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Possession"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Artifact"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Manufacturing"] : probabilities4[r,s] * z4[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 11};
set G[I] := <0> {"0_0","0_1","0_11"}, <1> {"0_1","0_11","1_1"}, <2> {"0_11","2_11","2_2"}, <3> {"0_11","2_11","3_3"}, <4> {"0_11","2_11","4_10","4_4"}, <5> {"0_11","2_11","4_10","5_10","5_5","5_6"}, <6> {"0_11","2_11","4_10","5_10","5_6","6_6"}, <7> {"0_11","2_11","4_10","5_10","7_10","7_7","7_8"}, <8> {"0_11","2_11","4_10","5_10","7_10","7_8","8_10","8_8"}, <9> {"0_11","2_11","4_10","5_10","7_10","8_10","9_10","9_9"}, <10> {"0_11","10_10","2_11","4_10","5_10","7_10","8_10","9_10"}, <11> {"0_11","11_11","2_11"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Intentionally_act"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Possession"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Artifact"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Manufacturing"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Weapon"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Intentionally_act"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Possession"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Artifact"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Manufacturing"] do sum <s> in Spans : z4[r,s] == 1;
#pairwise exclusion constraint
#pairwise requirement constraint
