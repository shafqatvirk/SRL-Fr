# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"People","Participation","Practice","Cardinal_numbers","Processing_materials","Quantity","Participation","Motion","Quantity","Event_instance","Similarity","Sign","Timespan"};
set Roles[Frames] :=  <"People"> {"Person","Ethnicity","Persistent_characteristic","Context_of_acquaintance","Descriptor","Age","Origin"}, <"Participation"> {"Purpose","Time","Place","Institution","Participants","Event","Means","Participant_2","Participant_1","Duration","Degree_of_involvement","Manner"}, <"Practice"> {"Place","Duration","Agent","Action","Iteration","Co_participant","Time","Means","Manner","Purpose","Occasion"}, <"Cardinal_numbers"> {"Precision","Number","Multiplier","Entity"}, <"Processing_materials"> {"Place","Duration","Agent","Result","Material","Dimension","Time","Alterant","Reason","Purpose","Subregion"}, <"Quantity"> {"Mass","Q_Prop","Degree","Quantity","Individuals"}, <"Participation"> {"Purpose","Time","Place","Institution","Participants","Event","Means","Participant_2","Participant_1","Duration","Degree_of_involvement","Manner"}, <"Motion"> {"Speed","Duration","Area","Theme","Distance","Depictive","Manner","Result","Direction","Time","Source","Containing_event","Place","Goal","Purpose","Path","Carrier","Path_shape"}, <"Quantity"> {"Mass","Q_Prop","Degree","Quantity","Individuals"}, <"Event_instance"> {"Instance","Event","Instance_Prop"}, <"Similarity"> {"Circumstances","Time","Place","Degree","Entities","Cause","Depictive","Entity_2","Entity_1","Manner","Differentiating_fact","Dimension"}, <"Sign"> {"Degree","Indicator","Indicated"}, <"Timespan"> {"Whole","State","Descriptor","Duration"};
set Spans := {"-1_-1","0_0","0_1","0_29","0_8","10_10","10_11","10_12","11_11","12_12","13_13","14_14","15_15","15_28","16_16","16_28","17_17","17_18","17_28","18_18","19_19","19_28","1_1","1_8","20_20","20_22","21_21","21_22","22_22","23_23","24_24","24_28","25_25","25_28","26_26","27_27","27_28","28_28","29_29","2_2","2_3","2_4","2_5","2_8","3_3","4_4","5_5","5_8","6_6","6_8","7_7","7_8","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["People"]] binary;
var z1[Assignment["Participation"]] binary;
var z2[Assignment["Practice"]] binary;
var z3[Assignment["Cardinal_numbers"]] binary;
var z4[Assignment["Processing_materials"]] binary;
var z5[Assignment["Quantity"]] binary;
var z6[Assignment["Participation"]] binary;
var z7[Assignment["Motion"]] binary;
var z8[Assignment["Quantity"]] binary;
var z9[Assignment["Event_instance"]] binary;
var z10[Assignment["Similarity"]] binary;
var z11[Assignment["Sign"]] binary;
var z12[Assignment["Timespan"]] binary;
param probabilities0[Assignment["People"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Participation"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Practice"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Cardinal_numbers"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Processing_materials"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Quantity"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Participation"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Motion"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Quantity"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Event_instance"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Similarity"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;
param probabilities11[Assignment["Sign"]] := read "../frameData/frame11.txt" as "<1s,2s> 3n" skip 2;
param probabilities12[Assignment["Timespan"]] := read "../frameData/frame12.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["People"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Participation"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Practice"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Cardinal_numbers"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Processing_materials"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Quantity"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Participation"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Motion"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Quantity"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Event_instance"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Similarity"] : probabilities10[r,s] * z10[r,s])+(sum <r,s> in Assignment["Sign"] : probabilities11[r,s] * z11[r,s])+(sum <r,s> in Assignment["Timespan"] : probabilities12[r,s] * z12[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 29};
set G[I] := <0> {"0_0","0_1","0_29","0_8"}, <1> {"0_1","0_29","0_8","1_1","1_8"}, <2> {"0_29","0_8","1_8","2_2","2_3","2_4","2_5","2_8"}, <3> {"0_29","0_8","1_8","2_3","2_4","2_5","2_8","3_3"}, <4> {"0_29","0_8","1_8","2_4","2_5","2_8","4_4"}, <5> {"0_29","0_8","1_8","2_5","2_8","5_5","5_8"}, <6> {"0_29","0_8","1_8","2_8","5_8","6_6","6_8"}, <7> {"0_29","0_8","1_8","2_8","5_8","6_8","7_7","7_8"}, <8> {"0_29","0_8","1_8","2_8","5_8","6_8","7_8","8_8"}, <9> {"0_29","9_9"}, <10> {"0_29","10_10","10_11","10_12"}, <11> {"0_29","10_11","10_12","11_11"}, <12> {"0_29","10_12","12_12"}, <13> {"0_29","13_13"}, <14> {"0_29","14_14"}, <15> {"0_29","15_15","15_28"}, <16> {"0_29","15_28","16_16","16_28"}, <17> {"0_29","15_28","16_28","17_17","17_18","17_28"}, <18> {"0_29","15_28","16_28","17_18","17_28","18_18"}, <19> {"0_29","15_28","16_28","17_28","19_19","19_28"}, <20> {"0_29","15_28","16_28","17_28","19_28","20_20","20_22"}, <21> {"0_29","15_28","16_28","17_28","19_28","20_22","21_21","21_22"}, <22> {"0_29","15_28","16_28","17_28","19_28","20_22","21_22","22_22"}, <23> {"0_29","15_28","16_28","17_28","19_28","23_23"}, <24> {"0_29","15_28","16_28","17_28","19_28","24_24","24_28"}, <25> {"0_29","15_28","16_28","17_28","19_28","24_28","25_25","25_28"}, <26> {"0_29","15_28","16_28","17_28","19_28","24_28","25_28","26_26"}, <27> {"0_29","15_28","16_28","17_28","19_28","24_28","25_28","27_27","27_28"}, <28> {"0_29","15_28","16_28","17_28","19_28","24_28","25_28","27_28","28_28"}, <29> {"0_29","29_29"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["People"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Participation"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Practice"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Cardinal_numbers"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Processing_materials"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Quantity"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Participation"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Motion"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Quantity"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Event_instance"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Similarity"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
subto overlap11: forall <i> in I do 
 sum <r> in Roles["Sign"] do 
 sum <s> in G[i] do z11[r,s] <= 1;
subto overlap12: forall <i> in I do 
 sum <r> in Roles["Timespan"] do 
 sum <s> in G[i] do z12[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["People"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Participation"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Practice"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Cardinal_numbers"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Processing_materials"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Quantity"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Participation"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Motion"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Quantity"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Event_instance"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Similarity"] do sum <s> in Spans : z10[r,s] == 1;
subto unique11: forall <r> in Roles["Sign"] do sum <s> in Spans : z11[r,s] == 1;
subto unique12: forall <r> in Roles["Timespan"] do sum <s> in Spans : z12[r,s] == 1;
#pairwise exclusion constraint
set Exc1 := {<"Event","Institution">,<"Participant_2","Participants">,<"Participant_1","Participants">};
subto exclusion1: forall <ri,rj> in Exc1 do z1[ri,"-1_-1"] + z1[rj,"-1_-1"] >= 1;
set Exc5 := {<"Individuals","Mass">};
subto exclusion5: forall <ri,rj> in Exc5 do z5[ri,"-1_-1"] + z5[rj,"-1_-1"] >= 1;
set Exc6 := {<"Event","Institution">,<"Participant_2","Participants">,<"Participant_1","Participants">};
subto exclusion6: forall <ri,rj> in Exc6 do z6[ri,"-1_-1"] + z6[rj,"-1_-1"] >= 1;
set Exc7 := {<"Area","Direction">,<"Area","Distance">,<"Area","Goal">,<"Area","Path">,<"Area","Source">};
subto exclusion7: forall <ri,rj> in Exc7 do z7[ri,"-1_-1"] + z7[rj,"-1_-1"] >= 1;
set Exc8 := {<"Individuals","Mass">};
subto exclusion8: forall <ri,rj> in Exc8 do z8[ri,"-1_-1"] + z8[rj,"-1_-1"] >= 1;
set Exc10 := {<"Entities","Entity_1">,<"Entities","Entity_2">};
subto exclusion10: forall <ri,rj> in Exc10 do z10[ri,"-1_-1"] + z10[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
set Reqr10 := {<"Entity_1","Entity_2">};
subto require10: forall <ri,rj> in Reqr10 do z10[ri,"-1_-1"] - z10[rj,"-1_-1"] == 0;
