# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Relational_natural_features","Natural_features","Locale","Motion"};
set Roles[Frames] :=  <"Relational_natural_features"> {"Focal_feature","Relative_location","Landmark_feature","Container_possessor"}, <"Natural_features"> {"Type","Locale","Relative_location","Name","Formational_cause","Container_possessor","Constituent_parts","Descriptor"}, <"Locale"> {"Formational_cause","Locale","Relative_location","Name","Container_possessor","Related_event","Constituent_parts","Descriptor"}, <"Motion"> {"Speed","Duration","Area","Theme","Distance","Depictive","Manner","Result","Direction","Time","Source","Containing_event","Place","Goal","Purpose","Path","Carrier","Path_shape"};
set Spans := {"-1_-1","0_0","0_16","0_2","10_10","11_11","12_12","12_13","12_15","13_13","14_14","14_15","15_15","16_16","1_1","1_2","2_2","3_3","4_4","4_6","5_5","6_6","7_7","8_8","9_10","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Relational_natural_features"]] binary;
var z1[Assignment["Natural_features"]] binary;
var z2[Assignment["Locale"]] binary;
var z3[Assignment["Motion"]] binary;
param probabilities0[Assignment["Relational_natural_features"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Natural_features"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Locale"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Motion"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Relational_natural_features"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Natural_features"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Locale"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Motion"] : probabilities3[r,s] * z3[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 16};
set G[I] := <0> {"0_0","0_16","0_2"}, <1> {"0_16","0_2","1_1","1_2"}, <2> {"0_16","0_2","1_2","2_2"}, <3> {"0_16","3_3"}, <4> {"0_16","4_4","4_6"}, <5> {"0_16","4_6","5_5"}, <6> {"0_16","4_6","6_6"}, <7> {"0_16","7_7"}, <8> {"0_16","8_8"}, <9> {"0_16","9_10","9_9"}, <10> {"0_16","10_10","9_10"}, <11> {"0_16","11_11"}, <12> {"0_16","12_12","12_13","12_15"}, <13> {"0_16","12_13","12_15","13_13"}, <14> {"0_16","12_15","14_14","14_15"}, <15> {"0_16","12_15","14_15","15_15"}, <16> {"0_16","16_16"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Relational_natural_features"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Natural_features"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Locale"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Motion"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Relational_natural_features"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Natural_features"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Locale"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Motion"] do sum <s> in Spans : z3[r,s] == 1;
#pairwise exclusion constraint
set Exc3 := {<"Area","Direction">,<"Area","Distance">,<"Area","Goal">,<"Area","Path">,<"Area","Source">};
subto exclusion3: forall <ri,rj> in Exc3 do z3[ri,"-1_-1"] + z3[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
