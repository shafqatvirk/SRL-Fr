# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Simple_name","Assistance","Intentionally_create","Locale_by_use","Manufacturing"};
set Roles[Frames] :=  <"Simple_name"> {"Speaker","Entity","Term"}, <"Assistance"> {"Purpose","Time","Goal","Place","Frequency","Degree","Helper","Means","Benefited_party","Domain","Duration","Focal_entity","Manner","Explanation"}, <"Intentionally_create"> {"Created_entity","Place","Role","Manner","Components","Creator","Time","Means","Purpose","Co_participant"}, <"Locale_by_use"> {"Formational_cause","Use","Locale","Relative_location","Name","Container_possessor","Constituent_parts","Descriptor"}, <"Manufacturing"> {"Purpose","Circumstances","Time","Manufacturer","Instrument","Place","Frequency","Resource","Means","Locus","Consumer","Depictive","Factory","Product","Manner"};
set Spans := {"-1_-1","0_0","0_16","0_3","0_9","10_10","11_11","12_12","12_15","13_13","14_14","15_15","16_16","1_1","2_2","3_3","4_4","4_9","5_5","5_6","5_9","6_6","7_7","7_9","8_8","8_9","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Simple_name"]] binary;
var z1[Assignment["Assistance"]] binary;
var z2[Assignment["Intentionally_create"]] binary;
var z3[Assignment["Locale_by_use"]] binary;
var z4[Assignment["Manufacturing"]] binary;
param probabilities0[Assignment["Simple_name"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Assistance"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Intentionally_create"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Locale_by_use"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Manufacturing"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Simple_name"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Assistance"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Intentionally_create"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Locale_by_use"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Manufacturing"] : probabilities4[r,s] * z4[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 16};
set G[I] := <0> {"0_0","0_16","0_3","0_9"}, <1> {"0_16","0_3","0_9","1_1"}, <2> {"0_16","0_3","0_9","2_2"}, <3> {"0_16","0_3","0_9","3_3"}, <4> {"0_16","0_9","4_4","4_9"}, <5> {"0_16","0_9","4_9","5_5","5_6","5_9"}, <6> {"0_16","0_9","4_9","5_6","5_9","6_6"}, <7> {"0_16","0_9","4_9","5_9","7_7","7_9"}, <8> {"0_16","0_9","4_9","5_9","7_9","8_8","8_9"}, <9> {"0_16","0_9","4_9","5_9","7_9","8_9","9_9"}, <10> {"0_16","10_10"}, <11> {"0_16","11_11"}, <12> {"0_16","12_12","12_15"}, <13> {"0_16","12_15","13_13"}, <14> {"0_16","12_15","14_14"}, <15> {"0_16","12_15","15_15"}, <16> {"0_16","16_16"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Simple_name"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Assistance"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Intentionally_create"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Locale_by_use"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Manufacturing"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Simple_name"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Assistance"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Intentionally_create"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Locale_by_use"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Manufacturing"] do sum <s> in Spans : z4[r,s] == 1;
#pairwise exclusion constraint
#pairwise requirement constraint
