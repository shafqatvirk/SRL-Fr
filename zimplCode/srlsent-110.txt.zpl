# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Occupy_rank","Roadways","Buildings","Locale_by_use","Building","Leadership","Institutions","Age","Buildings"};
set Roles[Frames] :=  <"Occupy_rank"> {"Item","Time","Rank","Dimension","Comparison_set"}, <"Roadways"> {"Characteristic","Length","Use","Frequency_of_use","Goal","Relative_location","Endpoints","Direction","Source","Material","Path","Roadway","Name","Abundant_entities"}, <"Buildings"> {"Type","Place","Function","Time_of_creation","Relative_location","Name","Building","Descriptor","Material","Builder"}, <"Locale_by_use"> {"Formational_cause","Use","Locale","Relative_location","Name","Container_possessor","Constituent_parts","Descriptor"}, <"Building"> {"Purpose","Result","Components","Time","Descriptor","Instrument","Place","Created_entity","Means","Period_of_iterations","Particular_iteration","Duration","Beneficiary","Manner","Agent"}, <"Leadership"> {"Domain","Leader","Type","Depictive","Descriptor","Degree","Means","Role","Activity","Duration","Governed","Manner","Time"}, <"Institutions"> {"Members","Purpose","Domain","Place","Institution"}, <"Age"> {"Attribute","Degree","Entity","Time","Expressor","Duration","Age","Descriptor"}, <"Buildings"> {"Type","Place","Function","Time_of_creation","Relative_location","Name","Building","Descriptor","Material","Builder"};
set Spans := {"-1_-1","0_0","0_11","0_25","10_10","11_11","12_12","13_13","14_14","14_18","14_24","15_15","16_16","17_17","18_18","19_19","19_24","1_1","1_11","1_2","20_20","20_22","20_24","21_21","22_22","23_23","24_24","25_25","2_2","3_11","3_3","4_11","4_4","4_6","5_5","6_6","7_7","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Occupy_rank"]] binary;
var z1[Assignment["Roadways"]] binary;
var z2[Assignment["Buildings"]] binary;
var z3[Assignment["Locale_by_use"]] binary;
var z4[Assignment["Building"]] binary;
var z5[Assignment["Leadership"]] binary;
var z6[Assignment["Institutions"]] binary;
var z7[Assignment["Age"]] binary;
var z8[Assignment["Buildings"]] binary;
param probabilities0[Assignment["Occupy_rank"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Roadways"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Buildings"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Locale_by_use"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Building"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Leadership"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Institutions"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Age"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Buildings"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Occupy_rank"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Roadways"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Buildings"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Locale_by_use"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Building"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Leadership"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Institutions"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Age"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Buildings"] : probabilities8[r,s] * z8[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 25};
set G[I] := <0> {"0_0","0_11","0_25"}, <1> {"0_11","0_25","1_1","1_11","1_2"}, <2> {"0_11","0_25","1_11","1_2","2_2"}, <3> {"0_11","0_25","1_11","3_11","3_3"}, <4> {"0_11","0_25","1_11","3_11","4_11","4_4","4_6"}, <5> {"0_11","0_25","1_11","3_11","4_11","4_6","5_5"}, <6> {"0_11","0_25","1_11","3_11","4_11","4_6","6_6"}, <7> {"0_11","0_25","1_11","3_11","4_11","7_7"}, <8> {"0_11","0_25","1_11","3_11","4_11","8_8"}, <9> {"0_11","0_25","1_11","3_11","4_11","9_9"}, <10> {"0_11","0_25","10_10","1_11","3_11","4_11"}, <11> {"0_11","0_25","11_11","1_11","3_11","4_11"}, <12> {"0_25","12_12"}, <13> {"0_25","13_13"}, <14> {"0_25","14_14","14_18","14_24"}, <15> {"0_25","14_18","14_24","15_15"}, <16> {"0_25","14_18","14_24","16_16"}, <17> {"0_25","14_18","14_24","17_17"}, <18> {"0_25","14_18","14_24","18_18"}, <19> {"0_25","14_24","19_19","19_24"}, <20> {"0_25","14_24","19_24","20_20","20_22","20_24"}, <21> {"0_25","14_24","19_24","20_22","20_24","21_21"}, <22> {"0_25","14_24","19_24","20_22","20_24","22_22"}, <23> {"0_25","14_24","19_24","20_24","23_23"}, <24> {"0_25","14_24","19_24","20_24","24_24"}, <25> {"0_25","25_25"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Occupy_rank"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Roadways"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Buildings"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Locale_by_use"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Building"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Leadership"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Institutions"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Age"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Buildings"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Occupy_rank"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Roadways"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Buildings"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Locale_by_use"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Building"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Leadership"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Institutions"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Age"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Buildings"] do sum <s> in Spans : z8[r,s] == 1;
#pairwise exclusion constraint
set Exc7 := {<"Entity","Expressor">,<"Age","Degree">};
subto exclusion7: forall <ri,rj> in Exc7 do z7[ri,"-1_-1"] + z7[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
