# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Weapon","Project","Capability","Indigenous_origin","Foreign_or_domestic_country","Manufacturing","Capability","Capability","Reliance","Foreign_or_domestic_country","Store","Artifact"};
set Roles[Frames] :=  <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Project"> {"Salient_entity","Duration","Agent","Goal","Manner","Name","Project","Field","Descriptor","Activity"}, <"Capability"> {"Degree","Status","Entity","Relevant_feature","Circumstances","Role","Event","Cause"}, <"Indigenous_origin"> {"Entity","Origin"}, <"Foreign_or_domestic_country"> {"Relative_location","Name","Descriptor","Current_country","Population","Discourse_salient_country"}, <"Manufacturing"> {"Purpose","Circumstances","Time","Manufacturer","Instrument","Place","Frequency","Resource","Means","Locus","Consumer","Depictive","Factory","Product","Manner"}, <"Capability"> {"Degree","Status","Entity","Relevant_feature","Circumstances","Role","Event","Cause"}, <"Capability"> {"Degree","Status","Entity","Relevant_feature","Circumstances","Role","Event","Cause"}, <"Reliance"> {"Instrument","Degree","Benefit","Intermediary","Circumstances","Means","Purpose","Protagonist"}, <"Foreign_or_domestic_country"> {"Relative_location","Name","Descriptor","Current_country","Population","Discourse_salient_country"}, <"Store"> {"Possessor","Descriptor","Supply","Resource"}, <"Artifact"> {"Creator","Type","Use","Material","Time_of_creation","Name","Artifact"};
set Spans := {"-1_-1","0_0","0_1","0_13","0_2","0_24","10_10","11_11","12_12","13_13","14_14","15_15","16_16","17_17","18_18","18_23","19_19","19_23","1_1","20_20","20_23","21_21","22_22","23_23","24_24","2_13","2_2","3_13","3_3","4_13","4_4","5_13","5_5","6_10","6_11","6_13","6_6","7_7","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Weapon"]] binary;
var z1[Assignment["Project"]] binary;
var z2[Assignment["Capability"]] binary;
var z3[Assignment["Indigenous_origin"]] binary;
var z4[Assignment["Foreign_or_domestic_country"]] binary;
var z5[Assignment["Manufacturing"]] binary;
var z6[Assignment["Capability"]] binary;
var z7[Assignment["Capability"]] binary;
var z8[Assignment["Reliance"]] binary;
var z9[Assignment["Foreign_or_domestic_country"]] binary;
var z10[Assignment["Store"]] binary;
var z11[Assignment["Artifact"]] binary;
param probabilities0[Assignment["Weapon"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Project"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Capability"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Indigenous_origin"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Foreign_or_domestic_country"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Manufacturing"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Capability"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Capability"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Reliance"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Foreign_or_domestic_country"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Store"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;
param probabilities11[Assignment["Artifact"]] := read "../frameData/frame11.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Weapon"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Project"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Capability"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Indigenous_origin"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Foreign_or_domestic_country"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Manufacturing"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Capability"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Capability"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Reliance"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Foreign_or_domestic_country"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Store"] : probabilities10[r,s] * z10[r,s])+(sum <r,s> in Assignment["Artifact"] : probabilities11[r,s] * z11[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 24};
set G[I] := <0> {"0_0","0_1","0_13","0_2","0_24"}, <1> {"0_1","0_13","0_2","0_24","1_1"}, <2> {"0_13","0_2","0_24","2_13","2_2"}, <3> {"0_13","0_24","2_13","3_13","3_3"}, <4> {"0_13","0_24","2_13","3_13","4_13","4_4"}, <5> {"0_13","0_24","2_13","3_13","4_13","5_13","5_5"}, <6> {"0_13","0_24","2_13","3_13","4_13","5_13","6_10","6_11","6_13","6_6"}, <7> {"0_13","0_24","2_13","3_13","4_13","5_13","6_10","6_11","6_13","7_7"}, <8> {"0_13","0_24","2_13","3_13","4_13","5_13","6_10","6_11","6_13","8_8"}, <9> {"0_13","0_24","2_13","3_13","4_13","5_13","6_10","6_11","6_13","9_9"}, <10> {"0_13","0_24","10_10","2_13","3_13","4_13","5_13","6_10","6_11","6_13"}, <11> {"0_13","0_24","11_11","2_13","3_13","4_13","5_13","6_11","6_13"}, <12> {"0_13","0_24","12_12","2_13","3_13","4_13","5_13","6_13"}, <13> {"0_13","0_24","13_13","2_13","3_13","4_13","5_13","6_13"}, <14> {"0_24","14_14"}, <15> {"0_24","15_15"}, <16> {"0_24","16_16"}, <17> {"0_24","17_17"}, <18> {"0_24","18_18","18_23"}, <19> {"0_24","18_23","19_19","19_23"}, <20> {"0_24","18_23","19_23","20_20","20_23"}, <21> {"0_24","18_23","19_23","20_23","21_21"}, <22> {"0_24","18_23","19_23","20_23","22_22"}, <23> {"0_24","18_23","19_23","20_23","23_23"}, <24> {"0_24","24_24"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Project"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Capability"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Indigenous_origin"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Foreign_or_domestic_country"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Manufacturing"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Capability"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Capability"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Reliance"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Foreign_or_domestic_country"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Store"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
subto overlap11: forall <i> in I do 
 sum <r> in Roles["Artifact"] do 
 sum <s> in G[i] do z11[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Weapon"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Project"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Capability"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Indigenous_origin"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Foreign_or_domestic_country"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Manufacturing"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Capability"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Capability"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Reliance"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Foreign_or_domestic_country"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Store"] do sum <s> in Spans : z10[r,s] == 1;
subto unique11: forall <r> in Roles["Artifact"] do sum <s> in Spans : z11[r,s] == 1;
#pairwise exclusion constraint
set Exc1 := {<"Activity","Salient_entity">};
subto exclusion1: forall <ri,rj> in Exc1 do z1[ri,"-1_-1"] + z1[rj,"-1_-1"] >= 1;
set Exc8 := {<"Instrument","Means">,<"Benefit","Purpose">,<"Intermediary","Means">,<"Instrument","Intermediary">};
subto exclusion8: forall <ri,rj> in Exc8 do z8[ri,"-1_-1"] + z8[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
