# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Supply","Electricity","Temporal_collocation","Increment","Intentionally_act","Weapon","Hostile_encounter"};
set Roles[Frames] :=  <"Supply"> {"Recipient","Circumstances","Time","Supplier","Place","Co_theme","Purpose","Period_of_iterations","Means","Source","Theme","Purpose_of_recipient","Manner"}, <"Electricity"> {"Electricity","Descriptor","Source","Use"}, <"Temporal_collocation"> {"Event_description","Landmark_period","Trajector_entity","Landmark_entity","Landmark_event","Trajector_period","Trajector_event"}, <"Increment"> {"Initial_set","Class","Increment","Added_set"}, <"Intentionally_act"> {"Purpose","Result","Time","Place","Frequency","Means","Event_dscription","Period_of_iterations","Domain","Act","Particular_iteration","Manner","Explanation","Agent"}, <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Hostile_encounter"> {"Purpose","Result","Depictive","Instrument","Place","Degree","Means","Internal_cause","Reason","Particular_iteration","Duration","Sides","Issue","Side_2","Side_1","Manner","Time"};
set Spans := {"-1_-1","0_0","0_18","10_10","11_11","12_12","12_17","13_13","13_17","14_14","14_17","15_15","15_17","16_16","17_17","18_18","1_1","2_2","3_3","3_5","4_4","5_5","6_17","6_6","7_17","7_7","8_11","8_12","8_17","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Supply"]] binary;
var z1[Assignment["Electricity"]] binary;
var z2[Assignment["Temporal_collocation"]] binary;
var z3[Assignment["Increment"]] binary;
var z4[Assignment["Intentionally_act"]] binary;
var z5[Assignment["Weapon"]] binary;
var z6[Assignment["Hostile_encounter"]] binary;
param probabilities0[Assignment["Supply"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Electricity"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Temporal_collocation"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Increment"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Intentionally_act"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Weapon"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Hostile_encounter"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Supply"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Electricity"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Temporal_collocation"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Increment"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Intentionally_act"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Weapon"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Hostile_encounter"] : probabilities6[r,s] * z6[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 18};
set G[I] := <0> {"0_0","0_18"}, <1> {"0_18","1_1"}, <2> {"0_18","2_2"}, <3> {"0_18","3_3","3_5"}, <4> {"0_18","3_5","4_4"}, <5> {"0_18","3_5","5_5"}, <6> {"0_18","6_17","6_6"}, <7> {"0_18","6_17","7_17","7_7"}, <8> {"0_18","6_17","7_17","8_11","8_12","8_17","8_8"}, <9> {"0_18","6_17","7_17","8_11","8_12","8_17","9_9"}, <10> {"0_18","10_10","6_17","7_17","8_11","8_12","8_17"}, <11> {"0_18","11_11","6_17","7_17","8_11","8_12","8_17"}, <12> {"0_18","12_12","12_17","6_17","7_17","8_12","8_17"}, <13> {"0_18","12_17","13_13","13_17","6_17","7_17","8_17"}, <14> {"0_18","12_17","13_17","14_14","14_17","6_17","7_17","8_17"}, <15> {"0_18","12_17","13_17","14_17","15_15","15_17","6_17","7_17","8_17"}, <16> {"0_18","12_17","13_17","14_17","15_17","16_16","6_17","7_17","8_17"}, <17> {"0_18","12_17","13_17","14_17","15_17","17_17","6_17","7_17","8_17"}, <18> {"0_18","18_18"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Supply"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Electricity"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Temporal_collocation"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Increment"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Intentionally_act"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Hostile_encounter"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Supply"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Electricity"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Temporal_collocation"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Increment"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Intentionally_act"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Weapon"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Hostile_encounter"] do sum <s> in Spans : z6[r,s] == 1;
#pairwise exclusion constraint
set Exc2 := {<"Trajector_event","Trajector_period">,<"Landmark_entity","Landmark_event">,<"Landmark_event","Landmark_period">,<"Trajector_entity","Trajector_event">};
subto exclusion2: forall <ri,rj> in Exc2 do z2[ri,"-1_-1"] + z2[rj,"-1_-1"] >= 1;
set Exc6 := {<"Side_1","Sides">,<"Side_2","Sides">};
subto exclusion6: forall <ri,rj> in Exc6 do z6[ri,"-1_-1"] + z6[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
set Reqr6 := {<"Side_1","Side_2">};
subto require6: forall <ri,rj> in Reqr6 do z6[ri,"-1_-1"] - z6[rj,"-1_-1"] == 0;
