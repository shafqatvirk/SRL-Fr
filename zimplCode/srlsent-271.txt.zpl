# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Process_continue","Capability","Willingness","Cause_to_make_progress","Weapon","Weapon","Cognitive_connection","Artifact","Increment","Political_locales"};
set Roles[Frames] :=  <"Process_continue"> {"Duration","Place","Manner","Time","Circumstances","Depictive","Event","Concessive"}, <"Capability"> {"Degree","Status","Entity","Relevant_feature","Circumstances","Role","Event","Cause"}, <"Willingness"> {"Explanation","Time","Activity","Degree","Frequency","Cognizer"}, <"Cause_to_make_progress"> {"Purpose","Time","Place","Degree","Rate","Means","Domain","Duration","Particular_iteration","Project","Post_state","Manner","Explanation","Agent","Prior_state"}, <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Weapon"> {"Type","Use","Wielder","Descriptor","Material","Name","Part","Weapon","Time_of_creation","Creator"}, <"Cognitive_connection"> {"Point_of_view","Circumstances","Specification","Concept_2","Concept_1","Degree","Concepts"}, <"Artifact"> {"Creator","Type","Use","Material","Time_of_creation","Name","Artifact"}, <"Increment"> {"Initial_set","Class","Increment","Added_set"}, <"Political_locales"> {"Relative_location","Constituent_parts","Container_possessor","Descriptor","Name","Population","Locale"};
set Spans := {"-1_-1","0_0","0_14","0_31","10_10","11_11","11_14","12_12","12_14","13_13","14_14","15_15","16_16","17_17","18_18","18_30","19_19","19_20","19_30","1_1","20_20","21_21","21_29","21_30","22_22","23_23","24_24","25_25","26_26","27_27","28_28","29_29","2_2","30_30","31_31","3_3","4_4","5_5","5_6","6_6","7_14","7_7","7_8","8_14","8_8","9_10","9_14","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Process_continue"]] binary;
var z1[Assignment["Capability"]] binary;
var z2[Assignment["Willingness"]] binary;
var z3[Assignment["Cause_to_make_progress"]] binary;
var z4[Assignment["Weapon"]] binary;
var z5[Assignment["Weapon"]] binary;
var z6[Assignment["Cognitive_connection"]] binary;
var z7[Assignment["Artifact"]] binary;
var z8[Assignment["Increment"]] binary;
var z9[Assignment["Political_locales"]] binary;
param probabilities0[Assignment["Process_continue"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Capability"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Willingness"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Cause_to_make_progress"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Weapon"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Weapon"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Cognitive_connection"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Artifact"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Increment"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Political_locales"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Process_continue"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Capability"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Willingness"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Cause_to_make_progress"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Weapon"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Weapon"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Cognitive_connection"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Artifact"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Increment"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Political_locales"] : probabilities9[r,s] * z9[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 31};
set G[I] := <0> {"0_0","0_14","0_31"}, <1> {"0_14","0_31","1_1"}, <2> {"0_14","0_31","2_2"}, <3> {"0_14","0_31","3_3"}, <4> {"0_14","0_31","4_4"}, <5> {"0_14","0_31","5_5","5_6"}, <6> {"0_14","0_31","5_6","6_6"}, <7> {"0_14","0_31","7_14","7_7","7_8"}, <8> {"0_14","0_31","7_14","7_8","8_14","8_8"}, <9> {"0_14","0_31","7_14","8_14","9_10","9_14","9_9"}, <10> {"0_14","0_31","10_10","7_14","8_14","9_10","9_14"}, <11> {"0_14","0_31","11_11","11_14","7_14","8_14","9_14"}, <12> {"0_14","0_31","11_14","12_12","12_14","7_14","8_14","9_14"}, <13> {"0_14","0_31","11_14","12_14","13_13","7_14","8_14","9_14"}, <14> {"0_14","0_31","11_14","12_14","14_14","7_14","8_14","9_14"}, <15> {"0_31","15_15"}, <16> {"0_31","16_16"}, <17> {"0_31","17_17"}, <18> {"0_31","18_18","18_30"}, <19> {"0_31","18_30","19_19","19_20","19_30"}, <20> {"0_31","18_30","19_20","19_30","20_20"}, <21> {"0_31","18_30","19_30","21_21","21_29","21_30"}, <22> {"0_31","18_30","19_30","21_29","21_30","22_22"}, <23> {"0_31","18_30","19_30","21_29","21_30","23_23"}, <24> {"0_31","18_30","19_30","21_29","21_30","24_24"}, <25> {"0_31","18_30","19_30","21_29","21_30","25_25"}, <26> {"0_31","18_30","19_30","21_29","21_30","26_26"}, <27> {"0_31","18_30","19_30","21_29","21_30","27_27"}, <28> {"0_31","18_30","19_30","21_29","21_30","28_28"}, <29> {"0_31","18_30","19_30","21_29","21_30","29_29"}, <30> {"0_31","18_30","19_30","21_30","30_30"}, <31> {"0_31","31_31"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Process_continue"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Capability"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Willingness"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Cause_to_make_progress"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Weapon"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Cognitive_connection"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Artifact"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Increment"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Political_locales"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Process_continue"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Capability"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Willingness"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Cause_to_make_progress"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Weapon"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Weapon"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Cognitive_connection"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Artifact"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Increment"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Political_locales"] do sum <s> in Spans : z9[r,s] == 1;
#pairwise exclusion constraint
set Exc6 := {<"Concept_2","Concepts">,<"Concept_1","Concepts">};
subto exclusion6: forall <ri,rj> in Exc6 do z6[ri,"-1_-1"] + z6[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
