# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Natural_features","Creating","Boundary","Part_orientational","Part_orientational","Part_whole","Political_locales"};
set Roles[Frames] :=  <"Natural_features"> {"Type","Locale","Relative_location","Name","Formational_cause","Container_possessor","Constituent_parts","Descriptor"}, <"Creating"> {"Purpose","Components","Time","Instrument","Place","Frequency","Created_entity","Means","Role","Cause","Purpose_of_created_entity","Depictive","Creator","Period_of_iterations","Co_participant","Beneficiary","Manner"}, <"Boundary"> {"Boundary","Entity","Relative_location","Entities"}, <"Part_orientational"> {"Part_Prop","Part","Whole"}, <"Part_orientational"> {"Part_Prop","Part","Whole"}, <"Part_whole"> {"Part","Whole","Part_Prop","Orientation"}, <"Political_locales"> {"Relative_location","Constituent_parts","Container_possessor","Descriptor","Name","Population","Locale"};
set Spans := {"-1_-1","0_0","0_1","0_15","10_10","11_11","12_12","12_14","13_13","13_14","14_14","15_15","1_1","2_15","2_2","3_14","3_3","3_5","4_4","5_5","6_14","6_6","7_11","7_14","7_7","8_8","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Natural_features"]] binary;
var z1[Assignment["Creating"]] binary;
var z2[Assignment["Boundary"]] binary;
var z3[Assignment["Part_orientational"]] binary;
var z4[Assignment["Part_orientational"]] binary;
var z5[Assignment["Part_whole"]] binary;
var z6[Assignment["Political_locales"]] binary;
param probabilities0[Assignment["Natural_features"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Creating"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Boundary"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Part_orientational"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Part_orientational"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Part_whole"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Political_locales"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Natural_features"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Creating"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Boundary"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Part_orientational"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Part_orientational"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Part_whole"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Political_locales"] : probabilities6[r,s] * z6[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 15};
set G[I] := <0> {"0_0","0_1","0_15"}, <1> {"0_1","0_15","1_1"}, <2> {"0_15","2_15","2_2"}, <3> {"0_15","2_15","3_14","3_3","3_5"}, <4> {"0_15","2_15","3_14","3_5","4_4"}, <5> {"0_15","2_15","3_14","3_5","5_5"}, <6> {"0_15","2_15","3_14","6_14","6_6"}, <7> {"0_15","2_15","3_14","6_14","7_11","7_14","7_7"}, <8> {"0_15","2_15","3_14","6_14","7_11","7_14","8_8"}, <9> {"0_15","2_15","3_14","6_14","7_11","7_14","9_9"}, <10> {"0_15","10_10","2_15","3_14","6_14","7_11","7_14"}, <11> {"0_15","11_11","2_15","3_14","6_14","7_11","7_14"}, <12> {"0_15","12_12","12_14","2_15","3_14","6_14","7_14"}, <13> {"0_15","12_14","13_13","13_14","2_15","3_14","6_14","7_14"}, <14> {"0_15","12_14","13_14","14_14","2_15","3_14","6_14","7_14"}, <15> {"0_15","15_15","2_15"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Natural_features"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Creating"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Boundary"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Part_orientational"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Part_orientational"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Part_whole"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Political_locales"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Natural_features"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Creating"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Boundary"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Part_orientational"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Part_orientational"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Part_whole"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Political_locales"] do sum <s> in Spans : z6[r,s] == 1;
#pairwise exclusion constraint
set Exc1 := {<"Cause","Creator">};
subto exclusion1: forall <ri,rj> in Exc1 do z1[ri,"-1_-1"] + z1[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
