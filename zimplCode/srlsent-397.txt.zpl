# An autogenerated ZIMPL code to jointly map roles to spans for N number of frame in one sentence
set Frames := {"Quantity","Connecting_architecture","Motion","Containers","Building_subparts","Self_motion","Measure_linear_extent","Arriving","Self_motion","Cause_motion","Leadership","Posture","Perception_active","Part_inner_outer","Containers","Self_motion"};
set Roles[Frames] :=  <"Quantity"> {"Mass","Q_Prop","Degree","Quantity","Individuals"}, <"Connecting_architecture"> {"Part","Whole","Descriptor","Source","Material"}, <"Motion"> {"Speed","Duration","Area","Theme","Distance","Depictive","Manner","Result","Direction","Time","Source","Containing_event","Place","Goal","Purpose","Path","Carrier","Path_shape"}, <"Containers"> {"Type","Use","Container","Material","Relative_location","Part","Construction","Owner","Descriptor","Contents"}, <"Building_subparts"> {"Whole","Type","Building_part","Use"}, <"Self_motion"> {"Speed","Duration","Area","Purpose","Cotheme","Means","Depictive","Coordinated_event","Manner","Path","Result","Distance","Self_mover","Time","Source","External_cause","Place","Goal","Reason","Direction","Concessive","Internal_cause","Path_shape"}, <"Measure_linear_extent"> {"Count","Dimension","Unit","Stuff"}, <"Arriving"> {"Theme","Cotheme","Means","Depictive","Circumstances","Manner","Time","Source","Period_of_iterations","Degree","Event_description","Re_encoding","Goal","Purpose","Goal_conditions","Path","Frequency","Mode_of_transportation"}, <"Self_motion"> {"Speed","Duration","Area","Purpose","Cotheme","Means","Depictive","Coordinated_event","Manner","Path","Result","Distance","Self_mover","Time","Source","External_cause","Place","Goal","Reason","Direction","Concessive","Internal_cause","Path_shape"}, <"Cause_motion"> {"Initial_State","Area","Theme","Means","Depictive","Agent","Manner","Result","Distance","Explanation","Instrument","Cause","Time","Source","Degree","Place","Goal","Handle","Path"}, <"Leadership"> {"Domain","Leader","Type","Depictive","Descriptor","Degree","Means","Role","Activity","Duration","Governed","Manner","Time"}, <"Posture"> {"Duration","Agent","Dependent_state","Degree","Manner","Location","Time","Point_of_contact","Depictive","Purpose"}, <"Perception_active"> {"Purpose","Depictive","Place","Location_of_perceiver","Expected_entity","Body_part","Direction","State","Means","Phenomenon","Duration","Manner","Perceiver_agentive","Time"}, <"Part_inner_outer"> {"Part_Prop","Part","Whole"}, <"Containers"> {"Type","Use","Container","Material","Relative_location","Part","Construction","Owner","Descriptor","Contents"}, <"Self_motion"> {"Speed","Duration","Area","Purpose","Cotheme","Means","Depictive","Coordinated_event","Manner","Path","Result","Distance","Self_mover","Time","Source","External_cause","Place","Goal","Reason","Direction","Concessive","Internal_cause","Path_shape"};
set Spans := {"-1_-1","0_0","0_1","0_2","0_3","0_45","10_10","11_11","11_14","12_12","12_14","13_13","14_14","15_15","16_16","16_17","16_18","16_19","17_17","18_18","18_19","19_19","1_1","20_20","21_21","22_22","23_23","24_24","25_25","25_28","26_26","26_28","27_27","28_28","29_29","2_2","2_3","30_30","30_44","31_31","31_33","32_32","32_33","33_33","34_34","35_35","36_36","36_44","37_37","37_41","37_44","38_38","39_39","3_3","40_40","41_41","42_42","42_44","43_43","43_44","44_44","45_45","4_4","5_10","5_11","5_14","5_5","5_7","6_6","7_7","8_10","8_8","9_10","9_9"};
set Assignment[<f> in Frames] := {Roles[f]*Spans};
var z0[Assignment["Quantity"]] binary;
var z1[Assignment["Connecting_architecture"]] binary;
var z2[Assignment["Motion"]] binary;
var z3[Assignment["Containers"]] binary;
var z4[Assignment["Building_subparts"]] binary;
var z5[Assignment["Self_motion"]] binary;
var z6[Assignment["Measure_linear_extent"]] binary;
var z7[Assignment["Arriving"]] binary;
var z8[Assignment["Self_motion"]] binary;
var z9[Assignment["Cause_motion"]] binary;
var z10[Assignment["Leadership"]] binary;
var z11[Assignment["Posture"]] binary;
var z12[Assignment["Perception_active"]] binary;
var z13[Assignment["Part_inner_outer"]] binary;
var z14[Assignment["Containers"]] binary;
var z15[Assignment["Self_motion"]] binary;
param probabilities0[Assignment["Quantity"]] := read "../frameData/frame0.txt" as "<1s,2s> 3n" skip 2;
param probabilities1[Assignment["Connecting_architecture"]] := read "../frameData/frame1.txt" as "<1s,2s> 3n" skip 2;
param probabilities2[Assignment["Motion"]] := read "../frameData/frame2.txt" as "<1s,2s> 3n" skip 2;
param probabilities3[Assignment["Containers"]] := read "../frameData/frame3.txt" as "<1s,2s> 3n" skip 2;
param probabilities4[Assignment["Building_subparts"]] := read "../frameData/frame4.txt" as "<1s,2s> 3n" skip 2;
param probabilities5[Assignment["Self_motion"]] := read "../frameData/frame5.txt" as "<1s,2s> 3n" skip 2;
param probabilities6[Assignment["Measure_linear_extent"]] := read "../frameData/frame6.txt" as "<1s,2s> 3n" skip 2;
param probabilities7[Assignment["Arriving"]] := read "../frameData/frame7.txt" as "<1s,2s> 3n" skip 2;
param probabilities8[Assignment["Self_motion"]] := read "../frameData/frame8.txt" as "<1s,2s> 3n" skip 2;
param probabilities9[Assignment["Cause_motion"]] := read "../frameData/frame9.txt" as "<1s,2s> 3n" skip 2;
param probabilities10[Assignment["Leadership"]] := read "../frameData/frame10.txt" as "<1s,2s> 3n" skip 2;
param probabilities11[Assignment["Posture"]] := read "../frameData/frame11.txt" as "<1s,2s> 3n" skip 2;
param probabilities12[Assignment["Perception_active"]] := read "../frameData/frame12.txt" as "<1s,2s> 3n" skip 2;
param probabilities13[Assignment["Part_inner_outer"]] := read "../frameData/frame13.txt" as "<1s,2s> 3n" skip 2;
param probabilities14[Assignment["Containers"]] := read "../frameData/frame14.txt" as "<1s,2s> 3n" skip 2;
param probabilities15[Assignment["Self_motion"]] := read "../frameData/frame15.txt" as "<1s,2s> 3n" skip 2;

 #Objective Function 
maximize assign : (sum <r,s> in Assignment["Quantity"] : probabilities0[r,s] * z0[r,s])+(sum <r,s> in Assignment["Connecting_architecture"] : probabilities1[r,s] * z1[r,s])+(sum <r,s> in Assignment["Motion"] : probabilities2[r,s] * z2[r,s])+(sum <r,s> in Assignment["Containers"] : probabilities3[r,s] * z3[r,s])+(sum <r,s> in Assignment["Building_subparts"] : probabilities4[r,s] * z4[r,s])+(sum <r,s> in Assignment["Self_motion"] : probabilities5[r,s] * z5[r,s])+(sum <r,s> in Assignment["Measure_linear_extent"] : probabilities6[r,s] * z6[r,s])+(sum <r,s> in Assignment["Arriving"] : probabilities7[r,s] * z7[r,s])+(sum <r,s> in Assignment["Self_motion"] : probabilities8[r,s] * z8[r,s])+(sum <r,s> in Assignment["Cause_motion"] : probabilities9[r,s] * z9[r,s])+(sum <r,s> in Assignment["Leadership"] : probabilities10[r,s] * z10[r,s])+(sum <r,s> in Assignment["Posture"] : probabilities11[r,s] * z11[r,s])+(sum <r,s> in Assignment["Perception_active"] : probabilities12[r,s] * z12[r,s])+(sum <r,s> in Assignment["Part_inner_outer"] : probabilities13[r,s] * z13[r,s])+(sum <r,s> in Assignment["Containers"] : probabilities14[r,s] * z14[r,s])+(sum <r,s> in Assignment["Self_motion"] : probabilities15[r,s] * z15[r,s]);
#Constraints
#Overlap Constraints
set I := {0 to 45};
set G[I] := <0> {"0_0","0_1","0_2","0_3","0_45"}, <1> {"0_1","0_2","0_3","0_45","1_1"}, <2> {"0_2","0_3","0_45","2_2","2_3"}, <3> {"0_3","0_45","2_3","3_3"}, <4> {"0_45","4_4"}, <5> {"0_45","5_10","5_11","5_14","5_5","5_7"}, <6> {"0_45","5_10","5_11","5_14","5_7","6_6"}, <7> {"0_45","5_10","5_11","5_14","5_7","7_7"}, <8> {"0_45","5_10","5_11","5_14","8_10","8_8"}, <9> {"0_45","5_10","5_11","5_14","8_10","9_10","9_9"}, <10> {"0_45","10_10","5_10","5_11","5_14","8_10","9_10"}, <11> {"0_45","11_11","11_14","5_11","5_14"}, <12> {"0_45","11_14","12_12","12_14","5_14"}, <13> {"0_45","11_14","12_14","13_13","5_14"}, <14> {"0_45","11_14","12_14","14_14","5_14"}, <15> {"0_45","15_15"}, <16> {"0_45","16_16","16_17","16_18","16_19"}, <17> {"0_45","16_17","16_18","16_19","17_17"}, <18> {"0_45","16_18","16_19","18_18","18_19"}, <19> {"0_45","16_19","18_19","19_19"}, <20> {"0_45","20_20"}, <21> {"0_45","21_21"}, <22> {"0_45","22_22"}, <23> {"0_45","23_23"}, <24> {"0_45","24_24"}, <25> {"0_45","25_25","25_28"}, <26> {"0_45","25_28","26_26","26_28"}, <27> {"0_45","25_28","26_28","27_27"}, <28> {"0_45","25_28","26_28","28_28"}, <29> {"0_45","29_29"}, <30> {"0_45","30_30","30_44"}, <31> {"0_45","30_44","31_31","31_33"}, <32> {"0_45","30_44","31_33","32_32","32_33"}, <33> {"0_45","30_44","31_33","32_33","33_33"}, <34> {"0_45","30_44","34_34"}, <35> {"0_45","30_44","35_35"}, <36> {"0_45","30_44","36_36","36_44"}, <37> {"0_45","30_44","36_44","37_37","37_41","37_44"}, <38> {"0_45","30_44","36_44","37_41","37_44","38_38"}, <39> {"0_45","30_44","36_44","37_41","37_44","39_39"}, <40> {"0_45","30_44","36_44","37_41","37_44","40_40"}, <41> {"0_45","30_44","36_44","37_41","37_44","41_41"}, <42> {"0_45","30_44","36_44","37_44","42_42","42_44"}, <43> {"0_45","30_44","36_44","37_44","42_44","43_43","43_44"}, <44> {"0_45","30_44","36_44","37_44","42_44","43_44","44_44"}, <45> {"0_45","45_45"};
subto overlap0: forall <i> in I do 
 sum <r> in Roles["Quantity"] do 
 sum <s> in G[i] do z0[r,s] <= 1;
subto overlap1: forall <i> in I do 
 sum <r> in Roles["Connecting_architecture"] do 
 sum <s> in G[i] do z1[r,s] <= 1;
subto overlap2: forall <i> in I do 
 sum <r> in Roles["Motion"] do 
 sum <s> in G[i] do z2[r,s] <= 1;
subto overlap3: forall <i> in I do 
 sum <r> in Roles["Containers"] do 
 sum <s> in G[i] do z3[r,s] <= 1;
subto overlap4: forall <i> in I do 
 sum <r> in Roles["Building_subparts"] do 
 sum <s> in G[i] do z4[r,s] <= 1;
subto overlap5: forall <i> in I do 
 sum <r> in Roles["Self_motion"] do 
 sum <s> in G[i] do z5[r,s] <= 1;
subto overlap6: forall <i> in I do 
 sum <r> in Roles["Measure_linear_extent"] do 
 sum <s> in G[i] do z6[r,s] <= 1;
subto overlap7: forall <i> in I do 
 sum <r> in Roles["Arriving"] do 
 sum <s> in G[i] do z7[r,s] <= 1;
subto overlap8: forall <i> in I do 
 sum <r> in Roles["Self_motion"] do 
 sum <s> in G[i] do z8[r,s] <= 1;
subto overlap9: forall <i> in I do 
 sum <r> in Roles["Cause_motion"] do 
 sum <s> in G[i] do z9[r,s] <= 1;
subto overlap10: forall <i> in I do 
 sum <r> in Roles["Leadership"] do 
 sum <s> in G[i] do z10[r,s] <= 1;
subto overlap11: forall <i> in I do 
 sum <r> in Roles["Posture"] do 
 sum <s> in G[i] do z11[r,s] <= 1;
subto overlap12: forall <i> in I do 
 sum <r> in Roles["Perception_active"] do 
 sum <s> in G[i] do z12[r,s] <= 1;
subto overlap13: forall <i> in I do 
 sum <r> in Roles["Part_inner_outer"] do 
 sum <s> in G[i] do z13[r,s] <= 1;
subto overlap14: forall <i> in I do 
 sum <r> in Roles["Containers"] do 
 sum <s> in G[i] do z14[r,s] <= 1;
subto overlap15: forall <i> in I do 
 sum <r> in Roles["Self_motion"] do 
 sum <s> in G[i] do z15[r,s] <= 1;
#Uniqueness Constraint
subto unique0: forall <r> in Roles["Quantity"] do sum <s> in Spans : z0[r,s] == 1;
subto unique1: forall <r> in Roles["Connecting_architecture"] do sum <s> in Spans : z1[r,s] == 1;
subto unique2: forall <r> in Roles["Motion"] do sum <s> in Spans : z2[r,s] == 1;
subto unique3: forall <r> in Roles["Containers"] do sum <s> in Spans : z3[r,s] == 1;
subto unique4: forall <r> in Roles["Building_subparts"] do sum <s> in Spans : z4[r,s] == 1;
subto unique5: forall <r> in Roles["Self_motion"] do sum <s> in Spans : z5[r,s] == 1;
subto unique6: forall <r> in Roles["Measure_linear_extent"] do sum <s> in Spans : z6[r,s] == 1;
subto unique7: forall <r> in Roles["Arriving"] do sum <s> in Spans : z7[r,s] == 1;
subto unique8: forall <r> in Roles["Self_motion"] do sum <s> in Spans : z8[r,s] == 1;
subto unique9: forall <r> in Roles["Cause_motion"] do sum <s> in Spans : z9[r,s] == 1;
subto unique10: forall <r> in Roles["Leadership"] do sum <s> in Spans : z10[r,s] == 1;
subto unique11: forall <r> in Roles["Posture"] do sum <s> in Spans : z11[r,s] == 1;
subto unique12: forall <r> in Roles["Perception_active"] do sum <s> in Spans : z12[r,s] == 1;
subto unique13: forall <r> in Roles["Part_inner_outer"] do sum <s> in Spans : z13[r,s] == 1;
subto unique14: forall <r> in Roles["Containers"] do sum <s> in Spans : z14[r,s] == 1;
subto unique15: forall <r> in Roles["Self_motion"] do sum <s> in Spans : z15[r,s] == 1;
#pairwise exclusion constraint
set Exc0 := {<"Individuals","Mass">};
subto exclusion0: forall <ri,rj> in Exc0 do z0[ri,"-1_-1"] + z0[rj,"-1_-1"] >= 1;
set Exc2 := {<"Area","Direction">,<"Area","Distance">,<"Area","Goal">,<"Area","Path">,<"Area","Source">};
subto exclusion2: forall <ri,rj> in Exc2 do z2[ri,"-1_-1"] + z2[rj,"-1_-1"] >= 1;
set Exc5 := {<"Area","Direction">,<"Area","Goal">,<"Area","Path">,<"Area","Source">};
subto exclusion5: forall <ri,rj> in Exc5 do z5[ri,"-1_-1"] + z5[rj,"-1_-1"] >= 1;
set Exc8 := {<"Area","Direction">,<"Area","Goal">,<"Area","Path">,<"Area","Source">};
subto exclusion8: forall <ri,rj> in Exc8 do z8[ri,"-1_-1"] + z8[rj,"-1_-1"] >= 1;
set Exc9 := {<"Area","Source">,<"Area","Result">,<"Agent","Cause">,<"Area","Initial_State">,<"Area","Path">,<"Area","Goal">};
subto exclusion9: forall <ri,rj> in Exc9 do z9[ri,"-1_-1"] + z9[rj,"-1_-1"] >= 1;
set Exc15 := {<"Area","Direction">,<"Area","Goal">,<"Area","Path">,<"Area","Source">};
subto exclusion15: forall <ri,rj> in Exc15 do z15[ri,"-1_-1"] + z15[rj,"-1_-1"] >= 1;
#pairwise requirement constraint
